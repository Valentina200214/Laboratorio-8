
Laboratorio 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efe0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800f180  0800f180  00010180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f580  0800f580  000114ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f580  0800f580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f588  0800f588  000114ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f588  0800f588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f58c  0800f58c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004ec  20000000  0800f590  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002318  200004ec  0800fa7c  000114ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002804  0800fa7c  00011804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000114ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b431  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004561  00000000  00000000  0002c94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00030eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117e  00000000  00000000  00032578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c906  00000000  00000000  000336f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea0a  00000000  00000000  0004fffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a104b  00000000  00000000  0006ea06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fa51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007054  00000000  00000000  0010fa94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00116ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004ec 	.word	0x200004ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f168 	.word	0x0800f168

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004f0 	.word	0x200004f0
 80001dc:	0800f168 	.word	0x0800f168

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Tiempo_Init>:
float fir_coeffs[FILTER_LENGTH] = {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1};
float rpm_buffer[FILTER_LENGTH];
int buffer_index = 0;


void Tiempo_Init(TIM_HandleTypeDef *tim_tiempo){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	tim_tiempo_Global = tim_tiempo;
 8000f50:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <Tiempo_Init+0x20>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim_tiempo_Global);
 8000f56:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <Tiempo_Init+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 feb2 	bl	8006cc4 <HAL_TIM_Base_Start>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000508 	.word	0x20000508

08000f6c <aplicarFiltroFIR>:

int16_t aplicarFiltroFIR(int16_t rpm_actual) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
    rpm_buffer[buffer_index] = rpm_actual;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <aplicarFiltroFIR+0xc4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f7e:	ee07 2a90 	vmov	s15, r2
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	4a2b      	ldr	r2, [pc, #172]	@ (8001034 <aplicarFiltroFIR+0xc8>)
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
    buffer_index = (buffer_index + 1) % FILTER_LENGTH;
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <aplicarFiltroFIR+0xc4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1c59      	adds	r1, r3, #1
 8000f96:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <aplicarFiltroFIR+0xcc>)
 8000f98:	fb83 2301 	smull	r2, r3, r3, r1
 8000f9c:	109a      	asrs	r2, r3, #2
 8000f9e:	17cb      	asrs	r3, r1, #31
 8000fa0:	1ad2      	subs	r2, r2, r3
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	1aca      	subs	r2, r1, r3
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <aplicarFiltroFIR+0xc4>)
 8000fae:	601a      	str	r2, [r3, #0]

    float filtered_rpm = 0.0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < FILTER_LENGTH; i++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	e028      	b.n	800100e <aplicarFiltroFIR+0xa2>
        int idx = (buffer_index - i + FILTER_LENGTH) % FILTER_LENGTH;
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <aplicarFiltroFIR+0xc4>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	f103 020a 	add.w	r2, r3, #10
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <aplicarFiltroFIR+0xcc>)
 8000fca:	fb83 1302 	smull	r1, r3, r3, r2
 8000fce:	1099      	asrs	r1, r3, #2
 8000fd0:	17d3      	asrs	r3, r2, #31
 8000fd2:	1ac9      	subs	r1, r1, r3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	60fb      	str	r3, [r7, #12]
        filtered_rpm += fir_coeffs[i] * rpm_buffer[idx];
 8000fe0:	4a16      	ldr	r2, [pc, #88]	@ (800103c <aplicarFiltroFIR+0xd0>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	ed93 7a00 	vldr	s14, [r3]
 8000fec:	4a11      	ldr	r2, [pc, #68]	@ (8001034 <aplicarFiltroFIR+0xc8>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < FILTER_LENGTH; i++) {
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b09      	cmp	r3, #9
 8001012:	ddd3      	ble.n	8000fbc <aplicarFiltroFIR+0x50>
    }
    return filtered_rpm;
 8001014:	edd7 7a05 	vldr	s15, [r7, #20]
 8001018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101c:	ee17 3a90 	vmov	r3, s15
 8001020:	b21b      	sxth	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000534 	.word	0x20000534
 8001034:	2000050c 	.word	0x2000050c
 8001038:	66666667 	.word	0x66666667
 800103c:	20000000 	.word	0x20000000

08001040 <calibracion>:

void calibracion() {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    int vrb = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]

    tim_tiempo_Global->Instance->CNT = 0;
 800104a:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <calibracion+0xe0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

    while ((tim_tiempo_Global->Instance->CNT) >= 0) {
 8001054:	e053      	b.n	80010fe <calibracion+0xbe>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);

        while (((tim_tiempo_Global->Instance->CNT)) >= 2) {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105c:	4831      	ldr	r0, [pc, #196]	@ (8001124 <calibracion+0xe4>)
 800105e:	f003 ff1d 	bl	8004e9c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001068:	482e      	ldr	r0, [pc, #184]	@ (8001124 <calibracion+0xe4>)
 800106a:	f003 ff17 	bl	8004e9c <HAL_GPIO_WritePin>

            while (((tim_tiempo_Global->Instance->CNT)) >= 4) {
 800106e:	e030      	b.n	80010d2 <calibracion+0x92>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001076:	482b      	ldr	r0, [pc, #172]	@ (8001124 <calibracion+0xe4>)
 8001078:	f003 ff10 	bl	8004e9c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001082:	4828      	ldr	r0, [pc, #160]	@ (8001124 <calibracion+0xe4>)
 8001084:	f003 ff0a 	bl	8004e9c <HAL_GPIO_WritePin>

                while (((tim_tiempo_Global->Instance->CNT)) >= 6) {
 8001088:	e01a      	b.n	80010c0 <calibracion+0x80>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001090:	4824      	ldr	r0, [pc, #144]	@ (8001124 <calibracion+0xe4>)
 8001092:	f003 ff03 	bl	8004e9c <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800109c:	4821      	ldr	r0, [pc, #132]	@ (8001124 <calibracion+0xe4>)
 800109e:	f003 fefd 	bl	8004e9c <HAL_GPIO_WritePin>

                    if (((tim_tiempo_Global->Instance->CNT)) >= 8) {
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <calibracion+0xe0>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d908      	bls.n	80010c0 <calibracion+0x80>
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010b4:	481b      	ldr	r0, [pc, #108]	@ (8001124 <calibracion+0xe4>)
 80010b6:	f003 fef1 	bl	8004e9c <HAL_GPIO_WritePin>
                        vrb = 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
                        break;
 80010be:	e005      	b.n	80010cc <calibracion+0x8c>
                while (((tim_tiempo_Global->Instance->CNT)) >= 6) {
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <calibracion+0xe0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d8de      	bhi.n	800108a <calibracion+0x4a>
                    }
                }
                if (vrb == 1) break;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d006      	beq.n	80010e0 <calibracion+0xa0>
            while (((tim_tiempo_Global->Instance->CNT)) >= 4) {
 80010d2:	4b13      	ldr	r3, [pc, #76]	@ (8001120 <calibracion+0xe0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d8c8      	bhi.n	8001070 <calibracion+0x30>
 80010de:	e000      	b.n	80010e2 <calibracion+0xa2>
                if (vrb == 1) break;
 80010e0:	bf00      	nop
            }
            if (vrb == 1) break;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d006      	beq.n	80010f6 <calibracion+0xb6>
        while (((tim_tiempo_Global->Instance->CNT)) >= 2) {
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <calibracion+0xe0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d8b0      	bhi.n	8001056 <calibracion+0x16>
 80010f4:	e000      	b.n	80010f8 <calibracion+0xb8>
            if (vrb == 1) break;
 80010f6:	bf00      	nop
        }
        if (vrb == 1) break;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d00a      	beq.n	8001114 <calibracion+0xd4>
    while ((tim_tiempo_Global->Instance->CNT) >= 0) {
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <calibracion+0xe0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800110c:	4805      	ldr	r0, [pc, #20]	@ (8001124 <calibracion+0xe4>)
 800110e:	f003 fec5 	bl	8004e9c <HAL_GPIO_WritePin>
        while (((tim_tiempo_Global->Instance->CNT)) >= 2) {
 8001112:	e7e9      	b.n	80010e8 <calibracion+0xa8>
        if (vrb == 1) break;
 8001114:	bf00      	nop
    }
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000508 	.word	0x20000508
 8001124:	40020400 	.word	0x40020400

08001128 <datos_enviar>:
//uint16_t objetivo_r[6] = {0};

void datos_enviar(int16_t rev, int32_t contador, uint32_t tiempo, int16_t mm_s, int16_t rad_s,
                  uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4,
                  float volt1, float volt2, float volt3, float volt4,
                  uint16_t dist1, uint16_t dist2, uint16_t dist3, uint16_t dist4) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	@ 0x38
 800112c:	af00      	add	r7, sp, #0
 800112e:	61b9      	str	r1, [r7, #24]
 8001130:	617a      	str	r2, [r7, #20]
 8001132:	461a      	mov	r2, r3
 8001134:	ed87 0a04 	vstr	s0, [r7, #16]
 8001138:	edc7 0a03 	vstr	s1, [r7, #12]
 800113c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001140:	edc7 1a01 	vstr	s3, [r7, #4]
 8001144:	4603      	mov	r3, r0
 8001146:	83fb      	strh	r3, [r7, #30]
 8001148:	4613      	mov	r3, r2
 800114a:	83bb      	strh	r3, [r7, #28]
    int idxx = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	@ 0x34

    buffer[idxx++] = 1;
 8001150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	637a      	str	r2, [r7, #52]	@ 0x34
 8001156:	4aa2      	ldr	r2, [pc, #648]	@ (80013e0 <datos_enviar+0x2b8>)
 8001158:	2101      	movs	r1, #1
 800115a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rev >> 8) & 0xFF;
 800115c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001160:	121b      	asrs	r3, r3, #8
 8001162:	b219      	sxth	r1, r3
 8001164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001166:	1c5a      	adds	r2, r3, #1
 8001168:	637a      	str	r2, [r7, #52]	@ 0x34
 800116a:	b2c9      	uxtb	r1, r1
 800116c:	4a9c      	ldr	r2, [pc, #624]	@ (80013e0 <datos_enviar+0x2b8>)
 800116e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rev & 0xFF;
 8001170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	637a      	str	r2, [r7, #52]	@ 0x34
 8001176:	8bfa      	ldrh	r2, [r7, #30]
 8001178:	b2d1      	uxtb	r1, r2
 800117a:	4a99      	ldr	r2, [pc, #612]	@ (80013e0 <datos_enviar+0x2b8>)
 800117c:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 2;
 800117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	637a      	str	r2, [r7, #52]	@ 0x34
 8001184:	4a96      	ldr	r2, [pc, #600]	@ (80013e0 <datos_enviar+0x2b8>)
 8001186:	2102      	movs	r1, #2
 8001188:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 24) & 0xFF;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	0e19      	lsrs	r1, r3, #24
 800118e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	637a      	str	r2, [r7, #52]	@ 0x34
 8001194:	b2c9      	uxtb	r1, r1
 8001196:	4a92      	ldr	r2, [pc, #584]	@ (80013e0 <datos_enviar+0x2b8>)
 8001198:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 16) & 0xFF;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1419      	asrs	r1, r3, #16
 800119e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	637a      	str	r2, [r7, #52]	@ 0x34
 80011a4:	b2c9      	uxtb	r1, r1
 80011a6:	4a8e      	ldr	r2, [pc, #568]	@ (80013e0 <datos_enviar+0x2b8>)
 80011a8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 8) & 0xFF;
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1219      	asrs	r1, r3, #8
 80011ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80011b4:	b2c9      	uxtb	r1, r1
 80011b6:	4a8a      	ldr	r2, [pc, #552]	@ (80013e0 <datos_enviar+0x2b8>)
 80011b8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = contador & 0xFF;
 80011ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	637a      	str	r2, [r7, #52]	@ 0x34
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	b2d1      	uxtb	r1, r2
 80011c4:	4a86      	ldr	r2, [pc, #536]	@ (80013e0 <datos_enviar+0x2b8>)
 80011c6:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 3;
 80011c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80011ce:	4a84      	ldr	r2, [pc, #528]	@ (80013e0 <datos_enviar+0x2b8>)
 80011d0:	2103      	movs	r1, #3
 80011d2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 24) & 0xFF;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	0e19      	lsrs	r1, r3, #24
 80011d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80011de:	b2c9      	uxtb	r1, r1
 80011e0:	4a7f      	ldr	r2, [pc, #508]	@ (80013e0 <datos_enviar+0x2b8>)
 80011e2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 16) & 0xFF;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	0c19      	lsrs	r1, r3, #16
 80011e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80011ee:	b2c9      	uxtb	r1, r1
 80011f0:	4a7b      	ldr	r2, [pc, #492]	@ (80013e0 <datos_enviar+0x2b8>)
 80011f2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 8) & 0xFF;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	0a19      	lsrs	r1, r3, #8
 80011f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80011fe:	b2c9      	uxtb	r1, r1
 8001200:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <datos_enviar+0x2b8>)
 8001202:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = tiempo & 0xFF;
 8001204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	637a      	str	r2, [r7, #52]	@ 0x34
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	b2d1      	uxtb	r1, r2
 800120e:	4a74      	ldr	r2, [pc, #464]	@ (80013e0 <datos_enviar+0x2b8>)
 8001210:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 4;
 8001212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	637a      	str	r2, [r7, #52]	@ 0x34
 8001218:	4a71      	ldr	r2, [pc, #452]	@ (80013e0 <datos_enviar+0x2b8>)
 800121a:	2104      	movs	r1, #4
 800121c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (mm_s >> 8) & 0xFF;
 800121e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001222:	121b      	asrs	r3, r3, #8
 8001224:	b219      	sxth	r1, r3
 8001226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001228:	1c5a      	adds	r2, r3, #1
 800122a:	637a      	str	r2, [r7, #52]	@ 0x34
 800122c:	b2c9      	uxtb	r1, r1
 800122e:	4a6c      	ldr	r2, [pc, #432]	@ (80013e0 <datos_enviar+0x2b8>)
 8001230:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = mm_s & 0xFF;
 8001232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	637a      	str	r2, [r7, #52]	@ 0x34
 8001238:	8bba      	ldrh	r2, [r7, #28]
 800123a:	b2d1      	uxtb	r1, r2
 800123c:	4a68      	ldr	r2, [pc, #416]	@ (80013e0 <datos_enviar+0x2b8>)
 800123e:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 5;
 8001240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	637a      	str	r2, [r7, #52]	@ 0x34
 8001246:	4a66      	ldr	r2, [pc, #408]	@ (80013e0 <datos_enviar+0x2b8>)
 8001248:	2105      	movs	r1, #5
 800124a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rad_s >> 8) & 0xFF;
 800124c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001250:	121b      	asrs	r3, r3, #8
 8001252:	b219      	sxth	r1, r3
 8001254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	637a      	str	r2, [r7, #52]	@ 0x34
 800125a:	b2c9      	uxtb	r1, r1
 800125c:	4a60      	ldr	r2, [pc, #384]	@ (80013e0 <datos_enviar+0x2b8>)
 800125e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rad_s & 0xFF;
 8001260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	637a      	str	r2, [r7, #52]	@ 0x34
 8001266:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800126a:	b2d1      	uxtb	r1, r2
 800126c:	4a5c      	ldr	r2, [pc, #368]	@ (80013e0 <datos_enviar+0x2b8>)
 800126e:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 6;
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	637a      	str	r2, [r7, #52]	@ 0x34
 8001276:	4a5a      	ldr	r2, [pc, #360]	@ (80013e0 <datos_enviar+0x2b8>)
 8001278:	2106      	movs	r1, #6
 800127a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc1 >> 8) & 0xFF;
 800127c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b299      	uxth	r1, r3
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	637a      	str	r2, [r7, #52]	@ 0x34
 800128a:	b2c9      	uxtb	r1, r1
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <datos_enviar+0x2b8>)
 800128e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc1 & 0xFF;
 8001290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	637a      	str	r2, [r7, #52]	@ 0x34
 8001296:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800129a:	b2d1      	uxtb	r1, r2
 800129c:	4a50      	ldr	r2, [pc, #320]	@ (80013e0 <datos_enviar+0x2b8>)
 800129e:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 7;
 80012a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012a6:	4a4e      	ldr	r2, [pc, #312]	@ (80013e0 <datos_enviar+0x2b8>)
 80012a8:	2107      	movs	r1, #7
 80012aa:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc2 >> 8) & 0xFF;
 80012ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	b299      	uxth	r1, r3
 80012b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	637a      	str	r2, [r7, #52]	@ 0x34
 80012ba:	b2c9      	uxtb	r1, r1
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <datos_enviar+0x2b8>)
 80012be:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc2 & 0xFF;
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80012ca:	b2d1      	uxtb	r1, r2
 80012cc:	4a44      	ldr	r2, [pc, #272]	@ (80013e0 <datos_enviar+0x2b8>)
 80012ce:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 8;
 80012d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012d6:	4a42      	ldr	r2, [pc, #264]	@ (80013e0 <datos_enviar+0x2b8>)
 80012d8:	2108      	movs	r1, #8
 80012da:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc3 >> 8) & 0xFF;
 80012dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	b299      	uxth	r1, r3
 80012e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80012ea:	b2c9      	uxtb	r1, r1
 80012ec:	4a3c      	ldr	r2, [pc, #240]	@ (80013e0 <datos_enviar+0x2b8>)
 80012ee:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc3 & 0xFF;
 80012f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012f6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80012fa:	b2d1      	uxtb	r1, r2
 80012fc:	4a38      	ldr	r2, [pc, #224]	@ (80013e0 <datos_enviar+0x2b8>)
 80012fe:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 9;
 8001300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	637a      	str	r2, [r7, #52]	@ 0x34
 8001306:	4a36      	ldr	r2, [pc, #216]	@ (80013e0 <datos_enviar+0x2b8>)
 8001308:	2109      	movs	r1, #9
 800130a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc4 >> 8) & 0xFF;
 800130c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b299      	uxth	r1, r3
 8001314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	637a      	str	r2, [r7, #52]	@ 0x34
 800131a:	b2c9      	uxtb	r1, r1
 800131c:	4a30      	ldr	r2, [pc, #192]	@ (80013e0 <datos_enviar+0x2b8>)
 800131e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc4 & 0xFF;
 8001320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	637a      	str	r2, [r7, #52]	@ 0x34
 8001326:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800132a:	b2d1      	uxtb	r1, r2
 800132c:	4a2c      	ldr	r2, [pc, #176]	@ (80013e0 <datos_enviar+0x2b8>)
 800132e:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 10;
 8001330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	637a      	str	r2, [r7, #52]	@ 0x34
 8001336:	4a2a      	ldr	r2, [pc, #168]	@ (80013e0 <datos_enviar+0x2b8>)
 8001338:	210a      	movs	r1, #10
 800133a:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt1_bytes = (uint8_t*)&volt1;
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	633b      	str	r3, [r7, #48]	@ 0x30
    buffer[idxx++] = volt1_bytes[0];
 8001342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	637a      	str	r2, [r7, #52]	@ 0x34
 8001348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800134a:	7811      	ldrb	r1, [r2, #0]
 800134c:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <datos_enviar+0x2b8>)
 800134e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[1];
 8001350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	637a      	str	r2, [r7, #52]	@ 0x34
 8001356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001358:	7851      	ldrb	r1, [r2, #1]
 800135a:	4a21      	ldr	r2, [pc, #132]	@ (80013e0 <datos_enviar+0x2b8>)
 800135c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[2];
 800135e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	637a      	str	r2, [r7, #52]	@ 0x34
 8001364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001366:	7891      	ldrb	r1, [r2, #2]
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <datos_enviar+0x2b8>)
 800136a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[3];
 800136c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	637a      	str	r2, [r7, #52]	@ 0x34
 8001372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001374:	78d1      	ldrb	r1, [r2, #3]
 8001376:	4a1a      	ldr	r2, [pc, #104]	@ (80013e0 <datos_enviar+0x2b8>)
 8001378:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 11;
 800137a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001380:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <datos_enviar+0x2b8>)
 8001382:	210b      	movs	r1, #11
 8001384:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt2_bytes = (uint8_t*)&volt2;
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    buffer[idxx++] = volt2_bytes[0];
 800138c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	637a      	str	r2, [r7, #52]	@ 0x34
 8001392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001394:	7811      	ldrb	r1, [r2, #0]
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <datos_enviar+0x2b8>)
 8001398:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[1];
 800139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	637a      	str	r2, [r7, #52]	@ 0x34
 80013a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013a2:	7851      	ldrb	r1, [r2, #1]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	@ (80013e0 <datos_enviar+0x2b8>)
 80013a6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[2];
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80013ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013b0:	7891      	ldrb	r1, [r2, #2]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <datos_enviar+0x2b8>)
 80013b4:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[3];
 80013b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	637a      	str	r2, [r7, #52]	@ 0x34
 80013bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013be:	78d1      	ldrb	r1, [r2, #3]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <datos_enviar+0x2b8>)
 80013c2:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 12;
 80013c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <datos_enviar+0x2b8>)
 80013cc:	210c      	movs	r1, #12
 80013ce:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt3_bytes = (uint8_t*)&volt3;
 80013d0:	f107 0308 	add.w	r3, r7, #8
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    buffer[idxx++] = volt3_bytes[0];
 80013d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	637a      	str	r2, [r7, #52]	@ 0x34
 80013dc:	e002      	b.n	80013e4 <datos_enviar+0x2bc>
 80013de:	bf00      	nop
 80013e0:	20000538 	.word	0x20000538
 80013e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013e6:	7811      	ldrb	r1, [r2, #0]
 80013e8:	4a52      	ldr	r2, [pc, #328]	@ (8001534 <datos_enviar+0x40c>)
 80013ea:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[1];
 80013ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80013f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013f4:	7851      	ldrb	r1, [r2, #1]
 80013f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001534 <datos_enviar+0x40c>)
 80013f8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[2];
 80013fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	637a      	str	r2, [r7, #52]	@ 0x34
 8001400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001402:	7891      	ldrb	r1, [r2, #2]
 8001404:	4a4b      	ldr	r2, [pc, #300]	@ (8001534 <datos_enviar+0x40c>)
 8001406:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[3];
 8001408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	637a      	str	r2, [r7, #52]	@ 0x34
 800140e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001410:	78d1      	ldrb	r1, [r2, #3]
 8001412:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <datos_enviar+0x40c>)
 8001414:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 13;
 8001416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	637a      	str	r2, [r7, #52]	@ 0x34
 800141c:	4a45      	ldr	r2, [pc, #276]	@ (8001534 <datos_enviar+0x40c>)
 800141e:	210d      	movs	r1, #13
 8001420:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt4_bytes = (uint8_t*)&volt4;
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer[idxx++] = volt4_bytes[0];
 8001426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	637a      	str	r2, [r7, #52]	@ 0x34
 800142c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142e:	7811      	ldrb	r1, [r2, #0]
 8001430:	4a40      	ldr	r2, [pc, #256]	@ (8001534 <datos_enviar+0x40c>)
 8001432:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[1];
 8001434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	637a      	str	r2, [r7, #52]	@ 0x34
 800143a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800143c:	7851      	ldrb	r1, [r2, #1]
 800143e:	4a3d      	ldr	r2, [pc, #244]	@ (8001534 <datos_enviar+0x40c>)
 8001440:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[2];
 8001442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	637a      	str	r2, [r7, #52]	@ 0x34
 8001448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144a:	7891      	ldrb	r1, [r2, #2]
 800144c:	4a39      	ldr	r2, [pc, #228]	@ (8001534 <datos_enviar+0x40c>)
 800144e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[3];
 8001450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	637a      	str	r2, [r7, #52]	@ 0x34
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	78d1      	ldrb	r1, [r2, #3]
 800145a:	4a36      	ldr	r2, [pc, #216]	@ (8001534 <datos_enviar+0x40c>)
 800145c:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 14;
 800145e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	637a      	str	r2, [r7, #52]	@ 0x34
 8001464:	4a33      	ldr	r2, [pc, #204]	@ (8001534 <datos_enviar+0x40c>)
 8001466:	210e      	movs	r1, #14
 8001468:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist1 >> 8) & 0xFF;
 800146a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	b299      	uxth	r1, r3
 8001472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	637a      	str	r2, [r7, #52]	@ 0x34
 8001478:	b2c9      	uxtb	r1, r1
 800147a:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <datos_enviar+0x40c>)
 800147c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist1 & 0xFF;
 800147e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	637a      	str	r2, [r7, #52]	@ 0x34
 8001484:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8001488:	b2d1      	uxtb	r1, r2
 800148a:	4a2a      	ldr	r2, [pc, #168]	@ (8001534 <datos_enviar+0x40c>)
 800148c:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 15;
 800148e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	637a      	str	r2, [r7, #52]	@ 0x34
 8001494:	4a27      	ldr	r2, [pc, #156]	@ (8001534 <datos_enviar+0x40c>)
 8001496:	210f      	movs	r1, #15
 8001498:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist2 >> 8) & 0xFF;
 800149a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	b299      	uxth	r1, r3
 80014a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a4:	1c5a      	adds	r2, r3, #1
 80014a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80014a8:	b2c9      	uxtb	r1, r1
 80014aa:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <datos_enviar+0x40c>)
 80014ac:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist2 & 0xFF;
 80014ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b0:	1c5a      	adds	r2, r3, #1
 80014b2:	637a      	str	r2, [r7, #52]	@ 0x34
 80014b4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80014b8:	b2d1      	uxtb	r1, r2
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <datos_enviar+0x40c>)
 80014bc:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 16;
 80014be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <datos_enviar+0x40c>)
 80014c6:	2110      	movs	r1, #16
 80014c8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist3 >> 8) & 0xFF;
 80014ca:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80014ce:	0a1b      	lsrs	r3, r3, #8
 80014d0:	b299      	uxth	r1, r3
 80014d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80014d8:	b2c9      	uxtb	r1, r1
 80014da:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <datos_enviar+0x40c>)
 80014dc:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist3 & 0xFF;
 80014de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80014e4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80014e8:	b2d1      	uxtb	r1, r2
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <datos_enviar+0x40c>)
 80014ec:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 17;
 80014ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80014f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001534 <datos_enviar+0x40c>)
 80014f6:	2111      	movs	r1, #17
 80014f8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist4 >> 8) & 0xFF;
 80014fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b299      	uxth	r1, r3
 8001502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	637a      	str	r2, [r7, #52]	@ 0x34
 8001508:	b2c9      	uxtb	r1, r1
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <datos_enviar+0x40c>)
 800150c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist4 & 0xFF;
 800150e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001510:	1c5a      	adds	r2, r3, #1
 8001512:	637a      	str	r2, [r7, #52]	@ 0x34
 8001514:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8001518:	b2d1      	uxtb	r1, r2
 800151a:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <datos_enviar+0x40c>)
 800151c:	54d1      	strb	r1, [r2, r3]

    EnviarPaquete(buffer, idxx);
 800151e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	4803      	ldr	r0, [pc, #12]	@ (8001534 <datos_enviar+0x40c>)
 8001526:	f000 f807 	bl	8001538 <EnviarPaquete>
}
 800152a:	bf00      	nop
 800152c:	3738      	adds	r7, #56	@ 0x38
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000538 	.word	0x20000538

08001538 <EnviarPaquete>:

void EnviarPaquete(uint8_t *dat, uint8_t tam) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]
    pk1.inicio = 0x09;
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <EnviarPaquete+0x50>)
 8001546:	2209      	movs	r2, #9
 8001548:	701a      	strb	r2, [r3, #0]
    pk1.tamano = tam + 4;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	3304      	adds	r3, #4
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <EnviarPaquete+0x50>)
 8001552:	705a      	strb	r2, [r3, #1]
    pk1.datos = dat;
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <EnviarPaquete+0x50>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6053      	str	r3, [r2, #4]
    pk1.crc = 0x00;
 800155a:	4b0b      	ldr	r3, [pc, #44]	@ (8001588 <EnviarPaquete+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	721a      	strb	r2, [r3, #8]
    pk1.fin = 0x07;
 8001560:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <EnviarPaquete+0x50>)
 8001562:	2207      	movs	r2, #7
 8001564:	725a      	strb	r2, [r3, #9]

    int numDatos = serializarPaquete(&pk1, datosTX);
 8001566:	4909      	ldr	r1, [pc, #36]	@ (800158c <EnviarPaquete+0x54>)
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <EnviarPaquete+0x50>)
 800156a:	f000 f811 	bl	8001590 <serializarPaquete>
 800156e:	4603      	mov	r3, r0
 8001570:	60fb      	str	r3, [r7, #12]
    CDC_Transmit_FS(datosTX, numDatos);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4619      	mov	r1, r3
 8001578:	4804      	ldr	r0, [pc, #16]	@ (800158c <EnviarPaquete+0x54>)
 800157a:	f00a fb3b 	bl	800bbf4 <CDC_Transmit_FS>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200005bc 	.word	0x200005bc
 800158c:	20000578 	.word	0x20000578

08001590 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer) {
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
    int idx = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]

    if (!paquete || !buffer) return -1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <serializarPaquete+0x1a>
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <serializarPaquete+0x20>
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e045      	b.n	800163c <serializarPaquete+0xac>

    buffer[idx++] = paquete->inicio;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60fa      	str	r2, [r7, #12]
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	701a      	strb	r2, [r3, #0]
    buffer[idx++] = paquete->tamano;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	60fa      	str	r2, [r7, #12]
 80015c8:	461a      	mov	r2, r3
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	7852      	ldrb	r2, [r2, #1]
 80015d2:	701a      	strb	r2, [r3, #0]
    if (paquete->datos && paquete->tamano > 3) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d015      	beq.n	8001608 <serializarPaquete+0x78>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d911      	bls.n	8001608 <serializarPaquete+0x78>
        memcpy(&buffer[idx], paquete->datos, paquete->tamano - 3);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	18d0      	adds	r0, r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6859      	ldr	r1, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	3b03      	subs	r3, #3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f00b fd4c 	bl	800d092 <memcpy>
        idx = idx + paquete->tamano - 3;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	3b03      	subs	r3, #3
 8001606:	60fb      	str	r3, [r7, #12]
    }
    uint8_t ss = idx;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	72fb      	strb	r3, [r7, #11]
    buffer[idx++] = calcularCRC(buffer, ss);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60fa      	str	r2, [r7, #12]
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	189c      	adds	r4, r3, r2
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	4619      	mov	r1, r3
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f000 f811 	bl	8001644 <calcularCRC>
 8001622:	4603      	mov	r3, r0
 8001624:	7023      	strb	r3, [r4, #0]
    buffer[idx++] = paquete->fin;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	60fa      	str	r2, [r7, #12]
 800162c:	461a      	mov	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	7a52      	ldrb	r2, [r2, #9]
 8001636:	701a      	strb	r2, [r3, #0]
    return idx;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	b25b      	sxtb	r3, r3
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <calcularCRC>:

uint8_t calcularCRC(uint8_t *datos, uint8_t tam) {
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < tam; i++) {
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	e009      	b.n	800166e <calcularCRC+0x2a>
        crc ^= datos[i];
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	4053      	eors	r3, r2
 8001666:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < tam; i++) {
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	3301      	adds	r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	78fb      	ldrb	r3, [r7, #3]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	429a      	cmp	r2, r3
 8001674:	dbf1      	blt.n	800165a <calcularCRC+0x16>
    }
    return crc;
 8001676:	7bfb      	ldrb	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <instruction>:


uint16_t* instruction(volatile uint8_t datosRX[15]) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

	static uint16_t objetivo_r[6] = {0};

    	if (datosRX[0] == 0x07) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b07      	cmp	r3, #7
 8001694:	d135      	bne.n	8001702 <instruction+0x7e>
			memcpy(&voltaje_float, &datosRX[1], sizeof(float));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b81      	ldr	r3, [pc, #516]	@ (80018a4 <instruction+0x220>)
 80016a0:	601a      	str	r2, [r3, #0]
			if (voltaje_float < 0) voltaje_float = 0;
 80016a2:	4b80      	ldr	r3, [pc, #512]	@ (80018a4 <instruction+0x220>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d504      	bpl.n	80016bc <instruction+0x38>
 80016b2:	4b7c      	ldr	r3, [pc, #496]	@ (80018a4 <instruction+0x220>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e00c      	b.n	80016d6 <instruction+0x52>
			else if (voltaje_float > 7.5) voltaje_float = 7.5;
 80016bc:	4b79      	ldr	r3, [pc, #484]	@ (80018a4 <instruction+0x220>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80016c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	dd02      	ble.n	80016d6 <instruction+0x52>
 80016d0:	4b74      	ldr	r3, [pc, #464]	@ (80018a4 <instruction+0x220>)
 80016d2:	4a75      	ldr	r2, [pc, #468]	@ (80018a8 <instruction+0x224>)
 80016d4:	601a      	str	r2, [r3, #0]
			velocidad_motor = conversor(voltaje_float);
 80016d6:	4b73      	ldr	r3, [pc, #460]	@ (80018a4 <instruction+0x220>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	eeb0 0a67 	vmov.f32	s0, s15
 80016e0:	f002 f89c 	bl	800381c <conversor>
 80016e4:	4603      	mov	r3, r0
 80016e6:	b25a      	sxtb	r2, r3
 80016e8:	4b70      	ldr	r3, [pc, #448]	@ (80018ac <instruction+0x228>)
 80016ea:	701a      	strb	r2, [r3, #0]
			motores(velocidad_motor, velocidad_motor);
 80016ec:	4b6f      	ldr	r3, [pc, #444]	@ (80018ac <instruction+0x228>)
 80016ee:	f993 3000 	ldrsb.w	r3, [r3]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	@ (80018ac <instruction+0x228>)
 80016f4:	f992 2000 	ldrsb.w	r2, [r2]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fb50 	bl	8002da0 <motores>
 8001700:	e0ca      	b.n	8001898 <instruction+0x214>
		} else if (datosRX[0] == 0x08) {
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b08      	cmp	r3, #8
 800170a:	d123      	bne.n	8001754 <instruction+0xd0>
			vel_mm_s = (datosRX[1] << 8) | (datosRX[2]);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3302      	adds	r3, #2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	b21b      	sxth	r3, r3
 8001722:	4313      	orrs	r3, r2
 8001724:	b21a      	sxth	r2, r3
 8001726:	4b62      	ldr	r3, [pc, #392]	@ (80018b0 <instruction+0x22c>)
 8001728:	801a      	strh	r2, [r3, #0]
			velocidad_motor = conversor_mm_s(vel_mm_s);
 800172a:	4b61      	ldr	r3, [pc, #388]	@ (80018b0 <instruction+0x22c>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	4618      	mov	r0, r3
 8001732:	f002 f8b5 	bl	80038a0 <conversor_mm_s>
 8001736:	4603      	mov	r3, r0
 8001738:	b25a      	sxtb	r2, r3
 800173a:	4b5c      	ldr	r3, [pc, #368]	@ (80018ac <instruction+0x228>)
 800173c:	701a      	strb	r2, [r3, #0]
			motores(velocidad_motor, velocidad_motor);
 800173e:	4b5b      	ldr	r3, [pc, #364]	@ (80018ac <instruction+0x228>)
 8001740:	f993 3000 	ldrsb.w	r3, [r3]
 8001744:	4a59      	ldr	r2, [pc, #356]	@ (80018ac <instruction+0x228>)
 8001746:	f992 2000 	ldrsb.w	r2, [r2]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fb27 	bl	8002da0 <motores>
 8001752:	e0a1      	b.n	8001898 <instruction+0x214>
		} else if (datosRX[0] == 0x09) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b09      	cmp	r3, #9
 800175c:	d119      	bne.n	8001792 <instruction+0x10e>
            valor = datosRX[1];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3301      	adds	r3, #1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <instruction+0x230>)
 800176a:	601a      	str	r2, [r3, #0]
            velocidad_motor = valor * (-1);
 800176c:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <instruction+0x230>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	425b      	negs	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	b25a      	sxtb	r2, r3
 8001778:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <instruction+0x228>)
 800177a:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <instruction+0x228>)
 800177e:	f993 3000 	ldrsb.w	r3, [r3]
 8001782:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <instruction+0x228>)
 8001784:	f992 2000 	ldrsb.w	r2, [r2]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fb08 	bl	8002da0 <motores>
 8001790:	e082      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0A) {
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b0a      	cmp	r3, #10
 800179a:	d10d      	bne.n	80017b8 <instruction+0x134>
            velocidad_motor = 100;
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <instruction+0x228>)
 800179e:	2264      	movs	r2, #100	@ 0x64
 80017a0:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80017a2:	4b42      	ldr	r3, [pc, #264]	@ (80018ac <instruction+0x228>)
 80017a4:	f993 3000 	ldrsb.w	r3, [r3]
 80017a8:	4a40      	ldr	r2, [pc, #256]	@ (80018ac <instruction+0x228>)
 80017aa:	f992 2000 	ldrsb.w	r2, [r2]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f001 faf5 	bl	8002da0 <motores>
 80017b6:	e06f      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0B) {
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b0b      	cmp	r3, #11
 80017c0:	d10d      	bne.n	80017de <instruction+0x15a>
            velocidad_motor = -100;
 80017c2:	4b3a      	ldr	r3, [pc, #232]	@ (80018ac <instruction+0x228>)
 80017c4:	229c      	movs	r2, #156	@ 0x9c
 80017c6:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80017c8:	4b38      	ldr	r3, [pc, #224]	@ (80018ac <instruction+0x228>)
 80017ca:	f993 3000 	ldrsb.w	r3, [r3]
 80017ce:	4a37      	ldr	r2, [pc, #220]	@ (80018ac <instruction+0x228>)
 80017d0:	f992 2000 	ldrsb.w	r2, [r2]
 80017d4:	4611      	mov	r1, r2
 80017d6:	4618      	mov	r0, r3
 80017d8:	f001 fae2 	bl	8002da0 <motores>
 80017dc:	e05c      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0C) {
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d10d      	bne.n	8001804 <instruction+0x180>
            velocidad_motor = 0;
 80017e8:	4b30      	ldr	r3, [pc, #192]	@ (80018ac <instruction+0x228>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80017ee:	4b2f      	ldr	r3, [pc, #188]	@ (80018ac <instruction+0x228>)
 80017f0:	f993 3000 	ldrsb.w	r3, [r3]
 80017f4:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <instruction+0x228>)
 80017f6:	f992 2000 	ldrsb.w	r2, [r2]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 facf 	bl	8002da0 <motores>
 8001802:	e049      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0D) {
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b0d      	cmp	r3, #13
 800180c:	d113      	bne.n	8001836 <instruction+0x1b2>
        	objetivo_r[0] = (datosRX[2] << 8) | datosRX[1];
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3302      	adds	r3, #2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3301      	adds	r3, #1
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21b      	sxth	r3, r3
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <instruction+0x234>)
 800182c:	801a      	strh	r2, [r3, #0]
            objetivo_r[1] = 1;
 800182e:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <instruction+0x234>)
 8001830:	2201      	movs	r2, #1
 8001832:	805a      	strh	r2, [r3, #2]
 8001834:	e030      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0E) {
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b0e      	cmp	r3, #14
 800183e:	d113      	bne.n	8001868 <instruction+0x1e4>
        	objetivo_r[2] = (datosRX[2] << 8) | datosRX[1];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b21a      	sxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21b      	sxth	r3, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <instruction+0x234>)
 800185e:	809a      	strh	r2, [r3, #4]
            objetivo_r[3] = 1;
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <instruction+0x234>)
 8001862:	2201      	movs	r2, #1
 8001864:	80da      	strh	r2, [r3, #6]
 8001866:	e017      	b.n	8001898 <instruction+0x214>
        } else if (datosRX[0] == 0x0F) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b0f      	cmp	r3, #15
 8001870:	d112      	bne.n	8001898 <instruction+0x214>
        	objetivo_r[4] = (datosRX[2] << 8) | datosRX[1];
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3302      	adds	r3, #2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3301      	adds	r3, #1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <instruction+0x234>)
 8001890:	811a      	strh	r2, [r3, #8]
            objetivo_r[5] = 1;
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <instruction+0x234>)
 8001894:	2201      	movs	r2, #1
 8001896:	815a      	strh	r2, [r3, #10]
        }

    return objetivo_r;
 8001898:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <instruction+0x234>)
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200005d0 	.word	0x200005d0
 80018a8:	40f00000 	.word	0x40f00000
 80018ac:	200005c8 	.word	0x200005c8
 80018b0:	200005d4 	.word	0x200005d4
 80018b4:	200005cc 	.word	0x200005cc
 80018b8:	200005d8 	.word	0x200005d8

080018bc <promedio_adc>:





float* promedio_adc(uint32_t adcValue[5]) {
 80018bc:	b490      	push	{r4, r7}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 5; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e015      	b.n	80018f6 <promedio_adc+0x3a>
        adc_buffer[i][adc_buffer_index] = adcValue[i];
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <promedio_adc+0xdc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461c      	mov	r4, r3
 80018da:	b290      	uxth	r0, r2
 80018dc:	492f      	ldr	r1, [pc, #188]	@ (800199c <promedio_adc+0xe0>)
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4423      	add	r3, r4
 80018ea:	4602      	mov	r2, r0
 80018ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 5; i++) {
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	dde6      	ble.n	80018ca <promedio_adc+0xe>
    }

    adc_buffer_index++;
 80018fc:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <promedio_adc+0xdc>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <promedio_adc+0xdc>)
 8001906:	701a      	strb	r2, [r3, #0]
    muestras++;
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <promedio_adc+0xe4>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <promedio_adc+0xe4>)
 8001912:	701a      	strb	r2, [r3, #0]

    if (muestras >= ADC_BUFFER_SIZE) {
 8001914:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <promedio_adc+0xe4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d936      	bls.n	800198a <promedio_adc+0xce>
        for (int i = 0; i < 5; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e02a      	b.n	8001978 <promedio_adc+0xbc>
            uint32_t sum = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
            for (int j = 0; j < ADC_BUFFER_SIZE; j++) {
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	e010      	b.n	800194e <promedio_adc+0x92>
                sum += adc_buffer[i][j];
 800192c:	491b      	ldr	r1, [pc, #108]	@ (800199c <promedio_adc+0xe0>)
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001940:	461a      	mov	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
            for (int j = 0; j < ADC_BUFFER_SIZE; j++) {
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	2b09      	cmp	r3, #9
 8001952:	ddeb      	ble.n	800192c <promedio_adc+0x70>
            }
            adc_avg[i] = (float)sum / ADC_BUFFER_SIZE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	ee07 3a90 	vmov	s15, r3
 800195a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <promedio_adc+0xe8>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 5; i++) {
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	3301      	adds	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b04      	cmp	r3, #4
 800197c:	ddd1      	ble.n	8001922 <promedio_adc+0x66>
        }

        adc_buffer_index = 0;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <promedio_adc+0xdc>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
        muestras = 0;
 8001984:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <promedio_adc+0xe4>)
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    }

	return adc_avg;
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <promedio_adc+0xe8>)
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bc90      	pop	{r4, r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	2000067c 	.word	0x2000067c
 800199c:	20000618 	.word	0x20000618
 80019a0:	2000067d 	.word	0x2000067d
 80019a4:	20000604 	.word	0x20000604

080019a8 <promedio_adc_v>:

float* promedio_adc_v(uint32_t adcV[5]) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 5; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e024      	b.n	8001a00 <promedio_adc_v+0x58>
		adcVoltaje[i] = (adcV[i] * 3.3) / 4095.0;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fda7 	bl	8000514 <__aeabi_ui2d>
 80019c6:	a313      	add	r3, pc, #76	@ (adr r3, 8001a14 <promedio_adc_v+0x6c>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe1c 	bl	8000608 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	a310      	add	r3, pc, #64	@ (adr r3, 8001a1c <promedio_adc_v+0x74>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe ff3d 	bl	800085c <__aeabi_ddiv>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	f7ff f8e5 	bl	8000bb8 <__aeabi_d2f>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4907      	ldr	r1, [pc, #28]	@ (8001a10 <promedio_adc_v+0x68>)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	ddd7      	ble.n	80019b6 <promedio_adc_v+0xe>
	}

	return adcVoltaje;
 8001a06:	4b02      	ldr	r3, [pc, #8]	@ (8001a10 <promedio_adc_v+0x68>)
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200005f0 	.word	0x200005f0
 8001a14:	66666666 	.word	0x66666666
 8001a18:	400a6666 	.word	0x400a6666
 8001a1c:	00000000 	.word	0x00000000
 8001a20:	40affe00 	.word	0x40affe00

08001a24 <calculo_mm>:

uint16_t* calculo_mm(float adc_pr[5]) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

    adcMM[0] = (uint16_t)interpolar_distancia((uint16_t)adc_pr[0], adc_sensor1, distancias_mm, num_puntos);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a36:	ee17 3a90 	vmov	r3, s15
 8001a3a:	b298      	uxth	r0, r3
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001afc <calculo_mm+0xd8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a2f      	ldr	r2, [pc, #188]	@ (8001b00 <calculo_mm+0xdc>)
 8001a42:	4930      	ldr	r1, [pc, #192]	@ (8001b04 <calculo_mm+0xe0>)
 8001a44:	f000 f868 	bl	8001b18 <interpolar_distancia>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a50:	ee17 3a90 	vmov	r3, s15
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <calculo_mm+0xe4>)
 8001a58:	801a      	strh	r2, [r3, #0]
    adcMM[1] = (uint16_t)interpolar_distancia((uint16_t)adc_pr[1], adc_sensor2, distancias_mm, num_puntos);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a66:	ee17 3a90 	vmov	r3, s15
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	4b23      	ldr	r3, [pc, #140]	@ (8001afc <calculo_mm+0xd8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a23      	ldr	r2, [pc, #140]	@ (8001b00 <calculo_mm+0xdc>)
 8001a72:	4926      	ldr	r1, [pc, #152]	@ (8001b0c <calculo_mm+0xe8>)
 8001a74:	f000 f850 	bl	8001b18 <interpolar_distancia>
 8001a78:	eef0 7a40 	vmov.f32	s15, s0
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 3a90 	vmov	r3, s15
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <calculo_mm+0xe4>)
 8001a88:	805a      	strh	r2, [r3, #2]
    adcMM[2] = (uint16_t)interpolar_distancia((uint16_t)adc_pr[2], adc_sensor3, distancias_mm, num_puntos);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a96:	ee17 3a90 	vmov	r3, s15
 8001a9a:	b298      	uxth	r0, r3
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <calculo_mm+0xd8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <calculo_mm+0xdc>)
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <calculo_mm+0xec>)
 8001aa4:	f000 f838 	bl	8001b18 <interpolar_distancia>
 8001aa8:	eef0 7a40 	vmov.f32	s15, s0
 8001aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <calculo_mm+0xe4>)
 8001ab8:	809a      	strh	r2, [r3, #4]
    adcMM[3] = (uint16_t)interpolar_distancia((uint16_t)adc_pr[3], adc_sensor4, distancias_mm, num_puntos);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	330c      	adds	r3, #12
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac6:	ee17 3a90 	vmov	r3, s15
 8001aca:	b298      	uxth	r0, r3
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <calculo_mm+0xd8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b00 <calculo_mm+0xdc>)
 8001ad2:	4910      	ldr	r1, [pc, #64]	@ (8001b14 <calculo_mm+0xf0>)
 8001ad4:	f000 f820 	bl	8001b18 <interpolar_distancia>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ae0:	ee17 3a90 	vmov	r3, s15
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <calculo_mm+0xe4>)
 8001ae8:	80da      	strh	r2, [r3, #6]
    adcMM[4] = 0;
 8001aea:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <calculo_mm+0xe4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	811a      	strh	r2, [r3, #8]

    return adcMM;
 8001af0:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <calculo_mm+0xe4>)
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000028 	.word	0x20000028
 8001b00:	2000002c 	.word	0x2000002c
 8001b04:	200000d0 	.word	0x200000d0
 8001b08:	200005e4 	.word	0x200005e4
 8001b0c:	20000124 	.word	0x20000124
 8001b10:	20000178 	.word	0x20000178
 8001b14:	200001cc 	.word	0x200001cc

08001b18 <interpolar_distancia>:

float interpolar_distancia(uint16_t adc_recibido, uint16_t *adc_tabla, float *distancias, int num_puntos) {
 8001b18:	b480      	push	{r7}
 8001b1a:	b08d      	sub	sp, #52	@ 0x34
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	4603      	mov	r3, r0
 8001b26:	81fb      	strh	r3, [r7, #14]
    if (adc_recibido >= adc_tabla[0]) {
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	89fa      	ldrh	r2, [r7, #14]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d303      	bcc.n	8001b3a <interpolar_distancia+0x22>
        return distancias[0];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	e087      	b.n	8001c4a <interpolar_distancia+0x132>
    }
    if (adc_recibido <= adc_tabla[num_puntos - 1]) {
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001b40:	3b01      	subs	r3, #1
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	89fa      	ldrh	r2, [r7, #14]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d809      	bhi.n	8001b64 <interpolar_distancia+0x4c>
        return distancias[num_puntos - 1];
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b56:	3b01      	subs	r3, #1
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	e072      	b.n	8001c4a <interpolar_distancia+0x132>
    }

    for (int i = 0; i < num_puntos - 1; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	e061      	b.n	8001c2e <interpolar_distancia+0x116>
        if (adc_recibido <= adc_tabla[i] && adc_recibido >= adc_tabla[i + 1]) {
 8001b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	4413      	add	r3, r2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	89fa      	ldrh	r2, [r7, #14]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d856      	bhi.n	8001c28 <interpolar_distancia+0x110>
 8001b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	4413      	add	r3, r2
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	89fa      	ldrh	r2, [r7, #14]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d34d      	bcc.n	8001c28 <interpolar_distancia+0x110>
            float x0 = adc_tabla[i];
 8001b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	4413      	add	r3, r2
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float x1 = adc_tabla[i + 1];
 8001ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	4413      	add	r3, r2
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            float y0 = distancias[i];
 8001bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	623b      	str	r3, [r7, #32]
            float y1 = distancias[i + 1];
 8001bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc8:	3301      	adds	r3, #1
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	61fb      	str	r3, [r7, #28]

            float m = (y1 - y0) / (x1 - x0);
 8001bd4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bdc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001be0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001be4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf0:	edc7 7a06 	vstr	s15, [r7, #24]
            float b = y0 - m * x0;
 8001bf4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bf8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c00:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c08:	edc7 7a05 	vstr	s15, [r7, #20]
            return m * adc_recibido + b;
 8001c0c:	89fb      	ldrh	r3, [r7, #14]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c26:	e010      	b.n	8001c4a <interpolar_distancia+0x132>
    for (int i = 0; i < num_puntos - 1; i++) {
 8001c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c34:	429a      	cmp	r2, r3
 8001c36:	db98      	blt.n	8001b6a <interpolar_distancia+0x52>
        }
    }

    return distancias[num_puntos - 1];
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	edd3 7a00 	vldr	s15, [r3]
}
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	3734      	adds	r7, #52	@ 0x34
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <updatePose>:



void updatePose(Pose *pose, int32_t  pulsosL, int32_t  pulsosR, float delta_time_s){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	ed87 0a00 	vstr	s0, [r7]

    pose->left_distance_mm = (2.0 * PI * RADIO_RUEDA_MM * (float)pulsosL) / PULSOS_POR_REVOLUCION;
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ee17 0a90 	vmov	r0, s15
 8001c76:	f7fe fc6f 	bl	8000558 <__aeabi_f2d>
 8001c7a:	a37c      	add	r3, pc, #496	@ (adr r3, 8001e6c <updatePose+0x214>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f7fe fcc2 	bl	8000608 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	a379      	add	r3, pc, #484	@ (adr r3, 8001e74 <updatePose+0x21c>)
 8001c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c92:	f7fe fde3 	bl	800085c <__aeabi_ddiv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff8b 	bl	8000bb8 <__aeabi_d2f>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	621a      	str	r2, [r3, #32]
    pose->right_distance_mm = (2.0 * PI * RADIO_RUEDA_MM * (float)pulsosR) / PULSOS_POR_REVOLUCION;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	ee17 0a90 	vmov	r0, s15
 8001cb6:	f7fe fc4f 	bl	8000558 <__aeabi_f2d>
 8001cba:	a36c      	add	r3, pc, #432	@ (adr r3, 8001e6c <updatePose+0x214>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fca2 	bl	8000608 <__aeabi_dmul>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	a369      	add	r3, pc, #420	@ (adr r3, 8001e74 <updatePose+0x21c>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fdc3 	bl	800085c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff6b 	bl	8000bb8 <__aeabi_d2f>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	625a      	str	r2, [r3, #36]	@ 0x24
    pose->left_distance_mm_acum += pose->left_distance_mm;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    pose->right_distance_mm_acum += pose->right_distance_mm;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Distancia promedio recorrida
    float delta_lineal = (pose->left_distance_mm + pose->right_distance_mm) / 2.0;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d2c:	edc7 7a05 	vstr	s15, [r7, #20]
    pose->avanceLineal += delta_lineal;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	edc3 7a07 	vstr	s15, [r3, #28]
    pose->velLineal = delta_lineal / delta_time_s;  // Velocidad en mm/s
 8001d44:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d48:	ed97 7a00 	vldr	s14, [r7]
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	edc3 7a05 	vstr	s15, [r3, #20]
    pose->velMotorL = pose->left_distance_mm / delta_time_s;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	edd3 6a08 	vldr	s13, [r3, #32]
 8001d5c:	ed97 7a00 	vldr	s14, [r7]
 8001d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edc3 7a03 	vstr	s15, [r3, #12]
    pose->velMotorR = pose->right_distance_mm / delta_time_s;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001d70:	ed97 7a00 	vldr	s14, [r7]
 8001d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edc3 7a04 	vstr	s15, [r3, #16]

    float delta_angular = (pose->right_distance_mm - pose->left_distance_mm) / DISTANCIA_ENTRE_RUEDAS_MM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a08 	vldr	s15, [r3, #32]
 8001d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8e:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001e68 <updatePose+0x210>
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	edc7 7a04 	vstr	s15, [r7, #16]
    pose->velAngular = delta_angular / delta_time_s;  // Velocidad angular en rad/s
 8001d9a:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	edc3 7a06 	vstr	s15, [r3, #24]

    pose->theta += delta_angular;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	ed93 7a02 	vldr	s14, [r3, #8]
 8001db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edc3 7a02 	vstr	s15, [r3, #8]
    if(pose->theta > M_PI) pose->theta -= 2.0 * M_PI;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fbc7 	bl	8000558 <__aeabi_f2d>
 8001dca:	a321      	add	r3, pc, #132	@ (adr r3, 8001e50 <updatePose+0x1f8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe feaa 	bl	8000b28 <__aeabi_dcmpgt>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <updatePose+0x1aa>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbba 	bl	8000558 <__aeabi_f2d>
 8001de4:	a31c      	add	r3, pc, #112	@ (adr r3, 8001e58 <updatePose+0x200>)
 8001de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dea:	f7fe fa55 	bl	8000298 <__aeabi_dsub>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fedf 	bl	8000bb8 <__aeabi_d2f>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	609a      	str	r2, [r3, #8]
    //pose.theta = fmod(pose.theta, 2.0 * M_PI);  // Normalizar ángulo

    //pose.x += delta_lineal * cos(pose.theta);
    //pose.y += delta_lineal * sin(pose.theta);

}
 8001e00:	e020      	b.n	8001e44 <updatePose+0x1ec>
    else if(pose->theta < -M_PI) pose->theta += 2.0 * M_PI;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fba6 	bl	8000558 <__aeabi_f2d>
 8001e0c:	a314      	add	r3, pc, #80	@ (adr r3, 8001e60 <updatePose+0x208>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fe6b 	bl	8000aec <__aeabi_dcmplt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d100      	bne.n	8001e1e <updatePose+0x1c6>
}
 8001e1c:	e012      	b.n	8001e44 <updatePose+0x1ec>
    else if(pose->theta < -M_PI) pose->theta += 2.0 * M_PI;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb98 	bl	8000558 <__aeabi_f2d>
 8001e28:	a30b      	add	r3, pc, #44	@ (adr r3, 8001e58 <updatePose+0x200>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe febd 	bl	8000bb8 <__aeabi_d2f>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	609a      	str	r2, [r3, #8]
}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	f3af 8000 	nop.w
 8001e50:	54442d18 	.word	0x54442d18
 8001e54:	400921fb 	.word	0x400921fb
 8001e58:	54442d18 	.word	0x54442d18
 8001e5c:	401921fb 	.word	0x401921fb
 8001e60:	54442d18 	.word	0x54442d18
 8001e64:	c00921fb 	.word	0xc00921fb
 8001e68:	42960000 	.word	0x42960000
 8001e6c:	3b000000 	.word	0x3b000000
 8001e70:	4059eb0b 	.word	0x4059eb0b
 8001e74:	00000000 	.word	0x00000000
 8001e78:	40965c00 	.word	0x40965c00

08001e7c <control_distancia>:
    perfil_iniciado = 0;
}
*/


void control_distancia(uint16_t distancia_objetivo_mm_, uint16_t velocidad_objetivo_mm_, uint16_t aceleracion_objetivo_mm_, float distancia_actual) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e88:	81fb      	strh	r3, [r7, #14]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	81bb      	strh	r3, [r7, #12]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	817b      	strh	r3, [r7, #10]
    distancia_inicial_mm = distancia_actual;
 8001e92:	4a4a      	ldr	r2, [pc, #296]	@ (8001fbc <control_distancia+0x140>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6013      	str	r3, [r2, #0]
    distancia_objetivo_mm = distancia_actual + (float)distancia_objetivo_mm_;
 8001e98:	89fb      	ldrh	r3, [r7, #14]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b45      	ldr	r3, [pc, #276]	@ (8001fc0 <control_distancia+0x144>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
    velocidad_objetivo_mm = (float)velocidad_objetivo_mm_;
 8001eb0:	89bb      	ldrh	r3, [r7, #12]
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eba:	4b42      	ldr	r3, [pc, #264]	@ (8001fc4 <control_distancia+0x148>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
    aceleracion_objetivo_mm = (float)aceleracion_objetivo_mm_;
 8001ec0:	897b      	ldrh	r3, [r7, #10]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	4b3f      	ldr	r3, [pc, #252]	@ (8001fc8 <control_distancia+0x14c>)
 8001ecc:	edc3 7a00 	vstr	s15, [r3]

    float tiempo_aceleracion = velocidad_objetivo_mm / aceleracion_objetivo_mm;
 8001ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc4 <control_distancia+0x148>)
 8001ed2:	edd3 6a00 	vldr	s13, [r3]
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc8 <control_distancia+0x14c>)
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	edc7 7a05 	vstr	s15, [r7, #20]
    distancia_aceleracion = 0.5f * aceleracion_objetivo_mm * tiempo_aceleracion * tiempo_aceleracion;
 8001ee4:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <control_distancia+0x14c>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001eee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ef2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	4b32      	ldr	r3, [pc, #200]	@ (8001fcc <control_distancia+0x150>)
 8001f04:	edc3 7a00 	vstr	s15, [r3]
    distancia_constante = (distancia_objetivo_mm - distancia_inicial_mm) - 2 * distancia_aceleracion;
 8001f08:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <control_distancia+0x144>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <control_distancia+0x140>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f18:	4b2c      	ldr	r3, [pc, #176]	@ (8001fcc <control_distancia+0x150>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <control_distancia+0x154>)
 8001f28:	edc3 7a00 	vstr	s15, [r3]

    if (distancia_constante <= 0) {
 8001f2c:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <control_distancia+0x154>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	d837      	bhi.n	8001fac <control_distancia+0x130>
        float velocidad_max_ajustada = sqrtf(2.0f * aceleracion_objetivo_mm * ((distancia_objetivo_mm - distancia_inicial_mm) / 2.0f));
 8001f3c:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <control_distancia+0x14c>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <control_distancia+0x144>)
 8001f48:	edd3 6a00 	vldr	s13, [r3]
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <control_distancia+0x140>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f56:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001f5a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f62:	eeb0 0a67 	vmov.f32	s0, s15
 8001f66:	f00d f8dd 	bl	800f124 <sqrtf>
 8001f6a:	ed87 0a04 	vstr	s0, [r7, #16]
        tiempo_aceleracion = velocidad_max_ajustada / aceleracion_objetivo_mm;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	@ (8001fc8 <control_distancia+0x14c>)
 8001f70:	ed93 7a00 	vldr	s14, [r3]
 8001f74:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7c:	edc7 7a05 	vstr	s15, [r7, #20]
        distancia_aceleracion = (distancia_objetivo_mm - distancia_inicial_mm) / 2.0f;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <control_distancia+0x144>)
 8001f82:	ed93 7a00 	vldr	s14, [r3]
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <control_distancia+0x140>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f90:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <control_distancia+0x150>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
        distancia_constante = 0;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <control_distancia+0x154>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
        velocidad_objetivo_mm = velocidad_max_ajustada;
 8001fa6:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <control_distancia+0x148>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6013      	str	r3, [r2, #0]
    }

    perfil_iniciado = 0;
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <control_distancia+0x158>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000684 	.word	0x20000684
 8001fc0:	20000680 	.word	0x20000680
 8001fc4:	20000688 	.word	0x20000688
 8001fc8:	2000068c 	.word	0x2000068c
 8001fcc:	20000690 	.word	0x20000690
 8001fd0:	20000694 	.word	0x20000694
 8001fd4:	20000698 	.word	0x20000698

08001fd8 <actualizar_velocidad_trapezoidal>:

    return velocidad_deseada;
}
*/

float actualizar_velocidad_trapezoidal(float dist) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	ed87 0a01 	vstr	s0, [r7, #4]
    // Iniciar el perfil si no ha comenzado
    if (!perfil_iniciado) {
 8001fe2:	4b47      	ldr	r3, [pc, #284]	@ (8002100 <actualizar_velocidad_trapezoidal+0x128>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <actualizar_velocidad_trapezoidal+0x18>
        perfil_iniciado = 1;
 8001fea:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <actualizar_velocidad_trapezoidal+0x128>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    }

    // Calcular la distancia recorrida relativa desde el inicio del movimiento
    float dist_relativa = dist - distancia_inicial_mm;
 8001ff0:	4b44      	ldr	r3, [pc, #272]	@ (8002104 <actualizar_velocidad_trapezoidal+0x12c>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a04 	vstr	s15, [r7, #16]
    float velocidad_deseada = 0.0f;
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	617b      	str	r3, [r7, #20]

    // Fase de aceleración
    if (dist_relativa < distancia_aceleracion) {
 8002008:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <actualizar_velocidad_trapezoidal+0x130>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002012:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d51b      	bpl.n	8002054 <actualizar_velocidad_trapezoidal+0x7c>
        // Si dist_relativa es muy pequeño, usar velocidad inicial mínima para arrancar
        if (dist_relativa < 1.0f) { // Umbral de 1 mm para evitar dist = 0
 800201c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d502      	bpl.n	8002034 <actualizar_velocidad_trapezoidal+0x5c>
            velocidad_deseada = VELOCIDAD_INICIAL_MINIMA;
 800202e:	4b37      	ldr	r3, [pc, #220]	@ (800210c <actualizar_velocidad_trapezoidal+0x134>)
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e052      	b.n	80020da <actualizar_velocidad_trapezoidal+0x102>
        } else {
            velocidad_deseada = sqrtf(2.0f * aceleracion_objetivo_mm * dist_relativa);
 8002034:	4b36      	ldr	r3, [pc, #216]	@ (8002110 <actualizar_velocidad_trapezoidal+0x138>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800203e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	eeb0 0a67 	vmov.f32	s0, s15
 800204a:	f00d f86b 	bl	800f124 <sqrtf>
 800204e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002052:	e042      	b.n	80020da <actualizar_velocidad_trapezoidal+0x102>
        }
    }
    // Fase de velocidad constante
    else if (dist_relativa < (distancia_aceleracion + distancia_constante)) {
 8002054:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <actualizar_velocidad_trapezoidal+0x130>)
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	4b2e      	ldr	r3, [pc, #184]	@ (8002114 <actualizar_velocidad_trapezoidal+0x13c>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002064:	ed97 7a04 	vldr	s14, [r7, #16]
 8002068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d503      	bpl.n	800207a <actualizar_velocidad_trapezoidal+0xa2>
        velocidad_deseada = velocidad_objetivo_mm;
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <actualizar_velocidad_trapezoidal+0x140>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e02f      	b.n	80020da <actualizar_velocidad_trapezoidal+0x102>
    }
    // Fase de desaceleración
    else if (dist_relativa < (distancia_objetivo_mm - distancia_inicial_mm)) {
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <actualizar_velocidad_trapezoidal+0x144>)
 800207c:	ed93 7a00 	vldr	s14, [r3]
 8002080:	4b20      	ldr	r3, [pc, #128]	@ (8002104 <actualizar_velocidad_trapezoidal+0x12c>)
 8002082:	edd3 7a00 	vldr	s15, [r3]
 8002086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208a:	ed97 7a04 	vldr	s14, [r7, #16]
 800208e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	d51d      	bpl.n	80020d4 <actualizar_velocidad_trapezoidal+0xfc>
        float distancia_restante = (distancia_objetivo_mm - distancia_inicial_mm) - dist_relativa;
 8002098:	4b20      	ldr	r3, [pc, #128]	@ (800211c <actualizar_velocidad_trapezoidal+0x144>)
 800209a:	ed93 7a00 	vldr	s14, [r3]
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <actualizar_velocidad_trapezoidal+0x12c>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b0:	edc7 7a03 	vstr	s15, [r7, #12]
        velocidad_deseada = sqrtf(2.0f * aceleracion_objetivo_mm * distancia_restante);
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <actualizar_velocidad_trapezoidal+0x138>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020be:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	f00d f82b 	bl	800f124 <sqrtf>
 80020ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80020d2:	e002      	b.n	80020da <actualizar_velocidad_trapezoidal+0x102>
    }
    // Después de alcanzar la distancia objetivo
    else {
        velocidad_deseada = 0.0f;
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
    }

    // Asegurar que la velocidad no sea negativa
    if (velocidad_deseada < 0) {
 80020da:	edd7 7a05 	vldr	s15, [r7, #20]
 80020de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d502      	bpl.n	80020ee <actualizar_velocidad_trapezoidal+0x116>
        velocidad_deseada = 0.0f;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
    }

    return velocidad_deseada;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	ee07 3a90 	vmov	s15, r3
}
 80020f4:	eeb0 0a67 	vmov.f32	s0, s15
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000698 	.word	0x20000698
 8002104:	20000684 	.word	0x20000684
 8002108:	20000690 	.word	0x20000690
 800210c:	42c80000 	.word	0x42c80000
 8002110:	2000068c 	.word	0x2000068c
 8002114:	20000694 	.word	0x20000694
 8002118:	20000688 	.word	0x20000688
 800211c:	20000680 	.word	0x20000680

08002120 <destino_alcanzado>:


uint8_t destino_alcanzado(float dist) {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	ed87 0a01 	vstr	s0, [r7, #4]

	if (fabs(dist - distancia_objetivo_mm) <= TOLERANCIA_MM) {
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <destino_alcanzado+0x44>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ed97 7a01 	vldr	s14, [r7, #4]
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	eef0 7ae7 	vabs.f32	s15, s15
 800213c:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d804      	bhi.n	8002154 <destino_alcanzado+0x34>

		perfil_iniciado = 0;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <destino_alcanzado+0x48>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
        return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <destino_alcanzado+0x36>
    }
    return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000680 	.word	0x20000680
 8002168:	20000698 	.word	0x20000698

0800216c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216e:	b095      	sub	sp, #84	@ 0x54
 8002170:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002172:	f001 fbe7 	bl	8003944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002176:	f000 f931 	bl	80023dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217a:	f000 fc6d 	bl	8002a58 <MX_GPIO_Init>
  MX_DMA_Init();
 800217e:	f000 fc4b 	bl	8002a18 <MX_DMA_Init>
  MX_TIM2_Init();
 8002182:	f000 fa6f 	bl	8002664 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002186:	f000 fabb 	bl	8002700 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800218a:	f009 fc6f 	bl	800ba6c <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 800218e:	f000 fb59 	bl	8002844 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002192:	f000 fbab 	bl	80028ec <MX_TIM9_Init>
  MX_ADC1_Init();
 8002196:	f000 f989 	bl	80024ac <MX_ADC1_Init>
  MX_TIM4_Init();
 800219a:	f000 fb05 	bl	80027a8 <MX_TIM4_Init>
  MX_TIM1_Init();
 800219e:	f000 fa0f 	bl	80025c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80021a2:	f000 fc0f 	bl	80029c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  motoresInit(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
 80021a6:	2204      	movs	r2, #4
 80021a8:	2100      	movs	r1, #0
 80021aa:	4876      	ldr	r0, [pc, #472]	@ (8002384 <main+0x218>)
 80021ac:	f000 fdba 	bl	8002d24 <motoresInit>
  Encoder_1_Init(&htim5);
 80021b0:	4875      	ldr	r0, [pc, #468]	@ (8002388 <main+0x21c>)
 80021b2:	f001 f9e7 	bl	8003584 <Encoder_1_Init>
  Encoder_2_Init(&htim3);
 80021b6:	4875      	ldr	r0, [pc, #468]	@ (800238c <main+0x220>)
 80021b8:	f001 f9f8 	bl	80035ac <Encoder_2_Init>
  Tiempo_Init(&htim1);
 80021bc:	4874      	ldr	r0, [pc, #464]	@ (8002390 <main+0x224>)
 80021be:	f7fe fec3 	bl	8000f48 <Tiempo_Init>


  HAL_TIM_Base_Start(&htim2);
 80021c2:	4874      	ldr	r0, [pc, #464]	@ (8002394 <main+0x228>)
 80021c4:	f004 fd7e 	bl	8006cc4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80021c8:	4873      	ldr	r0, [pc, #460]	@ (8002398 <main+0x22c>)
 80021ca:	f004 fdd5 	bl	8006d78 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 80021ce:	2205      	movs	r2, #5
 80021d0:	4972      	ldr	r1, [pc, #456]	@ (800239c <main+0x230>)
 80021d2:	4873      	ldr	r0, [pc, #460]	@ (80023a0 <main+0x234>)
 80021d4:	f001 fc90 	bl	8003af8 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (indexRX != 0) {
 80021d8:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <main+0x238>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00b      	beq.n	80021fa <main+0x8e>
		  uint16_t *result = instruction(datosRX);
 80021e2:	4871      	ldr	r0, [pc, #452]	@ (80023a8 <main+0x23c>)
 80021e4:	f7ff fa4e 	bl	8001684 <instruction>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24
		  memcpy(objetivo, result, sizeof(objetivo));
 80021ea:	220c      	movs	r2, #12
 80021ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021ee:	486f      	ldr	r0, [pc, #444]	@ (80023ac <main+0x240>)
 80021f0:	f00a ff4f 	bl	800d092 <memcpy>
		  indexRX = 0;
 80021f4:	4b6b      	ldr	r3, [pc, #428]	@ (80023a4 <main+0x238>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	  }

	  if (contadorrr >= 10) {
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <main+0x244>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b09      	cmp	r3, #9
 8002202:	d90a      	bls.n	800221a <main+0xae>
		  int16_t *vel = calculo_rpm();
 8002204:	f001 f9e6 	bl	80035d4 <calculo_rpm>
 8002208:	6238      	str	r0, [r7, #32]
		  memcpy(velocidades_calc, vel, sizeof(velocidades_calc));
 800220a:	2206      	movs	r2, #6
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	4869      	ldr	r0, [pc, #420]	@ (80023b4 <main+0x248>)
 8002210:	f00a ff3f 	bl	800d092 <memcpy>
		  contadorrr = 0;
 8002214:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <main+0x244>)
 8002216:	2200      	movs	r2, #0
 8002218:	801a      	strh	r2, [r3, #0]
	  }


	  contador = ((int32_t)__HAL_TIM_GET_COUNTER(&htim5)) /1431;
 800221a:	4b5b      	ldr	r3, [pc, #364]	@ (8002388 <main+0x21c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	4a65      	ldr	r2, [pc, #404]	@ (80023b8 <main+0x24c>)
 8002222:	fb82 1203 	smull	r1, r2, r2, r3
 8002226:	1252      	asrs	r2, r2, #9
 8002228:	17db      	asrs	r3, r3, #31
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a63      	ldr	r2, [pc, #396]	@ (80023bc <main+0x250>)
 800222e:	6013      	str	r3, [r2, #0]
	  tiempo = (__HAL_TIM_GET_COUNTER(&htim2)/2);
 8002230:	4b58      	ldr	r3, [pc, #352]	@ (8002394 <main+0x228>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	4a61      	ldr	r2, [pc, #388]	@ (80023c0 <main+0x254>)
 800223a:	6013      	str	r3, [r2, #0]

	  calibracion();
 800223c:	f7fe ff00 	bl	8001040 <calibracion>

	  float *prom = promedio_adc(adcValue);
 8002240:	4856      	ldr	r0, [pc, #344]	@ (800239c <main+0x230>)
 8002242:	f7ff fb3b 	bl	80018bc <promedio_adc>
 8002246:	61f8      	str	r0, [r7, #28]
	  memcpy(adc_prom, prom, sizeof(adc_prom));
 8002248:	2214      	movs	r2, #20
 800224a:	69f9      	ldr	r1, [r7, #28]
 800224c:	485d      	ldr	r0, [pc, #372]	@ (80023c4 <main+0x258>)
 800224e:	f00a ff20 	bl	800d092 <memcpy>

	  float *volt = promedio_adc_v(adcValue);
 8002252:	4852      	ldr	r0, [pc, #328]	@ (800239c <main+0x230>)
 8002254:	f7ff fba8 	bl	80019a8 <promedio_adc_v>
 8002258:	61b8      	str	r0, [r7, #24]
	  memcpy(adc_volt, volt, sizeof(adc_volt));
 800225a:	2214      	movs	r2, #20
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	485a      	ldr	r0, [pc, #360]	@ (80023c8 <main+0x25c>)
 8002260:	f00a ff17 	bl	800d092 <memcpy>

	  uint16_t *dist = calculo_mm(adc_prom);
 8002264:	4857      	ldr	r0, [pc, #348]	@ (80023c4 <main+0x258>)
 8002266:	f7ff fbdd 	bl	8001a24 <calculo_mm>
 800226a:	6178      	str	r0, [r7, #20]
	  memcpy(adc_dist, dist, sizeof(adc_dist));
 800226c:	220a      	movs	r2, #10
 800226e:	6979      	ldr	r1, [r7, #20]
 8002270:	4856      	ldr	r0, [pc, #344]	@ (80023cc <main+0x260>)
 8002272:	f00a ff0e 	bl	800d092 <memcpy>

	  datos_enviar(velocidades_calc[0], contador, tiempo, velocidades_calc[1], velocidades_calc[2],
 8002276:	4b4f      	ldr	r3, [pc, #316]	@ (80023b4 <main+0x248>)
 8002278:	f9b3 c000 	ldrsh.w	ip, [r3]
 800227c:	4b4f      	ldr	r3, [pc, #316]	@ (80023bc <main+0x250>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b4f      	ldr	r3, [pc, #316]	@ (80023c0 <main+0x254>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	60ba      	str	r2, [r7, #8]
 8002288:	4b4a      	ldr	r3, [pc, #296]	@ (80023b4 <main+0x248>)
 800228a:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 800228e:	4b49      	ldr	r3, [pc, #292]	@ (80023b4 <main+0x248>)
 8002290:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
			  	  (uint16_t)adcValue[0], (uint16_t)adcValue[1], (uint16_t)adcValue[2],
 8002294:	4a41      	ldr	r2, [pc, #260]	@ (800239c <main+0x230>)
 8002296:	6812      	ldr	r2, [r2, #0]
	  datos_enviar(velocidades_calc[0], contador, tiempo, velocidades_calc[1], velocidades_calc[2],
 8002298:	b292      	uxth	r2, r2
			  	  (uint16_t)adcValue[0], (uint16_t)adcValue[1], (uint16_t)adcValue[2],
 800229a:	4940      	ldr	r1, [pc, #256]	@ (800239c <main+0x230>)
 800229c:	6849      	ldr	r1, [r1, #4]
	  datos_enviar(velocidades_calc[0], contador, tiempo, velocidades_calc[1], velocidades_calc[2],
 800229e:	b289      	uxth	r1, r1
			  	  (uint16_t)adcValue[0], (uint16_t)adcValue[1], (uint16_t)adcValue[2],
 80022a0:	483e      	ldr	r0, [pc, #248]	@ (800239c <main+0x230>)
 80022a2:	6880      	ldr	r0, [r0, #8]
	  datos_enviar(velocidades_calc[0], contador, tiempo, velocidades_calc[1], velocidades_calc[2],
 80022a4:	b280      	uxth	r0, r0
 80022a6:	6078      	str	r0, [r7, #4]
				  (uint16_t)adcValue[3], adc_volt[0], adc_volt[1], adc_volt[2],
 80022a8:	4c3c      	ldr	r4, [pc, #240]	@ (800239c <main+0x230>)
 80022aa:	68e4      	ldr	r4, [r4, #12]
	  datos_enviar(velocidades_calc[0], contador, tiempo, velocidades_calc[1], velocidades_calc[2],
 80022ac:	b2a4      	uxth	r4, r4
 80022ae:	4d46      	ldr	r5, [pc, #280]	@ (80023c8 <main+0x25c>)
 80022b0:	edd5 7a00 	vldr	s15, [r5]
 80022b4:	4d44      	ldr	r5, [pc, #272]	@ (80023c8 <main+0x25c>)
 80022b6:	ed95 7a01 	vldr	s14, [r5, #4]
 80022ba:	4d43      	ldr	r5, [pc, #268]	@ (80023c8 <main+0x25c>)
 80022bc:	edd5 6a02 	vldr	s13, [r5, #8]
 80022c0:	4d41      	ldr	r5, [pc, #260]	@ (80023c8 <main+0x25c>)
 80022c2:	ed95 6a03 	vldr	s12, [r5, #12]
 80022c6:	4d41      	ldr	r5, [pc, #260]	@ (80023cc <main+0x260>)
 80022c8:	882d      	ldrh	r5, [r5, #0]
 80022ca:	4e40      	ldr	r6, [pc, #256]	@ (80023cc <main+0x260>)
 80022cc:	8876      	ldrh	r6, [r6, #2]
 80022ce:	483f      	ldr	r0, [pc, #252]	@ (80023cc <main+0x260>)
 80022d0:	8880      	ldrh	r0, [r0, #4]
 80022d2:	6038      	str	r0, [r7, #0]
 80022d4:	483d      	ldr	r0, [pc, #244]	@ (80023cc <main+0x260>)
 80022d6:	88c0      	ldrh	r0, [r0, #6]
 80022d8:	9008      	str	r0, [sp, #32]
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	9007      	str	r0, [sp, #28]
 80022de:	9606      	str	r6, [sp, #24]
 80022e0:	9505      	str	r5, [sp, #20]
 80022e2:	9404      	str	r4, [sp, #16]
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	9003      	str	r0, [sp, #12]
 80022e8:	9102      	str	r1, [sp, #8]
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	eef0 1a46 	vmov.f32	s3, s12
 80022f2:	eeb0 1a66 	vmov.f32	s2, s13
 80022f6:	eef0 0a47 	vmov.f32	s1, s14
 80022fa:	eeb0 0a67 	vmov.f32	s0, s15
 80022fe:	4673      	mov	r3, lr
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	68f9      	ldr	r1, [r7, #12]
 8002304:	4660      	mov	r0, ip
 8002306:	f7fe ff0f 	bl	8001128 <datos_enviar>
				  adc_volt[3], adc_dist[0], adc_dist[1], adc_dist[2], adc_dist[3]);

	  if((objetivo[1] == 1) && (objetivo[3] == 1) && (objetivo[5] == 1)){
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <main+0x240>)
 800230c:	885b      	ldrh	r3, [r3, #2]
 800230e:	2b01      	cmp	r3, #1
 8002310:	f47f af62 	bne.w	80021d8 <main+0x6c>
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <main+0x240>)
 8002316:	88db      	ldrh	r3, [r3, #6]
 8002318:	2b01      	cmp	r3, #1
 800231a:	f47f af5d 	bne.w	80021d8 <main+0x6c>
 800231e:	4b23      	ldr	r3, [pc, #140]	@ (80023ac <main+0x240>)
 8002320:	895b      	ldrh	r3, [r3, #10]
 8002322:	2b01      	cmp	r3, #1
 8002324:	f47f af58 	bne.w	80021d8 <main+0x6c>

		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0)){
 8002328:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800232c:	4828      	ldr	r0, [pc, #160]	@ (80023d0 <main+0x264>)
 800232e:	f002 fd9d 	bl	8004e6c <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f af4f 	bne.w	80021d8 <main+0x6c>
			  uint32_t tiempo_cond = (__HAL_TIM_GET_COUNTER(&htim2)/2);
 800233a:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <main+0x228>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	085b      	lsrs	r3, r3, #1
 8002342:	613b      	str	r3, [r7, #16]
			  while((tiempo_cond + 5000) > (__HAL_TIM_GET_COUNTER(&htim2)/2)){
 8002344:	bf00      	nop
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800234c:	3308      	adds	r3, #8
 800234e:	4a11      	ldr	r2, [pc, #68]	@ (8002394 <main+0x228>)
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002354:	0852      	lsrs	r2, r2, #1
 8002356:	4293      	cmp	r3, r2
 8002358:	d8f5      	bhi.n	8002346 <main+0x1da>
			  }


			  control_distancia(objetivo[0], objetivo[2], objetivo[4], pose.avanceLineal);
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <main+0x240>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <main+0x240>)
 8002360:	8891      	ldrh	r1, [r2, #4]
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <main+0x240>)
 8002364:	8912      	ldrh	r2, [r2, #8]
 8002366:	481b      	ldr	r0, [pc, #108]	@ (80023d4 <main+0x268>)
 8002368:	edd0 7a07 	vldr	s15, [r0, #28]
 800236c:	eeb0 0a67 	vmov.f32	s0, s15
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fd83 	bl	8001e7c <control_distancia>

			  //objetivo[1] = 0;
			  //objetivo[3] = 0;
			  //objetivo[5] = 0;

			  datosRX[0] = 0;
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <main+0x23c>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
			  act_proc = 1;
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <main+0x26c>)
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
  {
 8002382:	e729      	b.n	80021d8 <main+0x6c>
 8002384:	200008ac 	.word	0x200008ac
 8002388:	20000864 	.word	0x20000864
 800238c:	200007d4 	.word	0x200007d4
 8002390:	20000744 	.word	0x20000744
 8002394:	2000078c 	.word	0x2000078c
 8002398:	2000081c 	.word	0x2000081c
 800239c:	20000944 	.word	0x20000944
 80023a0:	2000069c 	.word	0x2000069c
 80023a4:	200009b8 	.word	0x200009b8
 80023a8:	200009bc 	.word	0x200009bc
 80023ac:	20000958 	.word	0x20000958
 80023b0:	200009cc 	.word	0x200009cc
 80023b4:	20000964 	.word	0x20000964
 80023b8:	5b983d8b 	.word	0x5b983d8b
 80023bc:	2000093c 	.word	0x2000093c
 80023c0:	20000940 	.word	0x20000940
 80023c4:	2000096c 	.word	0x2000096c
 80023c8:	20000980 	.word	0x20000980
 80023cc:	20000994 	.word	0x20000994
 80023d0:	40020400 	.word	0x40020400
 80023d4:	20000a54 	.word	0x20000a54
 80023d8:	20000a50 	.word	0x20000a50

080023dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b094      	sub	sp, #80	@ 0x50
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0320 	add.w	r3, r7, #32
 80023e6:	2230      	movs	r2, #48	@ 0x30
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00a fdd1 	bl	800cf92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	4b27      	ldr	r3, [pc, #156]	@ (80024a4 <SystemClock_Config+0xc8>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002408:	4a26      	ldr	r2, [pc, #152]	@ (80024a4 <SystemClock_Config+0xc8>)
 800240a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <SystemClock_Config+0xc8>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	4b21      	ldr	r3, [pc, #132]	@ (80024a8 <SystemClock_Config+0xcc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a20      	ldr	r2, [pc, #128]	@ (80024a8 <SystemClock_Config+0xcc>)
 8002426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <SystemClock_Config+0xcc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002438:	2301      	movs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800243c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002442:	2302      	movs	r3, #2
 8002444:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002446:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800244a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800244c:	2319      	movs	r3, #25
 800244e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002450:	23c0      	movs	r3, #192	@ 0xc0
 8002452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002454:	2302      	movs	r3, #2
 8002456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002458:	2304      	movs	r3, #4
 800245a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	4618      	mov	r0, r3
 8002462:	f003 ff87 	bl	8006374 <HAL_RCC_OscConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800246c:	f000 fc54 	bl	8002d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002470:	230f      	movs	r3, #15
 8002472:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002474:	2302      	movs	r3, #2
 8002476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800247c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	2103      	movs	r1, #3
 800248c:	4618      	mov	r0, r3
 800248e:	f004 f9e9 	bl	8006864 <HAL_RCC_ClockConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002498:	f000 fc3e 	bl	8002d18 <Error_Handler>
  }
}
 800249c:	bf00      	nop
 800249e:	3750      	adds	r7, #80	@ 0x50
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40007000 	.word	0x40007000

080024ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024b2:	463b      	mov	r3, r7
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024c0:	4a3d      	ldr	r2, [pc, #244]	@ (80025b8 <MX_ADC1_Init+0x10c>)
 80024c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024c4:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024cc:	4b39      	ldr	r3, [pc, #228]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80024d2:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024d8:	4b36      	ldr	r3, [pc, #216]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024da:	2200      	movs	r2, #0
 80024dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024de:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024e6:	4b33      	ldr	r3, [pc, #204]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024ec:	4b31      	ldr	r3, [pc, #196]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024ee:	4a33      	ldr	r2, [pc, #204]	@ (80025bc <MX_ADC1_Init+0x110>)
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80024f8:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <MX_ADC1_Init+0x108>)
 80024fa:	2205      	movs	r2, #5
 80024fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <MX_ADC1_Init+0x108>)
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002506:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <MX_ADC1_Init+0x108>)
 8002508:	2201      	movs	r2, #1
 800250a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800250c:	4829      	ldr	r0, [pc, #164]	@ (80025b4 <MX_ADC1_Init+0x108>)
 800250e:	f001 faaf 	bl	8003a70 <HAL_ADC_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002518:	f000 fbfe 	bl	8002d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800251c:	2304      	movs	r3, #4
 800251e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002520:	2301      	movs	r3, #1
 8002522:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002528:	463b      	mov	r3, r7
 800252a:	4619      	mov	r1, r3
 800252c:	4821      	ldr	r0, [pc, #132]	@ (80025b4 <MX_ADC1_Init+0x108>)
 800252e:	f001 fbe7 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002538:	f000 fbee 	bl	8002d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800253c:	2305      	movs	r3, #5
 800253e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002540:	2302      	movs	r3, #2
 8002542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002544:	463b      	mov	r3, r7
 8002546:	4619      	mov	r1, r3
 8002548:	481a      	ldr	r0, [pc, #104]	@ (80025b4 <MX_ADC1_Init+0x108>)
 800254a:	f001 fbd9 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002554:	f000 fbe0 	bl	8002d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002558:	2306      	movs	r3, #6
 800255a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800255c:	2303      	movs	r3, #3
 800255e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	4619      	mov	r1, r3
 8002564:	4813      	ldr	r0, [pc, #76]	@ (80025b4 <MX_ADC1_Init+0x108>)
 8002566:	f001 fbcb 	bl	8003d00 <HAL_ADC_ConfigChannel>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002570:	f000 fbd2 	bl	8002d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002574:	2307      	movs	r3, #7
 8002576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002578:	2304      	movs	r3, #4
 800257a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800257c:	463b      	mov	r3, r7
 800257e:	4619      	mov	r1, r3
 8002580:	480c      	ldr	r0, [pc, #48]	@ (80025b4 <MX_ADC1_Init+0x108>)
 8002582:	f001 fbbd 	bl	8003d00 <HAL_ADC_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800258c:	f000 fbc4 	bl	8002d18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002590:	2308      	movs	r3, #8
 8002592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002594:	2305      	movs	r3, #5
 8002596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002598:	463b      	mov	r3, r7
 800259a:	4619      	mov	r1, r3
 800259c:	4805      	ldr	r0, [pc, #20]	@ (80025b4 <MX_ADC1_Init+0x108>)
 800259e:	f001 fbaf 	bl	8003d00 <HAL_ADC_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80025a8:	f000 fbb6 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	2000069c 	.word	0x2000069c
 80025b8:	40012000 	.word	0x40012000
 80025bc:	0f000001 	.word	0x0f000001

080025c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0308 	add.w	r3, r7, #8
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025dc:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <MX_TIM1_Init+0x9c>)
 80025de:	4a20      	ldr	r2, [pc, #128]	@ (8002660 <MX_TIM1_Init+0xa0>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000-1;
 80025e2:	4b1e      	ldr	r3, [pc, #120]	@ (800265c <MX_TIM1_Init+0x9c>)
 80025e4:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80025e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_TIM1_Init+0x9c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_TIM1_Init+0x9c>)
 80025f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f8:	4b18      	ldr	r3, [pc, #96]	@ (800265c <MX_TIM1_Init+0x9c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025fe:	4b17      	ldr	r3, [pc, #92]	@ (800265c <MX_TIM1_Init+0x9c>)
 8002600:	2200      	movs	r2, #0
 8002602:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002604:	4b15      	ldr	r3, [pc, #84]	@ (800265c <MX_TIM1_Init+0x9c>)
 8002606:	2200      	movs	r2, #0
 8002608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800260a:	4814      	ldr	r0, [pc, #80]	@ (800265c <MX_TIM1_Init+0x9c>)
 800260c:	f004 fb0a 	bl	8006c24 <HAL_TIM_Base_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002616:	f000 fb7f 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002620:	f107 0308 	add.w	r3, r7, #8
 8002624:	4619      	mov	r1, r3
 8002626:	480d      	ldr	r0, [pc, #52]	@ (800265c <MX_TIM1_Init+0x9c>)
 8002628:	f004 fff8 	bl	800761c <HAL_TIM_ConfigClockSource>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002632:	f000 fb71 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800263e:	463b      	mov	r3, r7
 8002640:	4619      	mov	r1, r3
 8002642:	4806      	ldr	r0, [pc, #24]	@ (800265c <MX_TIM1_Init+0x9c>)
 8002644:	f005 fbb2 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800264e:	f000 fb63 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000744 	.word	0x20000744
 8002660:	40010000 	.word	0x40010000

08002664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	463b      	mov	r3, r7
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <MX_TIM2_Init+0x98>)
 8002682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8002688:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <MX_TIM2_Init+0x98>)
 800268a:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 800268e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <MX_TIM2_Init+0x98>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <MX_TIM2_Init+0x98>)
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <MX_TIM2_Init+0x98>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <MX_TIM2_Init+0x98>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026aa:	4814      	ldr	r0, [pc, #80]	@ (80026fc <MX_TIM2_Init+0x98>)
 80026ac:	f004 faba 	bl	8006c24 <HAL_TIM_Base_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026b6:	f000 fb2f 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c0:	f107 0308 	add.w	r3, r7, #8
 80026c4:	4619      	mov	r1, r3
 80026c6:	480d      	ldr	r0, [pc, #52]	@ (80026fc <MX_TIM2_Init+0x98>)
 80026c8:	f004 ffa8 	bl	800761c <HAL_TIM_ConfigClockSource>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026d2:	f000 fb21 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026de:	463b      	mov	r3, r7
 80026e0:	4619      	mov	r1, r3
 80026e2:	4806      	ldr	r0, [pc, #24]	@ (80026fc <MX_TIM2_Init+0x98>)
 80026e4:	f005 fb62 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026ee:	f000 fb13 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	2000078c 	.word	0x2000078c

08002700 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	2224      	movs	r2, #36	@ 0x24
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f00a fc3f 	bl	800cf92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271c:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 800271e:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <MX_TIM3_Init+0xa4>)
 8002720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002722:	4b1f      	ldr	r3, [pc, #124]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002728:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800272e:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 8002730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002742:	2303      	movs	r3, #3
 8002744:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002746:	2302      	movs	r3, #2
 8002748:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800274a:	2301      	movs	r3, #1
 800274c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002752:	230f      	movs	r3, #15
 8002754:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800275a:	2301      	movs	r3, #1
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800275e:	2300      	movs	r3, #0
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002762:	230f      	movs	r3, #15
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 800276e:	f004 fc6f 	bl	8007050 <HAL_TIM_Encoder_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002778:	f000 face 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	@ (80027a0 <MX_TIM3_Init+0xa0>)
 800278a:	f005 fb0f 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002794:	f000 fac0 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3730      	adds	r7, #48	@ 0x30
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200007d4 	.word	0x200007d4
 80027a4:	40000400 	.word	0x40000400

080027a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <MX_TIM4_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <MX_TIM4_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <MX_TIM4_Init+0x94>)
 80027cc:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80027d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <MX_TIM4_Init+0x94>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20-1;
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <MX_TIM4_Init+0x94>)
 80027da:	2213      	movs	r2, #19
 80027dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <MX_TIM4_Init+0x94>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b15      	ldr	r3, [pc, #84]	@ (800283c <MX_TIM4_Init+0x94>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027ea:	4814      	ldr	r0, [pc, #80]	@ (800283c <MX_TIM4_Init+0x94>)
 80027ec:	f004 fa1a 	bl	8006c24 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80027f6:	f000 fa8f 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	480d      	ldr	r0, [pc, #52]	@ (800283c <MX_TIM4_Init+0x94>)
 8002808:	f004 ff08 	bl	800761c <HAL_TIM_ConfigClockSource>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002812:	f000 fa81 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800281e:	463b      	mov	r3, r7
 8002820:	4619      	mov	r1, r3
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <MX_TIM4_Init+0x94>)
 8002824:	f005 fac2 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800282e:	f000 fa73 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000081c 	.word	0x2000081c
 8002840:	40000800 	.word	0x40000800

08002844 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	@ 0x30
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2224      	movs	r2, #36	@ 0x24
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f00a fb9d 	bl	800cf92 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002860:	4b20      	ldr	r3, [pc, #128]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 8002862:	4a21      	ldr	r2, [pc, #132]	@ (80028e8 <MX_TIM5_Init+0xa4>)
 8002864:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002866:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286c:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 8002874:	f04f 32ff 	mov.w	r2, #4294967295
 8002878:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002880:	4b18      	ldr	r3, [pc, #96]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 8002882:	2200      	movs	r2, #0
 8002884:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002886:	2303      	movs	r3, #3
 8002888:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800288a:	2302      	movs	r3, #2
 800288c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800288e:	2301      	movs	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002896:	230f      	movs	r3, #15
 8002898:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800289a:	2302      	movs	r3, #2
 800289c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800289e:	2301      	movs	r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028a2:	2300      	movs	r3, #0
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80028a6:	230f      	movs	r3, #15
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 80028b2:	f004 fbcd 	bl	8007050 <HAL_TIM_Encoder_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80028bc:	f000 fa2c 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c0:	2300      	movs	r3, #0
 80028c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	4619      	mov	r1, r3
 80028cc:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <MX_TIM5_Init+0xa0>)
 80028ce:	f005 fa6d 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80028d8:	f000 fa1e 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	3730      	adds	r7, #48	@ 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000864 	.word	0x20000864
 80028e8:	40000c00 	.word	0x40000c00

080028ec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	@ 0x30
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f2:	f107 0320 	add.w	r3, r7, #32
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	615a      	str	r2, [r3, #20]
 8002910:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002912:	4b2a      	ldr	r3, [pc, #168]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002914:	4a2a      	ldr	r2, [pc, #168]	@ (80029c0 <MX_TIM9_Init+0xd4>)
 8002916:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 28-1;
 8002918:	4b28      	ldr	r3, [pc, #160]	@ (80029bc <MX_TIM9_Init+0xd0>)
 800291a:	221b      	movs	r2, #27
 800291c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002926:	2263      	movs	r2, #99	@ 0x63
 8002928:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292a:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <MX_TIM9_Init+0xd0>)
 800292c:	2200      	movs	r2, #0
 800292e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002930:	4b22      	ldr	r3, [pc, #136]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002936:	4821      	ldr	r0, [pc, #132]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002938:	f004 f974 	bl	8006c24 <HAL_TIM_Base_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 8002942:	f000 f9e9 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800294c:	f107 0320 	add.w	r3, r7, #32
 8002950:	4619      	mov	r1, r3
 8002952:	481a      	ldr	r0, [pc, #104]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002954:	f004 fe62 	bl	800761c <HAL_TIM_ConfigClockSource>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800295e:	f000 f9db 	bl	8002d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002962:	4816      	ldr	r0, [pc, #88]	@ (80029bc <MX_TIM9_Init+0xd0>)
 8002964:	f004 fa6a 	bl	8006e3c <HAL_TIM_PWM_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800296e:	f000 f9d3 	bl	8002d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002972:	2360      	movs	r3, #96	@ 0x60
 8002974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	2200      	movs	r2, #0
 8002986:	4619      	mov	r1, r3
 8002988:	480c      	ldr	r0, [pc, #48]	@ (80029bc <MX_TIM9_Init+0xd0>)
 800298a:	f004 fd85 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8002994:	f000 f9c0 	bl	8002d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2204      	movs	r2, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4807      	ldr	r0, [pc, #28]	@ (80029bc <MX_TIM9_Init+0xd0>)
 80029a0:	f004 fd7a 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 80029aa:	f000 f9b5 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80029ae:	4803      	ldr	r0, [pc, #12]	@ (80029bc <MX_TIM9_Init+0xd0>)
 80029b0:	f000 fc40 	bl	8003234 <HAL_TIM_MspPostInit>

}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	@ 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	200008ac 	.word	0x200008ac
 80029c0:	40014000 	.word	0x40014000

080029c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029c8:	4b11      	ldr	r3, [pc, #68]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029ca:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <MX_USART1_UART_Init+0x50>)
 80029cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80029d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029e8:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029ea:	220c      	movs	r2, #12
 80029ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	4b08      	ldr	r3, [pc, #32]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029fa:	4805      	ldr	r0, [pc, #20]	@ (8002a10 <MX_USART1_UART_Init+0x4c>)
 80029fc:	f005 fa58 	bl	8007eb0 <HAL_UART_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a06:	f000 f987 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200008f4 	.word	0x200008f4
 8002a14:	40011000 	.word	0x40011000

08002a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <MX_DMA_Init+0x3c>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a0b      	ldr	r2, [pc, #44]	@ (8002a54 <MX_DMA_Init+0x3c>)
 8002a28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <MX_DMA_Init+0x3c>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2038      	movs	r0, #56	@ 0x38
 8002a40:	f001 fce9 	bl	8004416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a44:	2038      	movs	r0, #56	@ 0x38
 8002a46:	f001 fd02 	bl	800444e <HAL_NVIC_EnableIRQ>

}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800

08002a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5e:	f107 030c 	add.w	r3, r7, #12
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	605a      	str	r2, [r3, #4]
 8002a68:	609a      	str	r2, [r3, #8]
 8002a6a:	60da      	str	r2, [r3, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	4a30      	ldr	r2, [pc, #192]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9a:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab6:	4b20      	ldr	r3, [pc, #128]	@ (8002b38 <MX_GPIO_Init+0xe0>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f24f 31c8 	movw	r1, #62408	@ 0xf3c8
 8002ac8:	481c      	ldr	r0, [pc, #112]	@ (8002b3c <MX_GPIO_Init+0xe4>)
 8002aca:	f002 f9e7 	bl	8004e9c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8002ad4:	481a      	ldr	r0, [pc, #104]	@ (8002b40 <MX_GPIO_Init+0xe8>)
 8002ad6:	f002 f9e1 	bl	8004e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	4619      	mov	r1, r3
 8002aee:	4813      	ldr	r0, [pc, #76]	@ (8002b3c <MX_GPIO_Init+0xe4>)
 8002af0:	f002 f838 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002af4:	f24f 33c8 	movw	r3, #62408	@ 0xf3c8
 8002af8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afa:	2301      	movs	r3, #1
 8002afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	f107 030c 	add.w	r3, r7, #12
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	480b      	ldr	r0, [pc, #44]	@ (8002b3c <MX_GPIO_Init+0xe4>)
 8002b0e:	f002 f829 	bl	8004b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002b12:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <MX_GPIO_Init+0xe8>)
 8002b2c:	f002 f81a 	bl	8004b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	40020000 	.word	0x40020000

08002b44 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	//promedio_adc();
	HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 8002b4c:	2205      	movs	r2, #5
 8002b4e:	4904      	ldr	r1, [pc, #16]	@ (8002b60 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <HAL_ADC_ConvCpltCallback+0x20>)
 8002b52:	f000 ffd1 	bl	8003af8 <HAL_ADC_Start_DMA>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000944 	.word	0x20000944
 8002b64:	2000069c 	.word	0x2000069c

08002b68 <CDC_ReceiveCallBack>:



void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]

	memcpy(datosRX, Buf, Len);
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4805      	ldr	r0, [pc, #20]	@ (8002b8c <CDC_ReceiveCallBack+0x24>)
 8002b78:	f00a fa8b 	bl	800d092 <memcpy>
    indexRX = Len;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	4b03      	ldr	r3, [pc, #12]	@ (8002b90 <CDC_ReceiveCallBack+0x28>)
 8002b82:	701a      	strb	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200009bc 	.word	0x200009bc
 8002b90:	200009b8 	.word	0x200009b8

08002b94 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af04      	add	r7, sp, #16
 8002b9a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f040 8095 	bne.w	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x13e>

    	pulsos_izq_ = (int32_t)__HAL_TIM_GET_COUNTER(&htim5);
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bb2:	601a      	str	r2, [r3, #0]
        pulsos_der_ = (int32_t)__HAL_TIM_GET_COUNTER(&htim3);
 8002bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002bbe:	601a      	str	r2, [r3, #0]

        dif_izq = pulsos_izq_ - pulsos_izq_ant;
 8002bc0:	4b48      	ldr	r3, [pc, #288]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002bcc:	6013      	str	r3, [r2, #0]
        dif_der = pulsos_der_ - pulsos_der_ant;
 8002bce:	4b47      	ldr	r3, [pc, #284]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4b49      	ldr	r3, [pc, #292]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a48      	ldr	r2, [pc, #288]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002bda:	6013      	str	r3, [r2, #0]

        pulsos_izq_ant = pulsos_izq_;
 8002bdc:	4b41      	ldr	r3, [pc, #260]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a43      	ldr	r2, [pc, #268]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002be2:	6013      	str	r3, [r2, #0]
        pulsos_der_ant = pulsos_der_;
 8002be4:	4b41      	ldr	r3, [pc, #260]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a43      	ldr	r2, [pc, #268]	@ (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002bea:	6013      	str	r3, [r2, #0]

        contadorrr +=1;
 8002bec:	4b44      	ldr	r3, [pc, #272]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b42      	ldr	r3, [pc, #264]	@ (8002d00 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002bf8:	801a      	strh	r2, [r3, #0]

        updatePose(&pose, dif_izq, dif_der, prueba);
 8002bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	4940      	ldr	r1, [pc, #256]	@ (8002d04 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002c04:	edd1 7a00 	vldr	s15, [r1]
 8002c08:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	483e      	ldr	r0, [pc, #248]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c10:	f7ff f822 	bl	8001c58 <updatePose>



        if (act_proc == 1) {
 8002c14:	4b3d      	ldr	r3, [pc, #244]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d134      	bne.n	8002c86 <HAL_TIM_PeriodElapsedCallback+0xf2>
			float vel_deseada = actualizar_velocidad_trapezoidal(pose.avanceLineal);
 8002c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c1e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c22:	eeb0 0a67 	vmov.f32	s0, s15
 8002c26:	f7ff f9d7 	bl	8001fd8 <actualizar_velocidad_trapezoidal>
 8002c2a:	ed87 0a03 	vstr	s0, [r7, #12]
			int8_t val = (int8_t)conversor_mm_s((int32_t)vel_deseada); // Enviar velocidad deseada al controlador de motores
 8002c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c36:	ee17 0a90 	vmov	r0, s15
 8002c3a:	f000 fe31 	bl	80038a0 <conversor_mm_s>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	72fb      	strb	r3, [r7, #11]
			motores(val,val);
 8002c42:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002c46:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f8a7 	bl	8002da0 <motores>

			if (destino_alcanzado(pose.avanceLineal)) {
 8002c52:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c54:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c58:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5c:	f7ff fa60 	bl	8002120 <destino_alcanzado>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <HAL_TIM_PeriodElapsedCallback+0xf2>
				act_proc = 0; // Detener el proceso cuando se alcanza el destino
 8002c66:	4b29      	ldr	r3, [pc, #164]	@ (8002d0c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
				val = conversor_mm_s(0); // Detener los motores
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 fe17 	bl	80038a0 <conversor_mm_s>
 8002c72:	4603      	mov	r3, r0
 8002c74:	72fb      	strb	r3, [r7, #11]
				motores(val,val);
 8002c76:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8002c7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f88d 	bl	8002da0 <motores>
			}
		}


		sprintf(txt, ">dL:%.2f\n>dR:%.2f\n>vL:%.2f\n>vR:%.2f\n", dif_izq, dif_der, pose.velMotorL, pose.velMotorR);
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002c88:	681e      	ldr	r6, [r3, #0]
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc5f 	bl	8000558 <__aeabi_f2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc58 	bl	8000558 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002cb0:	e9cd 4500 	strd	r4, r5, [sp]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4632      	mov	r2, r6
 8002cb8:	4915      	ldr	r1, [pc, #84]	@ (8002d10 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002cba:	4816      	ldr	r0, [pc, #88]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cbc:	f00a f906 	bl	800cecc <siprintf>
		CDC_Transmit_FS(txt, strlen(txt));
 8002cc0:	4814      	ldr	r0, [pc, #80]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cc2:	f7fd fadd 	bl	8000280 <strlen>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4811      	ldr	r0, [pc, #68]	@ (8002d14 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002cce:	f008 ff91 	bl	800bbf4 <CDC_Transmit_FS>

    }
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	20000864 	.word	0x20000864
 8002ce4:	200009a0 	.word	0x200009a0
 8002ce8:	200007d4 	.word	0x200007d4
 8002cec:	200009a4 	.word	0x200009a4
 8002cf0:	200009a8 	.word	0x200009a8
 8002cf4:	200009b4 	.word	0x200009b4
 8002cf8:	200009ac 	.word	0x200009ac
 8002cfc:	200009b0 	.word	0x200009b0
 8002d00:	200009cc 	.word	0x200009cc
 8002d04:	20000220 	.word	0x20000220
 8002d08:	20000a54 	.word	0x20000a54
 8002d0c:	20000a50 	.word	0x20000a50
 8002d10:	0800f180 	.word	0x0800f180
 8002d14:	200009d0 	.word	0x200009d0

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <Error_Handler+0x8>

08002d24 <motoresInit>:
#include "motorDriver.h"
TIM_HandleTypeDef *timmotorGlobal;



void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal,uint32_t canal1){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

	timmotorGlobal = timmotor;
 8002d30:	4a19      	ldr	r2, [pc, #100]	@ (8002d98 <motoresInit+0x74>)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal);
 8002d36:	4b18      	ldr	r3, [pc, #96]	@ (8002d98 <motoresInit+0x74>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 f8d7 	bl	8006ef0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <motoresInit+0x74>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 f8d1 	bl	8006ef0 <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <motoresInit+0x74>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 8002d58:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <motoresInit+0x74>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2140      	movs	r1, #64	@ 0x40
 8002d66:	480d      	ldr	r0, [pc, #52]	@ (8002d9c <motoresInit+0x78>)
 8002d68:	f002 f898 	bl	8004e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2180      	movs	r1, #128	@ 0x80
 8002d70:	480a      	ldr	r0, [pc, #40]	@ (8002d9c <motoresInit+0x78>)
 8002d72:	f002 f893 	bl	8004e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 8002d76:	2200      	movs	r2, #0
 8002d78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d7c:	4807      	ldr	r0, [pc, #28]	@ (8002d9c <motoresInit+0x78>)
 8002d7e:	f002 f88d 	bl	8004e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d88:	4804      	ldr	r0, [pc, #16]	@ (8002d9c <motoresInit+0x78>)
 8002d8a:	f002 f887 	bl	8004e9c <HAL_GPIO_WritePin>

}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000a84 	.word	0x20000a84
 8002d9c:	40020400 	.word	0x40020400

08002da0 <motores>:
void motores(int8_t m1, int8_t m2){
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	460a      	mov	r2, r1
 8002daa:	71fb      	strb	r3, [r7, #7]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71bb      	strb	r3, [r7, #6]

	//Control m1
	if(m1 > 0){
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dd16      	ble.n	8002de6 <motores+0x46>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 8002db8:	2201      	movs	r2, #1
 8002dba:	2140      	movs	r1, #64	@ 0x40
 8002dbc:	484a      	ldr	r0, [pc, #296]	@ (8002ee8 <motores+0x148>)
 8002dbe:	f002 f86d 	bl	8004e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	@ 0x80
 8002dc6:	4848      	ldr	r0, [pc, #288]	@ (8002ee8 <motores+0x148>)
 8002dc8:	f002 f868 	bl	8004e9c <HAL_GPIO_WritePin>

		if(m1 > 100)m1 = 100;
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b64      	cmp	r3, #100	@ 0x64
 8002dd2:	dd01      	ble.n	8002dd8 <motores+0x38>
 8002dd4:	2364      	movs	r3, #100	@ 0x64
 8002dd6:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8002dd8:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <motores+0x14c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34
 8002de4:	e02d      	b.n	8002e42 <motores+0xa2>
	}
	else if(m1 < 0){
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	da1a      	bge.n	8002e24 <motores+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	483d      	ldr	r0, [pc, #244]	@ (8002ee8 <motores+0x148>)
 8002df4:	f002 f852 	bl	8004e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2180      	movs	r1, #128	@ 0x80
 8002dfc:	483a      	ldr	r0, [pc, #232]	@ (8002ee8 <motores+0x148>)
 8002dfe:	f002 f84d 	bl	8004e9c <HAL_GPIO_WritePin>
		m1 *= -1;
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	425b      	negs	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	71fb      	strb	r3, [r7, #7]

		if(m1 > 100)m1 = 100;
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	dd01      	ble.n	8002e16 <motores+0x76>
 8002e12:	2364      	movs	r3, #100	@ 0x64
 8002e14:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8002e16:	4b35      	ldr	r3, [pc, #212]	@ (8002eec <motores+0x14c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e22:	e00e      	b.n	8002e42 <motores+0xa2>
	}
	else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2140      	movs	r1, #64	@ 0x40
 8002e28:	482f      	ldr	r0, [pc, #188]	@ (8002ee8 <motores+0x148>)
 8002e2a:	f002 f837 	bl	8004e9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2180      	movs	r1, #128	@ 0x80
 8002e32:	482d      	ldr	r0, [pc, #180]	@ (8002ee8 <motores+0x148>)
 8002e34:	f002 f832 	bl	8004e9c <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR1 = 0;
 8002e38:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <motores+0x14c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	635a      	str	r2, [r3, #52]	@ 0x34
	}


	//Control m2
		if(m2 > 0){
 8002e42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	dd18      	ble.n	8002e7c <motores+0xdc>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e50:	4825      	ldr	r0, [pc, #148]	@ (8002ee8 <motores+0x148>)
 8002e52:	f002 f823 	bl	8004e9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,1);
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e5c:	4822      	ldr	r0, [pc, #136]	@ (8002ee8 <motores+0x148>)
 8002e5e:	f002 f81d 	bl	8004e9c <HAL_GPIO_WritePin>

			if(m2 > 100)m2 = 100;
 8002e62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e66:	2b64      	cmp	r3, #100	@ 0x64
 8002e68:	dd01      	ble.n	8002e6e <motores+0xce>
 8002e6a:	2364      	movs	r3, #100	@ 0x64
 8002e6c:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <motores+0x14c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38
		}




}
 8002e7a:	e031      	b.n	8002ee0 <motores+0x140>
		else if(m2 < 0){
 8002e7c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da1c      	bge.n	8002ebe <motores+0x11e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,1);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e8a:	4817      	ldr	r0, [pc, #92]	@ (8002ee8 <motores+0x148>)
 8002e8c:	f002 f806 	bl	8004e9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e96:	4814      	ldr	r0, [pc, #80]	@ (8002ee8 <motores+0x148>)
 8002e98:	f002 f800 	bl	8004e9c <HAL_GPIO_WritePin>
			m2 *= -1;
 8002e9c:	79bb      	ldrb	r3, [r7, #6]
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	71bb      	strb	r3, [r7, #6]
			if(m2 > 100)m2 = 100;
 8002ea4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002ea8:	2b64      	cmp	r3, #100	@ 0x64
 8002eaa:	dd01      	ble.n	8002eb0 <motores+0x110>
 8002eac:	2364      	movs	r3, #100	@ 0x64
 8002eae:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <motores+0x14c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002eba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ebc:	e010      	b.n	8002ee0 <motores+0x140>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ec4:	4808      	ldr	r0, [pc, #32]	@ (8002ee8 <motores+0x148>)
 8002ec6:	f001 ffe9 	bl	8004e9c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ed0:	4805      	ldr	r0, [pc, #20]	@ (8002ee8 <motores+0x148>)
 8002ed2:	f001 ffe3 	bl	8004e9c <HAL_GPIO_WritePin>
			timmotorGlobal->Instance->CCR2 = 0;
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <motores+0x14c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	20000a84 	.word	0x20000a84

08002ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efe:	4a0f      	ldr	r2, [pc, #60]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <HAL_MspInit+0x4c>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003050 <HAL_ADC_MspInit+0x110>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d171      	bne.n	8003046 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	4a3a      	ldr	r2, [pc, #232]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f72:	4b38      	ldr	r3, [pc, #224]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b34      	ldr	r3, [pc, #208]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a33      	ldr	r2, [pc, #204]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b2a      	ldr	r3, [pc, #168]	@ (8003054 <HAL_ADC_MspInit+0x114>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fb6:	23f0      	movs	r3, #240	@ 0xf0
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4823      	ldr	r0, [pc, #140]	@ (8003058 <HAL_ADC_MspInit+0x118>)
 8002fca:	f001 fdcb 	bl	8004b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	481e      	ldr	r0, [pc, #120]	@ (800305c <HAL_ADC_MspInit+0x11c>)
 8002fe2:	f001 fdbf 	bl	8004b64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <HAL_ADC_MspInit+0x124>)
 8002fea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ffe:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003000:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003004:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003006:	4b16      	ldr	r3, [pc, #88]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003008:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800300c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800300e:	4b14      	ldr	r3, [pc, #80]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800301c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800301e:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003020:	2200      	movs	r2, #0
 8003022:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003024:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003026:	2200      	movs	r2, #0
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800302a:	480d      	ldr	r0, [pc, #52]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 800302c:	f001 fa2a 	bl	8004484 <HAL_DMA_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003036:	f7ff fe6f 	bl	8002d18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a08      	ldr	r2, [pc, #32]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 800303e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003040:	4a07      	ldr	r2, [pc, #28]	@ (8003060 <HAL_ADC_MspInit+0x120>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003046:	bf00      	nop
 8003048:	3728      	adds	r7, #40	@ 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40012000 	.word	0x40012000
 8003054:	40023800 	.word	0x40023800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	200006e4 	.word	0x200006e4
 8003064:	40026410 	.word	0x40026410

08003068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2c      	ldr	r2, [pc, #176]	@ (8003128 <HAL_TIM_Base_MspInit+0xc0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	4a2a      	ldr	r2, [pc, #168]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6453      	str	r3, [r2, #68]	@ 0x44
 800308a:	4b28      	ldr	r3, [pc, #160]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003096:	e042      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a0:	d10e      	bne.n	80030c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b21      	ldr	r3, [pc, #132]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	4a20      	ldr	r2, [pc, #128]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
}
 80030be:	e02e      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_TIM_Base_MspInit+0xc8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d116      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	4b17      	ldr	r3, [pc, #92]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	4a16      	ldr	r2, [pc, #88]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030da:	4b14      	ldr	r3, [pc, #80]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	201e      	movs	r0, #30
 80030ec:	f001 f993 	bl	8004416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030f0:	201e      	movs	r0, #30
 80030f2:	f001 f9ac 	bl	800444e <HAL_NVIC_EnableIRQ>
}
 80030f6:	e012      	b.n	800311e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM9)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <HAL_TIM_Base_MspInit+0xcc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d10d      	bne.n	800311e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	4a08      	ldr	r2, [pc, #32]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003110:	6453      	str	r3, [r2, #68]	@ 0x44
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <HAL_TIM_Base_MspInit+0xc4>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	bf00      	nop
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40010000 	.word	0x40010000
 800312c:	40023800 	.word	0x40023800
 8003130:	40000800 	.word	0x40000800
 8003134:	40014000 	.word	0x40014000

08003138 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08c      	sub	sp, #48	@ 0x30
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d12c      	bne.n	80031b4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a30      	ldr	r2, [pc, #192]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b2e      	ldr	r3, [pc, #184]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	4a29      	ldr	r2, [pc, #164]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6313      	str	r3, [r2, #48]	@ 0x30
 8003186:	4b27      	ldr	r3, [pc, #156]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003192:	2330      	movs	r3, #48	@ 0x30
 8003194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a2:	2302      	movs	r3, #2
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f107 031c 	add.w	r3, r7, #28
 80031aa:	4619      	mov	r1, r3
 80031ac:	481e      	ldr	r0, [pc, #120]	@ (8003228 <HAL_TIM_Encoder_MspInit+0xf0>)
 80031ae:	f001 fcd9 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031b2:	e030      	b.n	8003216 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	@ (800322c <HAL_TIM_Encoder_MspInit+0xf4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d12b      	bne.n	8003216 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031c8:	f043 0308 	orr.w	r3, r3, #8
 80031cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_TIM_Encoder_MspInit+0xec>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031f6:	2303      	movs	r3, #3
 80031f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003206:	2302      	movs	r3, #2
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4807      	ldr	r0, [pc, #28]	@ (8003230 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003212:	f001 fca7 	bl	8004b64 <HAL_GPIO_Init>
}
 8003216:	bf00      	nop
 8003218:	3730      	adds	r7, #48	@ 0x30
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40000400 	.word	0x40000400
 8003224:	40023800 	.word	0x40023800
 8003228:	40020400 	.word	0x40020400
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40020000 	.word	0x40020000

08003234 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	@ (800329c <HAL_TIM_MspPostInit+0x68>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d11d      	bne.n	8003292 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	4a10      	ldr	r2, [pc, #64]	@ (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6313      	str	r3, [r2, #48]	@ 0x30
 8003266:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <HAL_TIM_MspPostInit+0x6c>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003272:	230c      	movs	r3, #12
 8003274:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003282:	2303      	movs	r3, #3
 8003284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 030c 	add.w	r3, r7, #12
 800328a:	4619      	mov	r1, r3
 800328c:	4805      	ldr	r0, [pc, #20]	@ (80032a4 <HAL_TIM_MspPostInit+0x70>)
 800328e:	f001 fc69 	bl	8004b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003292:	bf00      	nop
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40014000 	.word	0x40014000
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020000 	.word	0x40020000

080032a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_UART_MspInit+0x84>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d12c      	bne.n	8003324 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b18      	ldr	r3, [pc, #96]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d2:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032d4:	f043 0310 	orr.w	r3, r3, #16
 80032d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b11      	ldr	r3, [pc, #68]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	4a10      	ldr	r2, [pc, #64]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <HAL_UART_MspInit+0x88>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003302:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003310:	2303      	movs	r3, #3
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003314:	2307      	movs	r3, #7
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4619      	mov	r1, r3
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <HAL_UART_MspInit+0x8c>)
 8003320:	f001 fc20 	bl	8004b64 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003324:	bf00      	nop
 8003326:	3728      	adds	r7, #40	@ 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40011000 	.word	0x40011000
 8003330:	40023800 	.word	0x40023800
 8003334:	40020000 	.word	0x40020000

08003338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800333c:	bf00      	nop
 800333e:	e7fd      	b.n	800333c <NMI_Handler+0x4>

08003340 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003344:	bf00      	nop
 8003346:	e7fd      	b.n	8003344 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <MemManage_Handler+0x4>

08003350 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <BusFault_Handler+0x4>

08003358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <UsageFault_Handler+0x4>

08003360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800338e:	f000 fb2b 	bl	80039e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <TIM4_IRQHandler+0x10>)
 800339e:	f003 ff8b 	bl	80072b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2000081c 	.word	0x2000081c

080033ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <DMA2_Stream0_IRQHandler+0x10>)
 80033b2:	f001 f96d 	bl	8004690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200006e4 	.word	0x200006e4

080033c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <OTG_FS_IRQHandler+0x10>)
 80033c6:	f001 fec6 	bl	8005156 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20001fb4 	.word	0x20001fb4

080033d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return 1;
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_kill>:

int _kill(int pid, int sig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033ee:	f009 fe23 	bl	800d038 <__errno>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2216      	movs	r2, #22
 80033f6:	601a      	str	r2, [r3, #0]
  return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_exit>:

void _exit (int status)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800340c:	f04f 31ff 	mov.w	r1, #4294967295
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff ffe7 	bl	80033e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003416:	bf00      	nop
 8003418:	e7fd      	b.n	8003416 <_exit+0x12>

0800341a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	e00a      	b.n	8003442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800342c:	f3af 8000 	nop.w
 8003430:	4601      	mov	r1, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	60ba      	str	r2, [r7, #8]
 8003438:	b2ca      	uxtb	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	3301      	adds	r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	dbf0      	blt.n	800342c <_read+0x12>
  }

  return len;
 800344a:	687b      	ldr	r3, [r7, #4]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	e009      	b.n	800347a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	60ba      	str	r2, [r7, #8]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	dbf1      	blt.n	8003466 <_write+0x12>
  }
  return len;
 8003482:	687b      	ldr	r3, [r7, #4]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_close>:

int _close(int file)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003494:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b4:	605a      	str	r2, [r3, #4]
  return 0;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <_isatty>:

int _isatty(int file)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034cc:	2301      	movs	r3, #1
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <_sbrk+0x5c>)
 80034fe:	4b15      	ldr	r3, [pc, #84]	@ (8003554 <_sbrk+0x60>)
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003508:	4b13      	ldr	r3, [pc, #76]	@ (8003558 <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <_sbrk+0x64>)
 8003512:	4a12      	ldr	r2, [pc, #72]	@ (800355c <_sbrk+0x68>)
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003524:	f009 fd88 	bl	800d038 <__errno>
 8003528:	4603      	mov	r3, r0
 800352a:	220c      	movs	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e009      	b.n	8003548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <_sbrk+0x64>)
 8003544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20020000 	.word	0x20020000
 8003554:	00000400 	.word	0x00000400
 8003558:	20000a88 	.word	0x20000a88
 800355c:	20002808 	.word	0x20002808

08003560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003564:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <SystemInit+0x20>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	4a05      	ldr	r2, [pc, #20]	@ (8003580 <SystemInit+0x20>)
 800356c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <Encoder_1_Init>:





void Encoder_1_Init(TIM_HandleTypeDef *tim_encoder1){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	tim_encoder_1_Global = tim_encoder1;
 800358c:	4a06      	ldr	r2, [pc, #24]	@ (80035a8 <Encoder_1_Init+0x24>)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(tim_encoder_1_Global, TIM_CHANNEL_ALL);
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <Encoder_1_Init+0x24>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	213c      	movs	r1, #60	@ 0x3c
 8003598:	4618      	mov	r0, r3
 800359a:	f003 fdff 	bl	800719c <HAL_TIM_Encoder_Start>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000a8c 	.word	0x20000a8c

080035ac <Encoder_2_Init>:

void Encoder_2_Init(TIM_HandleTypeDef *tim_encoder2){
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	tim_encoder_2_Global = tim_encoder2;
 80035b4:	4a06      	ldr	r2, [pc, #24]	@ (80035d0 <Encoder_2_Init+0x24>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
	HAL_TIM_Encoder_Start(tim_encoder_2_Global, TIM_CHANNEL_ALL);
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <Encoder_2_Init+0x24>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	213c      	movs	r1, #60	@ 0x3c
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 fdeb 	bl	800719c <HAL_TIM_Encoder_Start>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000a90 	.word	0x20000a90

080035d4 <calculo_rpm>:


int16_t* calculo_rpm() {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0

    	contador_actual = (int32_t)tim_encoder_1_Global->Instance->CNT;
 80035da:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <calculo_rpm+0x128>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <calculo_rpm+0x12c>)
 80035e6:	601a      	str	r2, [r3, #0]
    	contador_actual_2 = (int32_t)tim_encoder_2_Global->Instance->CNT;
 80035e8:	4b46      	ldr	r3, [pc, #280]	@ (8003704 <calculo_rpm+0x130>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <calculo_rpm+0x134>)
 80035f4:	601a      	str	r2, [r3, #0]

        //contador_actual = (int32_t)__HAL_TIM_GET_COUNTER(&htim5);
        //contador_actual_2 = (int32_t)__HAL_TIM_GET_COUNTER(&htim3);

        pulsos_act = fabsf((float)contador_actual) / 1431.0f;
 80035f6:	4b42      	ldr	r3, [pc, #264]	@ (8003700 <calculo_rpm+0x12c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003602:	eeb0 7ae7 	vabs.f32	s14, s15
 8003606:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800370c <calculo_rpm+0x138>
 800360a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800360e:	4b40      	ldr	r3, [pc, #256]	@ (8003710 <calculo_rpm+0x13c>)
 8003610:	edc3 7a00 	vstr	s15, [r3]
        pulsos_act_2 = fabsf((float)contador_actual_2) / 1431.0f;
 8003614:	4b3c      	ldr	r3, [pc, #240]	@ (8003708 <calculo_rpm+0x134>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003620:	eeb0 7ae7 	vabs.f32	s14, s15
 8003624:	eddf 6a39 	vldr	s13, [pc, #228]	@ 800370c <calculo_rpm+0x138>
 8003628:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800362c:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <calculo_rpm+0x140>)
 800362e:	edc3 7a00 	vstr	s15, [r3]
        pulsos = pulsos_act - pulsos_ant;
 8003632:	4b37      	ldr	r3, [pc, #220]	@ (8003710 <calculo_rpm+0x13c>)
 8003634:	ed93 7a00 	vldr	s14, [r3]
 8003638:	4b37      	ldr	r3, [pc, #220]	@ (8003718 <calculo_rpm+0x144>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003642:	4b36      	ldr	r3, [pc, #216]	@ (800371c <calculo_rpm+0x148>)
 8003644:	edc3 7a00 	vstr	s15, [r3]
        pulsos_2 = pulsos_act_2 - pulsos_ant_2;
 8003648:	4b32      	ldr	r3, [pc, #200]	@ (8003714 <calculo_rpm+0x140>)
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	4b34      	ldr	r3, [pc, #208]	@ (8003720 <calculo_rpm+0x14c>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003658:	4b32      	ldr	r3, [pc, #200]	@ (8003724 <calculo_rpm+0x150>)
 800365a:	edc3 7a00 	vstr	s15, [r3]
        pulsos_ant = pulsos_act;
 800365e:	4b2c      	ldr	r3, [pc, #176]	@ (8003710 <calculo_rpm+0x13c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2d      	ldr	r2, [pc, #180]	@ (8003718 <calculo_rpm+0x144>)
 8003664:	6013      	str	r3, [r2, #0]
        pulsos_ant_2 = pulsos_act_2;
 8003666:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <calculo_rpm+0x140>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a2d      	ldr	r2, [pc, #180]	@ (8003720 <calculo_rpm+0x14c>)
 800366c:	6013      	str	r3, [r2, #0]

        float temp_rpm = pulsos * 600.0f;
 800366e:	4b2b      	ldr	r3, [pc, #172]	@ (800371c <calculo_rpm+0x148>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003728 <calculo_rpm+0x154>
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	edc7 7a01 	vstr	s15, [r7, #4]
		rpm = (int16_t)fabsf(temp_rpm);
 8003680:	edd7 7a01 	vldr	s15, [r7, #4]
 8003684:	eef0 7ae7 	vabs.f32	s15, s15
 8003688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800368c:	ee17 3a90 	vmov	r3, s15
 8003690:	b21a      	sxth	r2, r3
 8003692:	4b26      	ldr	r3, [pc, #152]	@ (800372c <calculo_rpm+0x158>)
 8003694:	801a      	strh	r2, [r3, #0]
		rpm_2 = (int16_t)fabsf(pulsos_2 * 600.0f);
 8003696:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <calculo_rpm+0x150>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8003728 <calculo_rpm+0x154>
 80036a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036a4:	eef0 7ae7 	vabs.f32	s15, s15
 80036a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ac:	ee17 3a90 	vmov	r3, s15
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003730 <calculo_rpm+0x15c>)
 80036b4:	801a      	strh	r2, [r3, #0]

        if (rpm < 0) rpm = 0;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <calculo_rpm+0x158>)
 80036b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da02      	bge.n	80036c6 <calculo_rpm+0xf2>
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <calculo_rpm+0x158>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	801a      	strh	r2, [r3, #0]
        rpm_f = aplicarFiltroFIR(rpm);
 80036c6:	4b19      	ldr	r3, [pc, #100]	@ (800372c <calculo_rpm+0x158>)
 80036c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fc4d 	bl	8000f6c <aplicarFiltroFIR>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b17      	ldr	r3, [pc, #92]	@ (8003734 <calculo_rpm+0x160>)
 80036d8:	801a      	strh	r2, [r3, #0]
        velocidades[0] = rpm_f;
 80036da:	4b16      	ldr	r3, [pc, #88]	@ (8003734 <calculo_rpm+0x160>)
 80036dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <calculo_rpm+0x164>)
 80036e2:	801a      	strh	r2, [r3, #0]
        vel(rpm_f);
 80036e4:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <calculo_rpm+0x160>)
 80036e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f828 	bl	8003740 <vel>


    return velocidades;
 80036f0:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <calculo_rpm+0x164>)
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000a8c 	.word	0x20000a8c
 8003700:	20000aac 	.word	0x20000aac
 8003704:	20000a90 	.word	0x20000a90
 8003708:	20000ab0 	.word	0x20000ab0
 800370c:	44b2e000 	.word	0x44b2e000
 8003710:	20000aa0 	.word	0x20000aa0
 8003714:	20000aa8 	.word	0x20000aa8
 8003718:	20000a9c 	.word	0x20000a9c
 800371c:	20000a94 	.word	0x20000a94
 8003720:	20000aa4 	.word	0x20000aa4
 8003724:	20000a98 	.word	0x20000a98
 8003728:	44160000 	.word	0x44160000
 800372c:	20000ab4 	.word	0x20000ab4
 8003730:	20000ab6 	.word	0x20000ab6
 8003734:	20000ab8 	.word	0x20000ab8
 8003738:	20000ac8 	.word	0x20000ac8
 800373c:	00000000 	.word	0x00000000

08003740 <vel>:

void vel(int16_t rpm_s) {
 8003740:	b5b0      	push	{r4, r5, r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	80fb      	strh	r3, [r7, #6]
    velocidad_mm_s = (3.1416 * diametro_rueda * rpm_s) / 60.0;
 800374a:	4b2f      	ldr	r3, [pc, #188]	@ (8003808 <vel+0xc8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fc ff02 	bl	8000558 <__aeabi_f2d>
 8003754:	a328      	add	r3, pc, #160	@ (adr r3, 80037f8 <vel+0xb8>)
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f7fc ff55 	bl	8000608 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4614      	mov	r4, r2
 8003764:	461d      	mov	r5, r3
 8003766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fc fee2 	bl	8000534 <__aeabi_i2d>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4620      	mov	r0, r4
 8003776:	4629      	mov	r1, r5
 8003778:	f7fc ff46 	bl	8000608 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4610      	mov	r0, r2
 8003782:	4619      	mov	r1, r3
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	4b20      	ldr	r3, [pc, #128]	@ (800380c <vel+0xcc>)
 800378a:	f7fd f867 	bl	800085c <__aeabi_ddiv>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fd f9e7 	bl	8000b68 <__aeabi_d2iz>
 800379a:	4603      	mov	r3, r0
 800379c:	b21a      	sxth	r2, r3
 800379e:	4b1c      	ldr	r3, [pc, #112]	@ (8003810 <vel+0xd0>)
 80037a0:	801a      	strh	r2, [r3, #0]
    velocidad_rad_s = (2 * 3.1416 * rpm_s) / 60.0;
 80037a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fec4 	bl	8000534 <__aeabi_i2d>
 80037ac:	a314      	add	r3, pc, #80	@ (adr r3, 8003800 <vel+0xc0>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc ff29 	bl	8000608 <__aeabi_dmul>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	4b12      	ldr	r3, [pc, #72]	@ (800380c <vel+0xcc>)
 80037c4:	f7fd f84a 	bl	800085c <__aeabi_ddiv>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	f7fd f9ca 	bl	8000b68 <__aeabi_d2iz>
 80037d4:	4603      	mov	r3, r0
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003814 <vel+0xd4>)
 80037da:	801a      	strh	r2, [r3, #0]

    velocidades[1] = velocidad_mm_s;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <vel+0xd0>)
 80037de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <vel+0xd8>)
 80037e4:	805a      	strh	r2, [r3, #2]
    velocidades[2] = velocidad_rad_s;
 80037e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <vel+0xd4>)
 80037e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80037ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003818 <vel+0xd8>)
 80037ee:	809a      	strh	r2, [r3, #4]
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bdb0      	pop	{r4, r5, r7, pc}
 80037f8:	2e48e8a7 	.word	0x2e48e8a7
 80037fc:	400921ff 	.word	0x400921ff
 8003800:	2e48e8a7 	.word	0x2e48e8a7
 8003804:	401921ff 	.word	0x401921ff
 8003808:	20000228 	.word	0x20000228
 800380c:	404e0000 	.word	0x404e0000
 8003810:	20000ac2 	.word	0x20000ac2
 8003814:	20000ac4 	.word	0x20000ac4
 8003818:	20000ac8 	.word	0x20000ac8

0800381c <conversor>:

int32_t conversor(float volt) {
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	ed87 0a01 	vstr	s0, [r7, #4]
    if (volt < 0) {
 8003826:	edd7 7a01 	vldr	s15, [r7, #4]
 800382a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	d503      	bpl.n	800383c <conversor+0x20>
        volt = 0;
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e023      	b.n	8003884 <conversor+0x68>
    } else if (volt > 7.5) {
 800383c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003840:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8003844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	dd02      	ble.n	8003854 <conversor+0x38>
        volt = 7.5;
 800384e:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <conversor+0x74>)
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	e017      	b.n	8003884 <conversor+0x68>
    } else {
        val_pwm = (int32_t)((volt * (-100)) / (7.5));
 8003854:	edd7 7a01 	vldr	s15, [r7, #4]
 8003858:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003894 <conversor+0x78>
 800385c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003860:	ee17 0a90 	vmov	r0, s15
 8003864:	f7fc fe78 	bl	8000558 <__aeabi_f2d>
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <conversor+0x7c>)
 800386e:	f7fc fff5 	bl	800085c <__aeabi_ddiv>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f975 	bl	8000b68 <__aeabi_d2iz>
 800387e:	4603      	mov	r3, r0
 8003880:	4a06      	ldr	r2, [pc, #24]	@ (800389c <conversor+0x80>)
 8003882:	6013      	str	r3, [r2, #0]
    }

    return val_pwm;
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <conversor+0x80>)
 8003886:	681b      	ldr	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40f00000 	.word	0x40f00000
 8003894:	c2c80000 	.word	0xc2c80000
 8003898:	401e0000 	.word	0x401e0000
 800389c:	20000abc 	.word	0x20000abc

080038a0 <conversor_mm_s>:

int16_t conversor_mm_s(int32_t velocidad) {
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
    if (velocidad > 702) {
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f240 22be 	movw	r2, #702	@ 0x2be
 80038ae:	4293      	cmp	r3, r2
 80038b0:	dd02      	ble.n	80038b8 <conversor_mm_s+0x18>
        velocidad = 702;
 80038b2:	f240 23be 	movw	r3, #702	@ 0x2be
 80038b6:	607b      	str	r3, [r7, #4]
    }
    pwm_mm = ((velocidad * 100) / 702) * (-1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2264      	movs	r2, #100	@ 0x64
 80038bc:	fb02 f303 	mul.w	r3, r2, r3
 80038c0:	4a09      	ldr	r2, [pc, #36]	@ (80038e8 <conversor_mm_s+0x48>)
 80038c2:	fb82 1203 	smull	r1, r2, r2, r3
 80038c6:	441a      	add	r2, r3
 80038c8:	1252      	asrs	r2, r2, #9
 80038ca:	17db      	asrs	r3, r3, #31
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	b21a      	sxth	r2, r3
 80038d0:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <conversor_mm_s+0x4c>)
 80038d2:	801a      	strh	r2, [r3, #0]

    return pwm_mm;
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <conversor_mm_s+0x4c>)
 80038d6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	bab65611 	.word	0xbab65611
 80038ec:	20000ac0 	.word	0x20000ac0

080038f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80038f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80038f4:	f7ff fe34 	bl	8003560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f8:	480c      	ldr	r0, [pc, #48]	@ (800392c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038fa:	490d      	ldr	r1, [pc, #52]	@ (8003930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003900:	e002      	b.n	8003908 <LoopCopyDataInit>

08003902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003906:	3304      	adds	r3, #4

08003908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800390c:	d3f9      	bcc.n	8003902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390e:	4a0a      	ldr	r2, [pc, #40]	@ (8003938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003910:	4c0a      	ldr	r4, [pc, #40]	@ (800393c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003914:	e001      	b.n	800391a <LoopFillZerobss>

08003916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003918:	3204      	adds	r2, #4

0800391a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800391c:	d3fb      	bcc.n	8003916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800391e:	f009 fb91 	bl	800d044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003922:	f7fe fc23 	bl	800216c <main>
  bx  lr    
 8003926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800392c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003930:	200004ec 	.word	0x200004ec
  ldr r2, =_sidata
 8003934:	0800f590 	.word	0x0800f590
  ldr r2, =_sbss
 8003938:	200004ec 	.word	0x200004ec
  ldr r4, =_ebss
 800393c:	20002804 	.word	0x20002804

08003940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003940:	e7fe      	b.n	8003940 <ADC_IRQHandler>
	...

08003944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003948:	4b0e      	ldr	r3, [pc, #56]	@ (8003984 <HAL_Init+0x40>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0d      	ldr	r2, [pc, #52]	@ (8003984 <HAL_Init+0x40>)
 800394e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_Init+0x40>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0a      	ldr	r2, [pc, #40]	@ (8003984 <HAL_Init+0x40>)
 800395a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800395e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003960:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_Init+0x40>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a07      	ldr	r2, [pc, #28]	@ (8003984 <HAL_Init+0x40>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800396c:	2003      	movs	r0, #3
 800396e:	f000 fd47 	bl	8004400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003972:	200f      	movs	r0, #15
 8003974:	f000 f808 	bl	8003988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003978:	f7ff faba 	bl	8002ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00

08003988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003990:	4b12      	ldr	r3, [pc, #72]	@ (80039dc <HAL_InitTick+0x54>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_InitTick+0x58>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4619      	mov	r1, r3
 800399a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800399e:	fbb3 f3f1 	udiv	r3, r3, r1
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fd5f 	bl	800446a <HAL_SYSTICK_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e00e      	b.n	80039d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d80a      	bhi.n	80039d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039bc:	2200      	movs	r2, #0
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	f04f 30ff 	mov.w	r0, #4294967295
 80039c4:	f000 fd27 	bl	8004416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039c8:	4a06      	ldr	r2, [pc, #24]	@ (80039e4 <HAL_InitTick+0x5c>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	e000      	b.n	80039d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000224 	.word	0x20000224
 80039e0:	20000230 	.word	0x20000230
 80039e4:	2000022c 	.word	0x2000022c

080039e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039ec:	4b06      	ldr	r3, [pc, #24]	@ (8003a08 <HAL_IncTick+0x20>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <HAL_IncTick+0x24>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4413      	add	r3, r2
 80039f8:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <HAL_IncTick+0x24>)
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000230 	.word	0x20000230
 8003a0c:	20000ad0 	.word	0x20000ad0

08003a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  return uwTick;
 8003a14:	4b03      	ldr	r3, [pc, #12]	@ (8003a24 <HAL_GetTick+0x14>)
 8003a16:	681b      	ldr	r3, [r3, #0]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000ad0 	.word	0x20000ad0

08003a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff ffee 	bl	8003a10 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a40:	d005      	beq.n	8003a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a42:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <HAL_Delay+0x44>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a4e:	bf00      	nop
 8003a50:	f7ff ffde 	bl	8003a10 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d8f7      	bhi.n	8003a50 <HAL_Delay+0x28>
  {
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000230 	.word	0x20000230

08003a70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e033      	b.n	8003aee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fa56 	bl	8002f40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ab6:	f023 0302 	bic.w	r3, r3, #2
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa4e 	bl	8003f64 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	f023 0303 	bic.w	r3, r3, #3
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ade:	e001      	b.n	8003ae4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_Start_DMA+0x1e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e0ce      	b.n	8003cb4 <HAL_ADC_Start_DMA+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d018      	beq.n	8003b5e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0201 	orr.w	r2, r2, #1
 8003b3a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8003cbc <HAL_ADC_Start_DMA+0x1c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a5f      	ldr	r2, [pc, #380]	@ (8003cc0 <HAL_ADC_Start_DMA+0x1c8>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0c9a      	lsrs	r2, r3, #18
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b50:	e002      	b.n	8003b58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f9      	bne.n	8003b52 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6c:	d107      	bne.n	8003b7e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 8086 	bne.w	8003c9a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bcc:	d106      	bne.n	8003bdc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	f023 0206 	bic.w	r2, r3, #6
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bda:	e002      	b.n	8003be2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bea:	4b36      	ldr	r3, [pc, #216]	@ (8003cc4 <HAL_ADC_Start_DMA+0x1cc>)
 8003bec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf2:	4a35      	ldr	r2, [pc, #212]	@ (8003cc8 <HAL_ADC_Start_DMA+0x1d0>)
 8003bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ccc <HAL_ADC_Start_DMA+0x1d4>)
 8003bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c02:	4a33      	ldr	r2, [pc, #204]	@ (8003cd0 <HAL_ADC_Start_DMA+0x1d8>)
 8003c04:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003c1e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	334c      	adds	r3, #76	@ 0x4c
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f000 fcce 	bl	80045e0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d129      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	e020      	b.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a17      	ldr	r2, [pc, #92]	@ (8003cd4 <HAL_ADC_Start_DMA+0x1dc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d11b      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d114      	bne.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	e00b      	b.n	8003cb2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000224 	.word	0x20000224
 8003cc0:	431bde83 	.word	0x431bde83
 8003cc4:	40012300 	.word	0x40012300
 8003cc8:	0800415d 	.word	0x0800415d
 8003ccc:	08004217 	.word	0x08004217
 8003cd0:	08004233 	.word	0x08004233
 8003cd4:	40012000 	.word	0x40012000

08003cd8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1c>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e113      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x244>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b09      	cmp	r3, #9
 8003d2a:	d925      	bls.n	8003d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68d9      	ldr	r1, [r3, #12]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	3b1e      	subs	r3, #30
 8003d42:	2207      	movs	r2, #7
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43da      	mvns	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	400a      	ands	r2, r1
 8003d50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68d9      	ldr	r1, [r3, #12]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	4603      	mov	r3, r0
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4403      	add	r3, r0
 8003d6a:	3b1e      	subs	r3, #30
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e022      	b.n	8003dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43da      	mvns	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	400a      	ands	r2, r1
 8003d9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4618      	mov	r0, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4403      	add	r3, r0
 8003db4:	409a      	lsls	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d824      	bhi.n	8003e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	3b05      	subs	r3, #5
 8003dd8:	221f      	movs	r2, #31
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	400a      	ands	r2, r1
 8003de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	4618      	mov	r0, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	3b05      	subs	r3, #5
 8003e02:	fa00 f203 	lsl.w	r2, r0, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e0e:	e04c      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d824      	bhi.n	8003e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b23      	subs	r3, #35	@ 0x23
 8003e2a:	221f      	movs	r2, #31
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43da      	mvns	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	400a      	ands	r2, r1
 8003e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4618      	mov	r0, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	3b23      	subs	r3, #35	@ 0x23
 8003e54:	fa00 f203 	lsl.w	r2, r0, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e60:	e023      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	3b41      	subs	r3, #65	@ 0x41
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b41      	subs	r3, #65	@ 0x41
 8003e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eaa:	4b29      	ldr	r3, [pc, #164]	@ (8003f50 <HAL_ADC_ConfigChannel+0x250>)
 8003eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a28      	ldr	r2, [pc, #160]	@ (8003f54 <HAL_ADC_ConfigChannel+0x254>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10f      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1d8>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b12      	cmp	r3, #18
 8003ebe:	d10b      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f54 <HAL_ADC_ConfigChannel+0x254>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d12b      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x23a>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f58 <HAL_ADC_ConfigChannel+0x258>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d003      	beq.n	8003ef4 <HAL_ADC_ConfigChannel+0x1f4>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b11      	cmp	r3, #17
 8003ef2:	d122      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <HAL_ADC_ConfigChannel+0x258>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d111      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f16:	4b11      	ldr	r3, [pc, #68]	@ (8003f5c <HAL_ADC_ConfigChannel+0x25c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a11      	ldr	r2, [pc, #68]	@ (8003f60 <HAL_ADC_ConfigChannel+0x260>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	0c9a      	lsrs	r2, r3, #18
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f2c:	e002      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f9      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40012300 	.word	0x40012300
 8003f54:	40012000 	.word	0x40012000
 8003f58:	10000012 	.word	0x10000012
 8003f5c:	20000224 	.word	0x20000224
 8003f60:	431bde83 	.word	0x431bde83

08003f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6c:	4b79      	ldr	r3, [pc, #484]	@ (8004154 <ADC_Init+0x1f0>)
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	021a      	lsls	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6899      	ldr	r1, [r3, #8]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68da      	ldr	r2, [r3, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	4a58      	ldr	r2, [pc, #352]	@ (8004158 <ADC_Init+0x1f4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d022      	beq.n	8004042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800400a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800402c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	430a      	orrs	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e00f      	b.n	8004062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004060:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0202 	bic.w	r2, r2, #2
 8004070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	7e1b      	ldrb	r3, [r3, #24]
 800407c:	005a      	lsls	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800409e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80040ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	3b01      	subs	r3, #1
 80040bc:	035a      	lsls	r2, r3, #13
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	e007      	b.n	80040d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	051a      	lsls	r2, r3, #20
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800410c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6899      	ldr	r1, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800411a:	025a      	lsls	r2, r3, #9
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	029a      	lsls	r2, r3, #10
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40012300 	.word	0x40012300
 8004158:	0f000001 	.word	0x0f000001

0800415c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004172:	2b00      	cmp	r3, #0
 8004174:	d13c      	bne.n	80041f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d12b      	bne.n	80041e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004194:	2b00      	cmp	r3, #0
 8004196:	d127      	bne.n	80041e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d006      	beq.n	80041b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d119      	bne.n	80041e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0220 	bic.w	r2, r2, #32
 80041c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7fe fcab 	bl	8002b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ee:	e00e      	b.n	800420e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7ff fd75 	bl	8003cec <HAL_ADC_ErrorCallback>
}
 8004202:	e004      	b.n	800420e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fd57 	bl	8003cd8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2240      	movs	r2, #64	@ 0x40
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f043 0204 	orr.w	r2, r3, #4
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fd4a 	bl	8003cec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004270:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800427c:	4013      	ands	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800428c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004292:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	60d3      	str	r3, [r2, #12]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	f003 0307 	and.w	r3, r3, #7
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	db0b      	blt.n	80042ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	f003 021f 	and.w	r2, r3, #31
 80042dc:	4907      	ldr	r1, [pc, #28]	@ (80042fc <__NVIC_EnableIRQ+0x38>)
 80042de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	2001      	movs	r0, #1
 80042e6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000e100 	.word	0xe000e100

08004300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	db0a      	blt.n	800432a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	490c      	ldr	r1, [pc, #48]	@ (800434c <__NVIC_SetPriority+0x4c>)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	0112      	lsls	r2, r2, #4
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	440b      	add	r3, r1
 8004324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004328:	e00a      	b.n	8004340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4908      	ldr	r1, [pc, #32]	@ (8004350 <__NVIC_SetPriority+0x50>)
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	f003 030f 	and.w	r3, r3, #15
 8004336:	3b04      	subs	r3, #4
 8004338:	0112      	lsls	r2, r2, #4
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	440b      	add	r3, r1
 800433e:	761a      	strb	r2, [r3, #24]
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000e100 	.word	0xe000e100
 8004350:	e000ed00 	.word	0xe000ed00

08004354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004354:	b480      	push	{r7}
 8004356:	b089      	sub	sp, #36	@ 0x24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f1c3 0307 	rsb	r3, r3, #7
 800436e:	2b04      	cmp	r3, #4
 8004370:	bf28      	it	cs
 8004372:	2304      	movcs	r3, #4
 8004374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3304      	adds	r3, #4
 800437a:	2b06      	cmp	r3, #6
 800437c:	d902      	bls.n	8004384 <NVIC_EncodePriority+0x30>
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3b03      	subs	r3, #3
 8004382:	e000      	b.n	8004386 <NVIC_EncodePriority+0x32>
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	401a      	ands	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800439c:	f04f 31ff 	mov.w	r1, #4294967295
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	fa01 f303 	lsl.w	r3, r1, r3
 80043a6:	43d9      	mvns	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	4313      	orrs	r3, r2
         );
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3724      	adds	r7, #36	@ 0x24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043cc:	d301      	bcc.n	80043d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00f      	b.n	80043f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043d2:	4a0a      	ldr	r2, [pc, #40]	@ (80043fc <SysTick_Config+0x40>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043da:	210f      	movs	r1, #15
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295
 80043e0:	f7ff ff8e 	bl	8004300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <SysTick_Config+0x40>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ea:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <SysTick_Config+0x40>)
 80043ec:	2207      	movs	r2, #7
 80043ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	e000e010 	.word	0xe000e010

08004400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff ff29 	bl	8004260 <__NVIC_SetPriorityGrouping>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004428:	f7ff ff3e 	bl	80042a8 <__NVIC_GetPriorityGrouping>
 800442c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	6978      	ldr	r0, [r7, #20]
 8004434:	f7ff ff8e 	bl	8004354 <NVIC_EncodePriority>
 8004438:	4602      	mov	r2, r0
 800443a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800443e:	4611      	mov	r1, r2
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff ff5d 	bl	8004300 <__NVIC_SetPriority>
}
 8004446:	bf00      	nop
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff ff31 	bl	80042c4 <__NVIC_EnableIRQ>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b082      	sub	sp, #8
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff ffa2 	bl	80043bc <SysTick_Config>
 8004478:	4603      	mov	r3, r0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7ff fabe 	bl	8003a10 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e099      	b.n	80045d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c0:	e00f      	b.n	80044e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044c2:	f7ff faa5 	bl	8003a10 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d908      	bls.n	80044e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2203      	movs	r2, #3
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e078      	b.n	80045d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e8      	bne.n	80044c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4b38      	ldr	r3, [pc, #224]	@ (80045dc <HAL_DMA_Init+0x158>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800450e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800451a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	2b04      	cmp	r3, #4
 800453a:	d107      	bne.n	800454c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004544:	4313      	orrs	r3, r2
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0307 	bic.w	r3, r3, #7
 8004562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	2b04      	cmp	r3, #4
 8004574:	d117      	bne.n	80045a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa6f 	bl	8004a6c <DMA_CheckFifoParam>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2240      	movs	r2, #64	@ 0x40
 8004598:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80045a2:	2301      	movs	r3, #1
 80045a4:	e016      	b.n	80045d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa26 	bl	8004a00 <DMA_CalcBaseAndBitshift>
 80045b4:	4603      	mov	r3, r0
 80045b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045bc:	223f      	movs	r2, #63	@ 0x3f
 80045be:	409a      	lsls	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	f010803f 	.word	0xf010803f

080045e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_DMA_Start_IT+0x26>
 8004602:	2302      	movs	r3, #2
 8004604:	e040      	b.n	8004688 <HAL_DMA_Start_IT+0xa8>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d12f      	bne.n	800467a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f9b8 	bl	80049a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	223f      	movs	r2, #63	@ 0x3f
 800463a:	409a      	lsls	r2, r3
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0216 	orr.w	r2, r2, #22
 800464e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e005      	b.n	8004686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004682:	2302      	movs	r3, #2
 8004684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800469c:	4b8e      	ldr	r3, [pc, #568]	@ (80048d8 <HAL_DMA_IRQHandler+0x248>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a8e      	ldr	r2, [pc, #568]	@ (80048dc <HAL_DMA_IRQHandler+0x24c>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ba:	2208      	movs	r2, #8
 80046bc:	409a      	lsls	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d01a      	beq.n	80046fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0204 	bic.w	r2, r2, #4
 80046e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e8:	2208      	movs	r2, #8
 80046ea:	409a      	lsls	r2, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d012      	beq.n	8004732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800471e:	2201      	movs	r2, #1
 8004720:	409a      	lsls	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	f043 0202 	orr.w	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2204      	movs	r2, #4
 8004738:	409a      	lsls	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00b      	beq.n	8004768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	2204      	movs	r2, #4
 8004756:	409a      	lsls	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	2210      	movs	r2, #16
 800476e:	409a      	lsls	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d043      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d03c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478a:	2210      	movs	r2, #16
 800478c:	409a      	lsls	r2, r3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d018      	beq.n	80047d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d024      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
 80047be:	e01f      	b.n	8004800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	4798      	blx	r3
 80047d0:	e016      	b.n	8004800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d107      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0208 	bic.w	r2, r2, #8
 80047ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004804:	2220      	movs	r2, #32
 8004806:	409a      	lsls	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 808f 	beq.w	8004930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8087 	beq.w	8004930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004826:	2220      	movs	r2, #32
 8004828:	409a      	lsls	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b05      	cmp	r3, #5
 8004838:	d136      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0216 	bic.w	r2, r2, #22
 8004848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_DMA_IRQHandler+0x1da>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0208 	bic.w	r2, r2, #8
 8004878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800487e:	223f      	movs	r2, #63	@ 0x3f
 8004880:	409a      	lsls	r2, r3
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d07e      	beq.n	800499c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
        }
        return;
 80048a6:	e079      	b.n	800499c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01d      	beq.n	80048f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10d      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d031      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
 80048d4:	e02c      	b.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
 80048d6:	bf00      	nop
 80048d8:	20000224 	.word	0x20000224
 80048dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d023      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e01e      	b.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10f      	bne.n	8004920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0210 	bic.w	r2, r2, #16
 800490e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004934:	2b00      	cmp	r3, #0
 8004936:	d032      	beq.n	800499e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d022      	beq.n	800498a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2205      	movs	r2, #5
 8004948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	3301      	adds	r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	d307      	bcc.n	8004978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f2      	bne.n	800495c <HAL_DMA_IRQHandler+0x2cc>
 8004976:	e000      	b.n	800497a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
 800499a:	e000      	b.n	800499e <HAL_DMA_IRQHandler+0x30e>
        return;
 800499c:	bf00      	nop
    }
  }
}
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b40      	cmp	r3, #64	@ 0x40
 80049d0:	d108      	bne.n	80049e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049e2:	e007      	b.n	80049f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	60da      	str	r2, [r3, #12]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3b10      	subs	r3, #16
 8004a10:	4a14      	ldr	r2, [pc, #80]	@ (8004a64 <DMA_CalcBaseAndBitshift+0x64>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	091b      	lsrs	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a1a:	4a13      	ldr	r2, [pc, #76]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x68>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d909      	bls.n	8004a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	1d1a      	adds	r2, r3, #4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a40:	e007      	b.n	8004a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	aaaaaaab 	.word	0xaaaaaaab
 8004a68:	0800f208 	.word	0x0800f208

08004a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d11f      	bne.n	8004ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d856      	bhi.n	8004b3a <DMA_CheckFifoParam+0xce>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <DMA_CheckFifoParam+0x28>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004aa5 	.word	0x08004aa5
 8004a98:	08004ab7 	.word	0x08004ab7
 8004a9c:	08004aa5 	.word	0x08004aa5
 8004aa0:	08004b3b 	.word	0x08004b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d046      	beq.n	8004b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab4:	e043      	b.n	8004b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004abe:	d140      	bne.n	8004b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac4:	e03d      	b.n	8004b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ace:	d121      	bne.n	8004b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d837      	bhi.n	8004b46 <DMA_CheckFifoParam+0xda>
 8004ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <DMA_CheckFifoParam+0x70>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004af3 	.word	0x08004af3
 8004ae4:	08004aed 	.word	0x08004aed
 8004ae8:	08004b05 	.word	0x08004b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e030      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d025      	beq.n	8004b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b02:	e022      	b.n	8004b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b0c:	d11f      	bne.n	8004b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b12:	e01c      	b.n	8004b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d903      	bls.n	8004b22 <DMA_CheckFifoParam+0xb6>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d003      	beq.n	8004b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b20:	e018      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	73fb      	strb	r3, [r7, #15]
      break;
 8004b26:	e015      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00e      	beq.n	8004b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e00b      	b.n	8004b52 <DMA_CheckFifoParam+0xe6>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e00a      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e008      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b42:	bf00      	nop
 8004b44:	e006      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
 8004b48:	e004      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <DMA_CheckFifoParam+0xe8>
      break;
 8004b52:	bf00      	nop
    }
  } 
  
  return status; 
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop

08004b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	@ 0x24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	e159      	b.n	8004e34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b80:	2201      	movs	r2, #1
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	f040 8148 	bne.w	8004e2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d005      	beq.n	8004bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d130      	bne.n	8004c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	68da      	ldr	r2, [r3, #12]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bec:	2201      	movs	r2, #1
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0201 	and.w	r2, r3, #1
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d017      	beq.n	8004c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	2203      	movs	r2, #3
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d123      	bne.n	8004ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	08da      	lsrs	r2, r3, #3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3208      	adds	r2, #8
 8004c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	220f      	movs	r2, #15
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	08da      	lsrs	r2, r3, #3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3208      	adds	r2, #8
 8004ca2:	69b9      	ldr	r1, [r7, #24]
 8004ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	2203      	movs	r2, #3
 8004cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0203 	and.w	r2, r3, #3
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a2 	beq.w	8004e2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	4b57      	ldr	r3, [pc, #348]	@ (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	4a56      	ldr	r2, [pc, #344]	@ (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cfa:	4b54      	ldr	r3, [pc, #336]	@ (8004e4c <HAL_GPIO_Init+0x2e8>)
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d06:	4a52      	ldr	r2, [pc, #328]	@ (8004e50 <HAL_GPIO_Init+0x2ec>)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	220f      	movs	r2, #15
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a49      	ldr	r2, [pc, #292]	@ (8004e54 <HAL_GPIO_Init+0x2f0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d019      	beq.n	8004d66 <HAL_GPIO_Init+0x202>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a48      	ldr	r2, [pc, #288]	@ (8004e58 <HAL_GPIO_Init+0x2f4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_GPIO_Init+0x1fe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a47      	ldr	r2, [pc, #284]	@ (8004e5c <HAL_GPIO_Init+0x2f8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00d      	beq.n	8004d5e <HAL_GPIO_Init+0x1fa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a46      	ldr	r2, [pc, #280]	@ (8004e60 <HAL_GPIO_Init+0x2fc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <HAL_GPIO_Init+0x1f6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a45      	ldr	r2, [pc, #276]	@ (8004e64 <HAL_GPIO_Init+0x300>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_GPIO_Init+0x1f2>
 8004d52:	2304      	movs	r3, #4
 8004d54:	e008      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d56:	2307      	movs	r3, #7
 8004d58:	e006      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e004      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d5e:	2302      	movs	r3, #2
 8004d60:	e002      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e000      	b.n	8004d68 <HAL_GPIO_Init+0x204>
 8004d66:	2300      	movs	r3, #0
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	f002 0203 	and.w	r2, r2, #3
 8004d6e:	0092      	lsls	r2, r2, #2
 8004d70:	4093      	lsls	r3, r2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d78:	4935      	ldr	r1, [pc, #212]	@ (8004e50 <HAL_GPIO_Init+0x2ec>)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	3302      	adds	r3, #2
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d86:	4b38      	ldr	r3, [pc, #224]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004daa:	4a2f      	ldr	r2, [pc, #188]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db0:	4b2d      	ldr	r3, [pc, #180]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	43db      	mvns	r3, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dd4:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dda:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4013      	ands	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e04:	4b18      	ldr	r3, [pc, #96]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e28:	4a0f      	ldr	r2, [pc, #60]	@ (8004e68 <HAL_GPIO_Init+0x304>)
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	f67f aea2 	bls.w	8004b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	3724      	adds	r7, #36	@ 0x24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40020000 	.word	0x40020000
 8004e58:	40020400 	.word	0x40020400
 8004e5c:	40020800 	.word	0x40020800
 8004e60:	40020c00 	.word	0x40020c00
 8004e64:	40021000 	.word	0x40021000
 8004e68:	40013c00 	.word	0x40013c00

08004e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	887b      	ldrh	r3, [r7, #2]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e001      	b.n	8004e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	807b      	strh	r3, [r7, #2]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004eac:	787b      	ldrb	r3, [r7, #1]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004eb8:	e003      	b.n	8004ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004eba:	887b      	ldrh	r3, [r7, #2]
 8004ebc:	041a      	lsls	r2, r3, #16
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	619a      	str	r2, [r3, #24]
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af02      	add	r7, sp, #8
 8004ed4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e101      	b.n	80050e4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f006 ffc2 	bl	800be84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2203      	movs	r2, #3
 8004f04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f0e:	d102      	bne.n	8004f16 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f003 fba3 	bl	8008666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	7c1a      	ldrb	r2, [r3, #16]
 8004f28:	f88d 2000 	strb.w	r2, [sp]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f30:	f003 fa82 	bl	8008438 <USB_CoreInit>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0ce      	b.n	80050e4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f003 fb9b 	bl	8008688 <USB_SetCurrentMode>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e0bf      	b.n	80050e4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
 8004f68:	e04a      	b.n	8005000 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f6a:	7bfa      	ldrb	r2, [r7, #15]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	3315      	adds	r3, #21
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f7e:	7bfa      	ldrb	r2, [r7, #15]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f92:	7bfa      	ldrb	r2, [r7, #15]
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	b298      	uxth	r0, r3
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	332e      	adds	r3, #46	@ 0x2e
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004faa:	7bfa      	ldrb	r2, [r7, #15]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	440b      	add	r3, r1
 8004fb8:	3318      	adds	r3, #24
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	331c      	adds	r3, #28
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	440b      	add	r3, r1
 8004fe0:	3320      	adds	r3, #32
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fe6:	7bfa      	ldrb	r2, [r7, #15]
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	3324      	adds	r3, #36	@ 0x24
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	791b      	ldrb	r3, [r3, #4]
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	429a      	cmp	r2, r3
 8005008:	d3af      	bcc.n	8004f6a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e044      	b.n	800509a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4613      	mov	r3, r2
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4413      	add	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	440b      	add	r3, r1
 8005034:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800503c:	7bfa      	ldrb	r2, [r7, #15]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800504e:	2200      	movs	r2, #0
 8005050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800507e:	7bfa      	ldrb	r2, [r7, #15]
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	440b      	add	r3, r1
 800508c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	3301      	adds	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	791b      	ldrb	r3, [r3, #4]
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d3b5      	bcc.n	8005010 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	7c1a      	ldrb	r2, [r3, #16]
 80050ac:	f88d 2000 	strb.w	r2, [sp]
 80050b0:	3304      	adds	r3, #4
 80050b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b4:	f003 fb34 	bl	8008720 <USB_DevInit>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e00c      	b.n	80050e4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f004 fb7e 	bl	80097de <USB_DevDisconnect>

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_PCD_Start+0x1c>
 8005104:	2302      	movs	r3, #2
 8005106:	e022      	b.n	800514e <HAL_PCD_Start+0x62>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d009      	beq.n	8005130 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005120:	2b01      	cmp	r3, #1
 8005122:	d105      	bne.n	8005130 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f003 fa85 	bl	8008644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f004 fb2c 	bl	800979c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005156:	b590      	push	{r4, r7, lr}
 8005158:	b08d      	sub	sp, #52	@ 0x34
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fbea 	bl	8009946 <USB_GetMode>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 848c 	bne.w	8005a92 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f004 fb4e 	bl	8009820 <USB_ReadInterrupts>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8482 	beq.w	8005a90 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f004 fb3b 	bl	8009820 <USB_ReadInterrupts>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f002 0202 	and.w	r2, r2, #2
 80051c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f004 fb29 	bl	8009820 <USB_ReadInterrupts>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d161      	bne.n	800529c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0210 	bic.w	r2, r2, #16
 80051e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	4613      	mov	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	3304      	adds	r3, #4
 8005206:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	0c5b      	lsrs	r3, r3, #17
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	2b02      	cmp	r3, #2
 8005212:	d124      	bne.n	800525e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800521a:	4013      	ands	r3, r2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d035      	beq.n	800528c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800522a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6a38      	ldr	r0, [r7, #32]
 8005234:	f004 f960 	bl	80094f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	091b      	lsrs	r3, r3, #4
 8005240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005244:	441a      	add	r2, r3
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005256:	441a      	add	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	615a      	str	r2, [r3, #20]
 800525c:	e016      	b.n	800528c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	0c5b      	lsrs	r3, r3, #17
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2b06      	cmp	r3, #6
 8005268:	d110      	bne.n	800528c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005270:	2208      	movs	r2, #8
 8005272:	4619      	mov	r1, r3
 8005274:	6a38      	ldr	r0, [r7, #32]
 8005276:	f004 f93f 	bl	80094f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	695a      	ldr	r2, [r3, #20]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005286:	441a      	add	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0210 	orr.w	r2, r2, #16
 800529a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f004 fabd 	bl	8009820 <USB_ReadInterrupts>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80052b0:	f040 80a7 	bne.w	8005402 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f004 fac2 	bl	8009846 <USB_ReadDevAllOutEpInterrupt>
 80052c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80052c4:	e099      	b.n	80053fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 808e 	beq.w	80053ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f004 fae6 	bl	80098ae <USB_ReadDevOutEPInterrupt>
 80052e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00c      	beq.n	8005308 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	2301      	movs	r3, #1
 80052fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fea4 	bl	8006050 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	2308      	movs	r3, #8
 8005322:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 ff7a 	bl	8006220 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005342:	461a      	mov	r2, r3
 8005344:	2310      	movs	r3, #16
 8005346:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d030      	beq.n	80053b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800535a:	2b80      	cmp	r3, #128	@ 0x80
 800535c:	d109      	bne.n	8005372 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800536c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005370:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005374:	4613      	mov	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	3304      	adds	r3, #4
 8005386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	78db      	ldrb	r3, [r3, #3]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d108      	bne.n	80053a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	b2db      	uxtb	r3, r3
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f006 fe6d 	bl	800c07c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	2302      	movs	r3, #2
 80053b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ca:	461a      	mov	r2, r3
 80053cc:	2320      	movs	r3, #32
 80053ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e6:	461a      	mov	r2, r3
 80053e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	3301      	adds	r3, #1
 80053f2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f af62 	bne.w	80052c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 fa0a 	bl	8009820 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005412:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005416:	f040 80db 	bne.w	80055d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f004 fa2b 	bl	800987a <USB_ReadDevAllInEpInterrupt>
 8005424:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800542a:	e0cd      	b.n	80055c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80c2 	beq.w	80055bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	4611      	mov	r1, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f004 fa51 	bl	80098ea <USB_ReadDevInEPInterrupt>
 8005448:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d057      	beq.n	8005504 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	2201      	movs	r2, #1
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	43db      	mvns	r3, r3
 800546e:	69f9      	ldr	r1, [r7, #28]
 8005470:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005474:	4013      	ands	r3, r2
 8005476:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005484:	461a      	mov	r2, r3
 8005486:	2301      	movs	r3, #1
 8005488:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	799b      	ldrb	r3, [r3, #6]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d132      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3320      	adds	r3, #32
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4403      	add	r3, r0
 80054b2:	331c      	adds	r3, #28
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4419      	add	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4403      	add	r3, r0
 80054c6:	3320      	adds	r3, #32
 80054c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d113      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x3a2>
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	3324      	adds	r3, #36	@ 0x24
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d108      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054f0:	461a      	mov	r2, r3
 80054f2:	2101      	movs	r1, #1
 80054f4:	f004 fa58 	bl	80099a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f006 fd41 	bl	800bf86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d008      	beq.n	8005520 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551a:	461a      	mov	r2, r3
 800551c:	2308      	movs	r3, #8
 800551e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d008      	beq.n	800553c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800552a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005536:	461a      	mov	r2, r3
 8005538:	2310      	movs	r3, #16
 800553a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d008      	beq.n	8005558 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005552:	461a      	mov	r2, r3
 8005554:	2340      	movs	r3, #64	@ 0x40
 8005556:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d023      	beq.n	80055aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005564:	6a38      	ldr	r0, [r7, #32]
 8005566:	f003 fa3f 	bl	80089e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800556a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	3310      	adds	r3, #16
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	3304      	adds	r3, #4
 800557c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d108      	bne.n	8005598 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800558c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f006 fd84 	bl	800c0a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a4:	461a      	mov	r2, r3
 80055a6:	2302      	movs	r3, #2
 80055a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fcbd 	bl	8005f36 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	3301      	adds	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f47f af2e 	bne.w	800542c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f004 f923 	bl	8009820 <USB_ReadInterrupts>
 80055da:	4603      	mov	r3, r0
 80055dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e4:	d122      	bne.n	800562c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005600:	2b01      	cmp	r3, #1
 8005602:	d108      	bne.n	8005616 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800560c:	2100      	movs	r1, #0
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fea4 	bl	800635c <HAL_PCDEx_LPM_Callback>
 8005614:	e002      	b.n	800561c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f006 fd22 	bl	800c060 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800562a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f004 f8f5 	bl	8009820 <USB_ReadInterrupts>
 8005636:	4603      	mov	r3, r0
 8005638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800563c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005640:	d112      	bne.n	8005668 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d102      	bne.n	8005658 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f006 fcde 	bl	800c014 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005666:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f004 f8d7 	bl	8009820 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800567c:	f040 80b7 	bne.w	80057ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800568e:	f023 0301 	bic.w	r3, r3, #1
 8005692:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2110      	movs	r1, #16
 800569a:	4618      	mov	r0, r3
 800569c:	f003 f9a4 	bl	80089e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a0:	2300      	movs	r3, #0
 80056a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a4:	e046      	b.n	8005734 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	461a      	mov	r2, r3
 80056b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80056d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80056da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e6:	461a      	mov	r2, r3
 80056e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005708:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800570c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005728:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800572c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005730:	3301      	adds	r3, #1
 8005732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	791b      	ldrb	r3, [r3, #4]
 8005738:	461a      	mov	r2, r3
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	4293      	cmp	r3, r2
 800573e:	d3b2      	bcc.n	80056a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005746:	69db      	ldr	r3, [r3, #28]
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005752:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	7bdb      	ldrb	r3, [r3, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d016      	beq.n	800578a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800576c:	f043 030b 	orr.w	r3, r3, #11
 8005770:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005782:	f043 030b 	orr.w	r3, r3, #11
 8005786:	6453      	str	r3, [r2, #68]	@ 0x44
 8005788:	e015      	b.n	80057b6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800579c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80057a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057b0:	f043 030b 	orr.w	r3, r3, #11
 80057b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057c4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80057c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057d8:	461a      	mov	r2, r3
 80057da:	f004 f8e5 	bl	80099a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80057ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f004 f814 	bl	8009820 <USB_ReadInterrupts>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005802:	d123      	bne.n	800584c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f004 f8aa 	bl	8009962 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f003 f961 	bl	8008ada <USB_GetDevSpeed>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681c      	ldr	r4, [r3, #0]
 8005824:	f001 f9ca 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8005828:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800582e:	461a      	mov	r2, r3
 8005830:	4620      	mov	r0, r4
 8005832:	f002 fe65 	bl	8008500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f006 fbcd 	bl	800bfd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695a      	ldr	r2, [r3, #20]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800584a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f003 ffe5 	bl	8009820 <USB_ReadInterrupts>
 8005856:	4603      	mov	r3, r0
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d10a      	bne.n	8005876 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f006 fbaa 	bl	800bfba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f002 0208 	and.w	r2, r2, #8
 8005874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f003 ffd0 	bl	8009820 <USB_ReadInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005886:	2b80      	cmp	r3, #128	@ 0x80
 8005888:	d123      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005896:	2301      	movs	r3, #1
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	e014      	b.n	80058c6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a0:	4613      	mov	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d105      	bne.n	80058c0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb0a 	bl	8005ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	3301      	adds	r3, #1
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	791b      	ldrb	r3, [r3, #4]
 80058ca:	461a      	mov	r2, r3
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d3e4      	bcc.n	800589c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f003 ffa2 	bl	8009820 <USB_ReadInterrupts>
 80058dc:	4603      	mov	r3, r0
 80058de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058e6:	d13c      	bne.n	8005962 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058e8:	2301      	movs	r3, #1
 80058ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ec:	e02b      	b.n	8005946 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	3318      	adds	r3, #24
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d115      	bne.n	8005940 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005914:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005916:	2b00      	cmp	r3, #0
 8005918:	da12      	bge.n	8005940 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	3317      	adds	r3, #23
 800592a:	2201      	movs	r2, #1
 800592c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005936:	b2db      	uxtb	r3, r3
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 faca 	bl	8005ed4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	3301      	adds	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	@ 0x24
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	791b      	ldrb	r3, [r3, #4]
 800594a:	461a      	mov	r2, r3
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	4293      	cmp	r3, r2
 8005950:	d3cd      	bcc.n	80058ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f003 ff5a 	bl	8009820 <USB_ReadInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005976:	d156      	bne.n	8005a26 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005978:	2301      	movs	r3, #1
 800597a:	627b      	str	r3, [r7, #36]	@ 0x24
 800597c:	e045      	b.n	8005a0a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800597e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005992:	4613      	mov	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d12e      	bne.n	8005a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da2b      	bge.n	8005a04 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80059b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059bc:	429a      	cmp	r2, r3
 80059be:	d121      	bne.n	8005a04 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a00:	6053      	str	r3, [r2, #4]
            break;
 8005a02:	e008      	b.n	8005a16 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	3301      	adds	r3, #1
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	791b      	ldrb	r3, [r3, #4]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d3b3      	bcc.n	800597e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f003 fef8 	bl	8009820 <USB_ReadInterrupts>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3a:	d10a      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f006 fb41 	bl	800c0c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695a      	ldr	r2, [r3, #20]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f003 fee2 	bl	8009820 <USB_ReadInterrupts>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d115      	bne.n	8005a92 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f006 fb31 	bl	800c0e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6859      	ldr	r1, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	e000      	b.n	8005a92 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005a90:	bf00      	nop
    }
  }
}
 8005a92:	3734      	adds	r7, #52	@ 0x34
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd90      	pop	{r4, r7, pc}

08005a98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_PCD_SetAddress+0x1a>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e012      	b.n	8005ad8 <HAL_PCD_SetAddress+0x40>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 fe41 	bl	8009750 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	70fb      	strb	r3, [r7, #3]
 8005af2:	460b      	mov	r3, r1
 8005af4:	803b      	strh	r3, [r7, #0]
 8005af6:	4613      	mov	r3, r2
 8005af8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da0f      	bge.n	8005b26 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	f003 020f 	and.w	r2, r3, #15
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	4413      	add	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	3310      	adds	r3, #16
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4413      	add	r3, r2
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	705a      	strb	r2, [r3, #1]
 8005b24:	e00f      	b.n	8005b46 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	f003 030f 	and.w	r3, r3, #15
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005b52:	883b      	ldrh	r3, [r7, #0]
 8005b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	78ba      	ldrb	r2, [r7, #2]
 8005b60:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b74:	78bb      	ldrb	r3, [r7, #2]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d102      	bne.n	8005b80 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_PCD_EP_Open+0xae>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e00e      	b.n	8005bac <HAL_PCD_EP_Open+0xcc>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f002 ffc1 	bl	8008b24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005baa:	7afb      	ldrb	r3, [r7, #11]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005bc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da0f      	bge.n	8005be8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	f003 020f 	and.w	r2, r3, #15
 8005bce:	4613      	mov	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	705a      	strb	r2, [r3, #1]
 8005be6:	e00f      	b.n	8005c08 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	4613      	mov	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3304      	adds	r3, #4
 8005c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_PCD_EP_Close+0x6e>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e00e      	b.n	8005c40 <HAL_PCD_EP_Close+0x8c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 ffff 	bl	8008c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607a      	str	r2, [r7, #4]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	460b      	mov	r3, r1
 8005c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c58:	7afb      	ldrb	r3, [r7, #11]
 8005c5a:	f003 020f 	and.w	r2, r3, #15
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	3304      	adds	r3, #4
 8005c70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2200      	movs	r2, #0
 8005c88:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c8a:	7afb      	ldrb	r3, [r7, #11]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	799b      	ldrb	r3, [r3, #6]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d102      	bne.n	8005ca4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	799b      	ldrb	r3, [r3, #6]
 8005cac:	461a      	mov	r2, r3
 8005cae:	6979      	ldr	r1, [r7, #20]
 8005cb0:	f003 f89c 	bl	8008dec <USB_EPStartXfer>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	f003 020f 	and.w	r2, r3, #15
 8005cd0:	6879      	ldr	r1, [r7, #4]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005ce0:	681b      	ldr	r3, [r3, #0]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b086      	sub	sp, #24
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfe:	7afb      	ldrb	r3, [r7, #11]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	3310      	adds	r3, #16
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4413      	add	r3, r2
 8005d12:	3304      	adds	r3, #4
 8005d14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2200      	movs	r2, #0
 8005d26:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d2e:	7afb      	ldrb	r3, [r7, #11]
 8005d30:	f003 030f 	and.w	r3, r3, #15
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	799b      	ldrb	r3, [r3, #6]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d102      	bne.n	8005d48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	799b      	ldrb	r3, [r3, #6]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	f003 f84a 	bl	8008dec <USB_EPStartXfer>

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	7912      	ldrb	r2, [r2, #4]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e04f      	b.n	8005e20 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da0f      	bge.n	8005da8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d88:	78fb      	ldrb	r3, [r7, #3]
 8005d8a:	f003 020f 	and.w	r2, r3, #15
 8005d8e:	4613      	mov	r3, r2
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	3310      	adds	r3, #16
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	705a      	strb	r2, [r3, #1]
 8005da6:	e00d      	b.n	8005dc4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005da8:	78fa      	ldrb	r2, [r7, #3]
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4413      	add	r3, r2
 8005dba:	3304      	adds	r3, #4
 8005dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_PCD_EP_SetStall+0x82>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e01d      	b.n	8005e20 <HAL_PCD_EP_SetStall+0xbe>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f003 fbd8 	bl	80095a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7999      	ldrb	r1, [r3, #6]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e10:	461a      	mov	r2, r3
 8005e12:	f003 fdc9 	bl	80099a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	7912      	ldrb	r2, [r2, #4]
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e042      	b.n	8005ecc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da0f      	bge.n	8005e6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 020f 	and.w	r2, r3, #15
 8005e54:	4613      	mov	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	705a      	strb	r2, [r3, #1]
 8005e6c:	e00f      	b.n	8005e8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	4613      	mov	r3, r2
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	4413      	add	r3, r2
 8005e84:	3304      	adds	r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_PCD_EP_ClrStall+0x86>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e00e      	b.n	8005ecc <HAL_PCD_EP_ClrStall+0xa4>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f003 fbe1 	bl	8009684 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da0c      	bge.n	8005f02 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	4613      	mov	r3, r2
 8005ef0:	00db      	lsls	r3, r3, #3
 8005ef2:	4413      	add	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	3310      	adds	r3, #16
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	4413      	add	r3, r2
 8005efc:	3304      	adds	r3, #4
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e00c      	b.n	8005f1c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	4613      	mov	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	3304      	adds	r3, #4
 8005f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f003 fa00 	bl	8009328 <USB_EPStopXfer>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08a      	sub	sp, #40	@ 0x28
 8005f3a:	af02      	add	r7, sp, #8
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	3310      	adds	r3, #16
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	695a      	ldr	r2, [r3, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d901      	bls.n	8005f6e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e06b      	b.n	8006046 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	691a      	ldr	r2, [r3, #16]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d902      	bls.n	8005f8a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3303      	adds	r3, #3
 8005f8e:	089b      	lsrs	r3, r3, #2
 8005f90:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f92:	e02a      	b.n	8005fea <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	69fa      	ldr	r2, [r7, #28]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d902      	bls.n	8005fb0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	3303      	adds	r3, #3
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68d9      	ldr	r1, [r3, #12]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	4603      	mov	r3, r0
 8005fcc:	6978      	ldr	r0, [r7, #20]
 8005fce:	f003 fa55 	bl	800947c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	441a      	add	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d809      	bhi.n	8006014 <PCD_WriteEmptyTxFifo+0xde>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	695a      	ldr	r2, [r3, #20]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006008:	429a      	cmp	r2, r3
 800600a:	d203      	bcs.n	8006014 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1bf      	bne.n	8005f94 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	429a      	cmp	r2, r3
 800601e:	d811      	bhi.n	8006044 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	2201      	movs	r2, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	43db      	mvns	r3, r3
 800603a:	6939      	ldr	r1, [r7, #16]
 800603c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006040:	4013      	ands	r3, r2
 8006042:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	333c      	adds	r3, #60	@ 0x3c
 8006068:	3304      	adds	r3, #4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	799b      	ldrb	r3, [r3, #6]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d17b      	bne.n	800617e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d015      	beq.n	80060bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	4a61      	ldr	r2, [pc, #388]	@ (8006218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	f240 80b9 	bls.w	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80b3 	beq.w	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b2:	461a      	mov	r2, r3
 80060b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060b8:	6093      	str	r3, [r2, #8]
 80060ba:	e0a7      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	2320      	movs	r3, #32
 80060d6:	6093      	str	r3, [r2, #8]
 80060d8:	e098      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f040 8093 	bne.w	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4a4b      	ldr	r2, [pc, #300]	@ (8006218 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d90f      	bls.n	800610e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006104:	461a      	mov	r2, r3
 8006106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800610a:	6093      	str	r3, [r2, #8]
 800610c:	e07e      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4413      	add	r3, r2
 8006120:	3304      	adds	r3, #4
 8006122:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	0159      	lsls	r1, r3, #5
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	440b      	add	r3, r1
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d114      	bne.n	8006170 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d109      	bne.n	8006162 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006158:	461a      	mov	r2, r3
 800615a:	2101      	movs	r1, #1
 800615c:	f003 fc24 	bl	80099a8 <USB_EP0_OutStart>
 8006160:	e006      	b.n	8006170 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	441a      	add	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	b2db      	uxtb	r3, r3
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f005 feea 	bl	800bf50 <HAL_PCD_DataOutStageCallback>
 800617c:	e046      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4a26      	ldr	r2, [pc, #152]	@ (800621c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d124      	bne.n	80061d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800619c:	461a      	mov	r2, r3
 800619e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061a2:	6093      	str	r3, [r2, #8]
 80061a4:	e032      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d008      	beq.n	80061c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	461a      	mov	r2, r3
 80061be:	2320      	movs	r3, #32
 80061c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f005 fec1 	bl	800bf50 <HAL_PCD_DataOutStageCallback>
 80061ce:	e01d      	b.n	800620c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d114      	bne.n	8006200 <PCD_EP_OutXfrComplete_int+0x1b0>
 80061d6:	6879      	ldr	r1, [r7, #4]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	4613      	mov	r3, r2
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d108      	bne.n	8006200 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80061f8:	461a      	mov	r2, r3
 80061fa:	2100      	movs	r1, #0
 80061fc:	f003 fbd4 	bl	80099a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	4619      	mov	r1, r3
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f005 fea2 	bl	800bf50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	4f54300a 	.word	0x4f54300a
 800621c:	4f54310a 	.word	0x4f54310a

08006220 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	333c      	adds	r3, #60	@ 0x3c
 8006238:	3304      	adds	r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a15      	ldr	r2, [pc, #84]	@ (80062a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d90e      	bls.n	8006274 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f005 fe59 	bl	800bf2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a0a      	ldr	r2, [pc, #40]	@ (80062a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d90c      	bls.n	800629c <PCD_EP_OutSetupPacket_int+0x7c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	799b      	ldrb	r3, [r3, #6]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d108      	bne.n	800629c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006294:	461a      	mov	r2, r3
 8006296:	2101      	movs	r1, #1
 8006298:	f003 fb86 	bl	80099a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	4f54300a 	.word	0x4f54300a

080062ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	460b      	mov	r3, r1
 80062b6:	70fb      	strb	r3, [r7, #3]
 80062b8:	4613      	mov	r3, r2
 80062ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80062ca:	883b      	ldrh	r3, [r7, #0]
 80062cc:	0419      	lsls	r1, r3, #16
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80062d8:	e028      	b.n	800632c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	4413      	add	r3, r2
 80062e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	e00d      	b.n	800630a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	3340      	adds	r3, #64	@ 0x40
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	3301      	adds	r3, #1
 8006308:	73fb      	strb	r3, [r7, #15]
 800630a:	7bfa      	ldrb	r2, [r7, #15]
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	3b01      	subs	r3, #1
 8006310:	429a      	cmp	r2, r3
 8006312:	d3ec      	bcc.n	80062ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006314:	883b      	ldrh	r3, [r7, #0]
 8006316:	0418      	lsls	r0, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6819      	ldr	r1, [r3, #0]
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	3b01      	subs	r3, #1
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4302      	orrs	r2, r0
 8006324:	3340      	adds	r3, #64	@ 0x40
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e267      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	2b00      	cmp	r3, #0
 8006390:	d075      	beq.n	800647e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006392:	4b88      	ldr	r3, [pc, #544]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b04      	cmp	r3, #4
 800639c:	d00c      	beq.n	80063b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800639e:	4b85      	ldr	r3, [pc, #532]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d112      	bne.n	80063d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063aa:	4b82      	ldr	r3, [pc, #520]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063b6:	d10b      	bne.n	80063d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b8:	4b7e      	ldr	r3, [pc, #504]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d05b      	beq.n	800647c <HAL_RCC_OscConfig+0x108>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d157      	bne.n	800647c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e242      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d8:	d106      	bne.n	80063e8 <HAL_RCC_OscConfig+0x74>
 80063da:	4b76      	ldr	r3, [pc, #472]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a75      	ldr	r2, [pc, #468]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e01d      	b.n	8006424 <HAL_RCC_OscConfig+0xb0>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063f0:	d10c      	bne.n	800640c <HAL_RCC_OscConfig+0x98>
 80063f2:	4b70      	ldr	r3, [pc, #448]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a6f      	ldr	r2, [pc, #444]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80063f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4b6d      	ldr	r3, [pc, #436]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a6c      	ldr	r2, [pc, #432]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e00b      	b.n	8006424 <HAL_RCC_OscConfig+0xb0>
 800640c:	4b69      	ldr	r3, [pc, #420]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a68      	ldr	r2, [pc, #416]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4b66      	ldr	r3, [pc, #408]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a65      	ldr	r2, [pc, #404]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 800641e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d013      	beq.n	8006454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800642c:	f7fd faf0 	bl	8003a10 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006434:	f7fd faec 	bl	8003a10 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b64      	cmp	r3, #100	@ 0x64
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e207      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006446:	4b5b      	ldr	r3, [pc, #364]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0f0      	beq.n	8006434 <HAL_RCC_OscConfig+0xc0>
 8006452:	e014      	b.n	800647e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006454:	f7fd fadc 	bl	8003a10 <HAL_GetTick>
 8006458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fd fad8 	bl	8003a10 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	@ 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e1f3      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646e:	4b51      	ldr	r3, [pc, #324]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f0      	bne.n	800645c <HAL_RCC_OscConfig+0xe8>
 800647a:	e000      	b.n	800647e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d063      	beq.n	8006552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800648a:	4b4a      	ldr	r3, [pc, #296]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006496:	4b47      	ldr	r3, [pc, #284]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d11c      	bne.n	80064dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a2:	4b44      	ldr	r3, [pc, #272]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d116      	bne.n	80064dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ae:	4b41      	ldr	r3, [pc, #260]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_RCC_OscConfig+0x152>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e1c7      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064c6:	4b3b      	ldr	r3, [pc, #236]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	00db      	lsls	r3, r3, #3
 80064d4:	4937      	ldr	r1, [pc, #220]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	e03a      	b.n	8006552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d020      	beq.n	8006526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064e4:	4b34      	ldr	r3, [pc, #208]	@ (80065b8 <HAL_RCC_OscConfig+0x244>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ea:	f7fd fa91 	bl	8003a10 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f2:	f7fd fa8d 	bl	8003a10 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e1a8      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006504:	4b2b      	ldr	r3, [pc, #172]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006510:	4b28      	ldr	r3, [pc, #160]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	4925      	ldr	r1, [pc, #148]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]
 8006524:	e015      	b.n	8006552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006526:	4b24      	ldr	r3, [pc, #144]	@ (80065b8 <HAL_RCC_OscConfig+0x244>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800652c:	f7fd fa70 	bl	8003a10 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006534:	f7fd fa6c 	bl	8003a10 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e187      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006546:	4b1b      	ldr	r3, [pc, #108]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d036      	beq.n	80065cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d016      	beq.n	8006594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006566:	4b15      	ldr	r3, [pc, #84]	@ (80065bc <HAL_RCC_OscConfig+0x248>)
 8006568:	2201      	movs	r2, #1
 800656a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800656c:	f7fd fa50 	bl	8003a10 <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006574:	f7fd fa4c 	bl	8003a10 <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e167      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <HAL_RCC_OscConfig+0x240>)
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0f0      	beq.n	8006574 <HAL_RCC_OscConfig+0x200>
 8006592:	e01b      	b.n	80065cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <HAL_RCC_OscConfig+0x248>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659a:	f7fd fa39 	bl	8003a10 <HAL_GetTick>
 800659e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065a0:	e00e      	b.n	80065c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a2:	f7fd fa35 	bl	8003a10 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d907      	bls.n	80065c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e150      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
 80065b4:	40023800 	.word	0x40023800
 80065b8:	42470000 	.word	0x42470000
 80065bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065c0:	4b88      	ldr	r3, [pc, #544]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c4:	f003 0302 	and.w	r3, r3, #2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1ea      	bne.n	80065a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8097 	beq.w	8006708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065da:	2300      	movs	r3, #0
 80065dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065de:	4b81      	ldr	r3, [pc, #516]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	4b7d      	ldr	r3, [pc, #500]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f2:	4a7c      	ldr	r2, [pc, #496]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065fa:	4b7a      	ldr	r3, [pc, #488]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006606:	2301      	movs	r3, #1
 8006608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800660a:	4b77      	ldr	r3, [pc, #476]	@ (80067e8 <HAL_RCC_OscConfig+0x474>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006612:	2b00      	cmp	r3, #0
 8006614:	d118      	bne.n	8006648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006616:	4b74      	ldr	r3, [pc, #464]	@ (80067e8 <HAL_RCC_OscConfig+0x474>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a73      	ldr	r2, [pc, #460]	@ (80067e8 <HAL_RCC_OscConfig+0x474>)
 800661c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006622:	f7fd f9f5 	bl	8003a10 <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800662a:	f7fd f9f1 	bl	8003a10 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e10c      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	4b6a      	ldr	r3, [pc, #424]	@ (80067e8 <HAL_RCC_OscConfig+0x474>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d106      	bne.n	800665e <HAL_RCC_OscConfig+0x2ea>
 8006650:	4b64      	ldr	r3, [pc, #400]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006654:	4a63      	ldr	r2, [pc, #396]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6713      	str	r3, [r2, #112]	@ 0x70
 800665c:	e01c      	b.n	8006698 <HAL_RCC_OscConfig+0x324>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	2b05      	cmp	r3, #5
 8006664:	d10c      	bne.n	8006680 <HAL_RCC_OscConfig+0x30c>
 8006666:	4b5f      	ldr	r3, [pc, #380]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	4a5e      	ldr	r2, [pc, #376]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 800666c:	f043 0304 	orr.w	r3, r3, #4
 8006670:	6713      	str	r3, [r2, #112]	@ 0x70
 8006672:	4b5c      	ldr	r3, [pc, #368]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006676:	4a5b      	ldr	r2, [pc, #364]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006678:	f043 0301 	orr.w	r3, r3, #1
 800667c:	6713      	str	r3, [r2, #112]	@ 0x70
 800667e:	e00b      	b.n	8006698 <HAL_RCC_OscConfig+0x324>
 8006680:	4b58      	ldr	r3, [pc, #352]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a57      	ldr	r2, [pc, #348]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006686:	f023 0301 	bic.w	r3, r3, #1
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
 800668c:	4b55      	ldr	r3, [pc, #340]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006690:	4a54      	ldr	r2, [pc, #336]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006692:	f023 0304 	bic.w	r3, r3, #4
 8006696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a0:	f7fd f9b6 	bl	8003a10 <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a6:	e00a      	b.n	80066be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a8:	f7fd f9b2 	bl	8003a10 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e0cb      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066be:	4b49      	ldr	r3, [pc, #292]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ee      	beq.n	80066a8 <HAL_RCC_OscConfig+0x334>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066cc:	f7fd f9a0 	bl	8003a10 <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fd f99c 	bl	8003a10 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0b5      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ea:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ee      	bne.n	80066d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d105      	bne.n	8006708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fc:	4b39      	ldr	r3, [pc, #228]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006700:	4a38      	ldr	r2, [pc, #224]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a1 	beq.w	8006854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006712:	4b34      	ldr	r3, [pc, #208]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 030c 	and.w	r3, r3, #12
 800671a:	2b08      	cmp	r3, #8
 800671c:	d05c      	beq.n	80067d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d141      	bne.n	80067aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006726:	4b31      	ldr	r3, [pc, #196]	@ (80067ec <HAL_RCC_OscConfig+0x478>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672c:	f7fd f970 	bl	8003a10 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006734:	f7fd f96c 	bl	8003a10 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b02      	cmp	r3, #2
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e087      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f0      	bne.n	8006734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69da      	ldr	r2, [r3, #28]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	019b      	lsls	r3, r3, #6
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	3b01      	subs	r3, #1
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006774:	061b      	lsls	r3, r3, #24
 8006776:	491b      	ldr	r1, [pc, #108]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 8006778:	4313      	orrs	r3, r2
 800677a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800677c:	4b1b      	ldr	r3, [pc, #108]	@ (80067ec <HAL_RCC_OscConfig+0x478>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006782:	f7fd f945 	bl	8003a10 <HAL_GetTick>
 8006786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800678a:	f7fd f941 	bl	8003a10 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e05c      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800679c:	4b11      	ldr	r3, [pc, #68]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0x416>
 80067a8:	e054      	b.n	8006854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067aa:	4b10      	ldr	r3, [pc, #64]	@ (80067ec <HAL_RCC_OscConfig+0x478>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b0:	f7fd f92e 	bl	8003a10 <HAL_GetTick>
 80067b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	e008      	b.n	80067ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b8:	f7fd f92a 	bl	8003a10 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e045      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ca:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <HAL_RCC_OscConfig+0x470>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f0      	bne.n	80067b8 <HAL_RCC_OscConfig+0x444>
 80067d6:	e03d      	b.n	8006854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d107      	bne.n	80067f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e038      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
 80067e4:	40023800 	.word	0x40023800
 80067e8:	40007000 	.word	0x40007000
 80067ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <HAL_RCC_OscConfig+0x4ec>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d028      	beq.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006808:	429a      	cmp	r2, r3
 800680a:	d121      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	429a      	cmp	r2, r3
 8006818:	d11a      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006820:	4013      	ands	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006828:	4293      	cmp	r3, r2
 800682a:	d111      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	3b01      	subs	r3, #1
 800683a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d107      	bne.n	8006850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3718      	adds	r7, #24
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800

08006864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e0cc      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006878:	4b68      	ldr	r3, [pc, #416]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d90c      	bls.n	80068a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b65      	ldr	r3, [pc, #404]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b63      	ldr	r3, [pc, #396]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0b8      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d020      	beq.n	80068ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068b8:	4b59      	ldr	r3, [pc, #356]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	4a58      	ldr	r2, [pc, #352]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d005      	beq.n	80068dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068d0:	4b53      	ldr	r3, [pc, #332]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4a52      	ldr	r2, [pc, #328]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068dc:	4b50      	ldr	r3, [pc, #320]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	494d      	ldr	r1, [pc, #308]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d044      	beq.n	8006984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d107      	bne.n	8006912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006902:	4b47      	ldr	r3, [pc, #284]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690a:	2b00      	cmp	r3, #0
 800690c:	d119      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e07f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b02      	cmp	r3, #2
 8006918:	d003      	beq.n	8006922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800691e:	2b03      	cmp	r3, #3
 8006920:	d107      	bne.n	8006932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006922:	4b3f      	ldr	r3, [pc, #252]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e06f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006932:	4b3b      	ldr	r3, [pc, #236]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e067      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006942:	4b37      	ldr	r3, [pc, #220]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 0203 	bic.w	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4934      	ldr	r1, [pc, #208]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006950:	4313      	orrs	r3, r2
 8006952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006954:	f7fd f85c 	bl	8003a10 <HAL_GetTick>
 8006958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695a:	e00a      	b.n	8006972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800695c:	f7fd f858 	bl	8003a10 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e04f      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006972:	4b2b      	ldr	r3, [pc, #172]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 020c 	and.w	r2, r3, #12
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	429a      	cmp	r2, r3
 8006982:	d1eb      	bne.n	800695c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006984:	4b25      	ldr	r3, [pc, #148]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d20c      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b20      	ldr	r3, [pc, #128]	@ (8006a1c <HAL_RCC_ClockConfig+0x1b8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e032      	b.n	8006a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b19      	ldr	r3, [pc, #100]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4916      	ldr	r1, [pc, #88]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b12      	ldr	r3, [pc, #72]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	490e      	ldr	r1, [pc, #56]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ea:	f000 f821 	bl	8006a30 <HAL_RCC_GetSysClockFreq>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	490a      	ldr	r1, [pc, #40]	@ (8006a24 <HAL_RCC_ClockConfig+0x1c0>)
 80069fc:	5ccb      	ldrb	r3, [r1, r3]
 80069fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006a02:	4a09      	ldr	r2, [pc, #36]	@ (8006a28 <HAL_RCC_ClockConfig+0x1c4>)
 8006a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a06:	4b09      	ldr	r3, [pc, #36]	@ (8006a2c <HAL_RCC_ClockConfig+0x1c8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fc ffbc 	bl	8003988 <HAL_InitTick>

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40023c00 	.word	0x40023c00
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0800f1f0 	.word	0x0800f1f0
 8006a28:	20000224 	.word	0x20000224
 8006a2c:	2000022c 	.word	0x2000022c

08006a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a34:	b090      	sub	sp, #64	@ 0x40
 8006a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a48:	4b59      	ldr	r3, [pc, #356]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 030c 	and.w	r3, r3, #12
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d00d      	beq.n	8006a70 <HAL_RCC_GetSysClockFreq+0x40>
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	f200 80a1 	bhi.w	8006b9c <HAL_RCC_GetSysClockFreq+0x16c>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <HAL_RCC_GetSysClockFreq+0x34>
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d003      	beq.n	8006a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a62:	e09b      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a64:	4b53      	ldr	r3, [pc, #332]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a68:	e09b      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a6a:	4b53      	ldr	r3, [pc, #332]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a6e:	e098      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a70:	4b4f      	ldr	r3, [pc, #316]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a7a:	4b4d      	ldr	r3, [pc, #308]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d028      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a86:	4b4a      	ldr	r3, [pc, #296]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	099b      	lsrs	r3, r3, #6
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4b47      	ldr	r3, [pc, #284]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a9c:	fb03 f201 	mul.w	r2, r3, r1
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	fb00 f303 	mul.w	r3, r0, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	4a43      	ldr	r2, [pc, #268]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006aaa:	fba0 1202 	umull	r1, r2, r0, r2
 8006aae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab0:	460a      	mov	r2, r1
 8006ab2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab6:	4413      	add	r3, r2
 8006ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abc:	2200      	movs	r2, #0
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	61fa      	str	r2, [r7, #28]
 8006ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ac6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006aca:	f7fa f8c5 	bl	8000c58 <__aeabi_uldivmod>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ad6:	e053      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ad8:	4b35      	ldr	r3, [pc, #212]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	099b      	lsrs	r3, r3, #6
 8006ade:	2200      	movs	r2, #0
 8006ae0:	613b      	str	r3, [r7, #16]
 8006ae2:	617a      	str	r2, [r7, #20]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006aea:	f04f 0b00 	mov.w	fp, #0
 8006aee:	4652      	mov	r2, sl
 8006af0:	465b      	mov	r3, fp
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f04f 0100 	mov.w	r1, #0
 8006afa:	0159      	lsls	r1, r3, #5
 8006afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b00:	0150      	lsls	r0, r2, #5
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	ebb2 080a 	subs.w	r8, r2, sl
 8006b0a:	eb63 090b 	sbc.w	r9, r3, fp
 8006b0e:	f04f 0200 	mov.w	r2, #0
 8006b12:	f04f 0300 	mov.w	r3, #0
 8006b16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b22:	ebb2 0408 	subs.w	r4, r2, r8
 8006b26:	eb63 0509 	sbc.w	r5, r3, r9
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	00eb      	lsls	r3, r5, #3
 8006b34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b38:	00e2      	lsls	r2, r4, #3
 8006b3a:	4614      	mov	r4, r2
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	eb14 030a 	adds.w	r3, r4, sl
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	eb45 030b 	adc.w	r3, r5, fp
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b56:	4629      	mov	r1, r5
 8006b58:	028b      	lsls	r3, r1, #10
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b60:	4621      	mov	r1, r4
 8006b62:	028a      	lsls	r2, r1, #10
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	60fa      	str	r2, [r7, #12]
 8006b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b74:	f7fa f870 	bl	8000c58 <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3740      	adds	r7, #64	@ 0x40
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	017d7840 	.word	0x017d7840

08006bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000224 	.word	0x20000224

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f7ff fff0 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800f200 	.word	0x0800f200

08006bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c00:	f7ff ffdc 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0b5b      	lsrs	r3, r3, #13
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800f200 	.word	0x0800f200

08006c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e041      	b.n	8006cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d106      	bne.n	8006c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7fc fa0c 	bl	8003068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4610      	mov	r0, r2
 8006c64:	f000 fdca 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d001      	beq.n	8006cdc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e03c      	b.n	8006d56 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_TIM_Base_Start+0xa0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_TIM_Base_Start+0x5c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf6:	d013      	beq.n	8006d20 <HAL_TIM_Base_Start+0x5c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8006d68 <HAL_TIM_Base_Start+0xa4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_TIM_Base_Start+0x5c>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a19      	ldr	r2, [pc, #100]	@ (8006d6c <HAL_TIM_Base_Start+0xa8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_TIM_Base_Start+0x5c>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a17      	ldr	r2, [pc, #92]	@ (8006d70 <HAL_TIM_Base_Start+0xac>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIM_Base_Start+0x5c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a16      	ldr	r2, [pc, #88]	@ (8006d74 <HAL_TIM_Base_Start+0xb0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d111      	bne.n	8006d44 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d010      	beq.n	8006d54 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0201 	orr.w	r2, r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	e007      	b.n	8006d54 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0201 	orr.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40014000 	.word	0x40014000

08006d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d001      	beq.n	8006d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e044      	b.n	8006e1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1e      	ldr	r2, [pc, #120]	@ (8006e28 <HAL_TIM_Base_Start_IT+0xb0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d018      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x6c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dba:	d013      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <HAL_TIM_Base_Start_IT+0xb4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00e      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a19      	ldr	r2, [pc, #100]	@ (8006e30 <HAL_TIM_Base_Start_IT+0xb8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d009      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a17      	ldr	r2, [pc, #92]	@ (8006e34 <HAL_TIM_Base_Start_IT+0xbc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d004      	beq.n	8006de4 <HAL_TIM_Base_Start_IT+0x6c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a16      	ldr	r2, [pc, #88]	@ (8006e38 <HAL_TIM_Base_Start_IT+0xc0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d111      	bne.n	8006e08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b06      	cmp	r3, #6
 8006df4:	d010      	beq.n	8006e18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f042 0201 	orr.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e06:	e007      	b.n	8006e18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40010000 	.word	0x40010000
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	40000c00 	.word	0x40000c00
 8006e38:	40014000 	.word	0x40014000

08006e3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e041      	b.n	8006ed2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f839 	bl	8006eda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f000 fcbe 	bl	80077fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b083      	sub	sp, #12
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d109      	bne.n	8006f14 <HAL_TIM_PWM_Start+0x24>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	e022      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d109      	bne.n	8006f2e <HAL_TIM_PWM_Start+0x3e>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	bf14      	ite	ne
 8006f26:	2301      	movne	r3, #1
 8006f28:	2300      	moveq	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	e015      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d109      	bne.n	8006f48 <HAL_TIM_PWM_Start+0x58>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	bf14      	ite	ne
 8006f40:	2301      	movne	r3, #1
 8006f42:	2300      	moveq	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	e008      	b.n	8006f5a <HAL_TIM_PWM_Start+0x6a>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e068      	b.n	8007034 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_TIM_PWM_Start+0x82>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f70:	e013      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d104      	bne.n	8006f82 <HAL_TIM_PWM_Start+0x92>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f80:	e00b      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_PWM_Start+0xa2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f90:	e003      	b.n	8006f9a <HAL_TIM_PWM_Start+0xaa>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2202      	movs	r2, #2
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fedc 	bl	8007d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a23      	ldr	r2, [pc, #140]	@ (800703c <HAL_TIM_PWM_Start+0x14c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d107      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800703c <HAL_TIM_PWM_Start+0x14c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd4:	d013      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a19      	ldr	r2, [pc, #100]	@ (8007040 <HAL_TIM_PWM_Start+0x150>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a17      	ldr	r2, [pc, #92]	@ (8007044 <HAL_TIM_PWM_Start+0x154>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a16      	ldr	r2, [pc, #88]	@ (8007048 <HAL_TIM_PWM_Start+0x158>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_TIM_PWM_Start+0x10e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a14      	ldr	r2, [pc, #80]	@ (800704c <HAL_TIM_PWM_Start+0x15c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d111      	bne.n	8007022 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b06      	cmp	r3, #6
 800700e:	d010      	beq.n	8007032 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007020:	e007      	b.n	8007032 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40010000 	.word	0x40010000
 8007040:	40000400 	.word	0x40000400
 8007044:	40000800 	.word	0x40000800
 8007048:	40000c00 	.word	0x40000c00
 800704c:	40014000 	.word	0x40014000

08007050 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e097      	b.n	8007194 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fc f85d 	bl	8003138 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007094:	f023 0307 	bic.w	r3, r3, #7
 8007098:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4619      	mov	r1, r3
 80070a4:	4610      	mov	r0, r2
 80070a6:	f000 fba9 	bl	80077fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	4313      	orrs	r3, r2
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80070f0:	f023 030c 	bic.w	r3, r3, #12
 80070f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	4313      	orrs	r3, r2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	011a      	lsls	r2, r3, #4
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	031b      	lsls	r3, r3, #12
 8007120:	4313      	orrs	r3, r2
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007136:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	4313      	orrs	r3, r2
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80071b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d110      	bne.n	80071ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d102      	bne.n	80071d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80071d2:	7b7b      	ldrb	r3, [r7, #13]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d001      	beq.n	80071dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e069      	b.n	80072b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ec:	e031      	b.n	8007252 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d110      	bne.n	8007216 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d102      	bne.n	8007200 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071fa:	7b3b      	ldrb	r3, [r7, #12]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e055      	b.n	80072b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007214:	e01d      	b.n	8007252 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007216:	7bfb      	ldrb	r3, [r7, #15]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d108      	bne.n	800722e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d105      	bne.n	800722e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007222:	7b7b      	ldrb	r3, [r7, #13]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d102      	bne.n	800722e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007228:	7b3b      	ldrb	r3, [r7, #12]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d001      	beq.n	8007232 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e03e      	b.n	80072b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_TIM_Encoder_Start+0xc4>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b04      	cmp	r3, #4
 800725c:	d008      	beq.n	8007270 <HAL_TIM_Encoder_Start+0xd4>
 800725e:	e00f      	b.n	8007280 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2201      	movs	r2, #1
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fd79 	bl	8007d60 <TIM_CCxChannelCmd>
      break;
 800726e:	e016      	b.n	800729e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2201      	movs	r2, #1
 8007276:	2104      	movs	r1, #4
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fd71 	bl	8007d60 <TIM_CCxChannelCmd>
      break;
 800727e:	e00e      	b.n	800729e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2201      	movs	r2, #1
 8007286:	2100      	movs	r1, #0
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fd69 	bl	8007d60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2201      	movs	r2, #1
 8007294:	2104      	movs	r1, #4
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fd62 	bl	8007d60 <TIM_CCxChannelCmd>
      break;
 800729c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0201 	orr.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d01b      	beq.n	800731c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f06f 0202 	mvn.w	r2, #2
 80072ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa5b 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 8007308:	e005      	b.n	8007316 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fa4d 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fa5e 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d020      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f06f 0204 	mvn.w	r2, #4
 8007338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800734a:	2b00      	cmp	r3, #0
 800734c:	d003      	beq.n	8007356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fa35 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 8007354:	e005      	b.n	8007362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa27 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fa38 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d020      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f003 0308 	and.w	r3, r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01b      	beq.n	80073b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f06f 0208 	mvn.w	r2, #8
 8007384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa0f 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 80073a0:	e005      	b.n	80073ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa01 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fa12 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d020      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d01b      	beq.n	8007400 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0210 	mvn.w	r2, #16
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2208      	movs	r2, #8
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f9e9 	bl	80077be <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f9db 	bl	80077aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f9ec 	bl	80077d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00c      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d007      	beq.n	8007424 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0201 	mvn.w	r2, #1
 800741c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb fbb8 	bl	8002b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fd2a 	bl	8007e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00c      	beq.n	800746c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9bd 	bl	80077e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00c      	beq.n	8007490 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d007      	beq.n	8007490 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0220 	mvn.w	r2, #32
 8007488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fcfc 	bl	8007e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ae      	b.n	8007614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	f200 809f 	bhi.w	8007604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007501 	.word	0x08007501
 80074d0:	08007605 	.word	0x08007605
 80074d4:	08007605 	.word	0x08007605
 80074d8:	08007605 	.word	0x08007605
 80074dc:	08007541 	.word	0x08007541
 80074e0:	08007605 	.word	0x08007605
 80074e4:	08007605 	.word	0x08007605
 80074e8:	08007605 	.word	0x08007605
 80074ec:	08007583 	.word	0x08007583
 80074f0:	08007605 	.word	0x08007605
 80074f4:	08007605 	.word	0x08007605
 80074f8:	08007605 	.word	0x08007605
 80074fc:	080075c3 	.word	0x080075c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fa04 	bl	8007914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0204 	bic.w	r2, r2, #4
 800752a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	619a      	str	r2, [r3, #24]
      break;
 800753e:	e064      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 fa4a 	bl	80079e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800755a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800756a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6999      	ldr	r1, [r3, #24]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      break;
 8007580:	e043      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fa95 	bl	8007ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0204 	bic.w	r2, r2, #4
 80075ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69d9      	ldr	r1, [r3, #28]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	61da      	str	r2, [r3, #28]
      break;
 80075c0:	e023      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fadf 	bl	8007b8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69d9      	ldr	r1, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	021a      	lsls	r2, r3, #8
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	61da      	str	r2, [r3, #28]
      break;
 8007602:	e002      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_TIM_ConfigClockSource+0x1c>
 8007634:	2302      	movs	r3, #2
 8007636:	e0b4      	b.n	80077a2 <HAL_TIM_ConfigClockSource+0x186>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800765e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007670:	d03e      	beq.n	80076f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007676:	f200 8087 	bhi.w	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800767e:	f000 8086 	beq.w	800778e <HAL_TIM_ConfigClockSource+0x172>
 8007682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007686:	d87f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007688:	2b70      	cmp	r3, #112	@ 0x70
 800768a:	d01a      	beq.n	80076c2 <HAL_TIM_ConfigClockSource+0xa6>
 800768c:	2b70      	cmp	r3, #112	@ 0x70
 800768e:	d87b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007690:	2b60      	cmp	r3, #96	@ 0x60
 8007692:	d050      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0x11a>
 8007694:	2b60      	cmp	r3, #96	@ 0x60
 8007696:	d877      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 8007698:	2b50      	cmp	r3, #80	@ 0x50
 800769a:	d03c      	beq.n	8007716 <HAL_TIM_ConfigClockSource+0xfa>
 800769c:	2b50      	cmp	r3, #80	@ 0x50
 800769e:	d873      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a0:	2b40      	cmp	r3, #64	@ 0x40
 80076a2:	d058      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x13a>
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	d86f      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b30      	cmp	r3, #48	@ 0x30
 80076aa:	d064      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076ac:	2b30      	cmp	r3, #48	@ 0x30
 80076ae:	d86b      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b20      	cmp	r3, #32
 80076b2:	d060      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d867      	bhi.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d05c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076bc:	2b10      	cmp	r3, #16
 80076be:	d05a      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x15a>
 80076c0:	e062      	b.n	8007788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80076d2:	f000 fb25 	bl	8007d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80076e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	609a      	str	r2, [r3, #8]
      break;
 80076ee:	e04f      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007700:	f000 fb0e 	bl	8007d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007712:	609a      	str	r2, [r3, #8]
      break;
 8007714:	e03c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007722:	461a      	mov	r2, r3
 8007724:	f000 fa82 	bl	8007c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2150      	movs	r1, #80	@ 0x50
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fadb 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007734:	e02c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007742:	461a      	mov	r2, r3
 8007744:	f000 faa1 	bl	8007c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2160      	movs	r1, #96	@ 0x60
 800774e:	4618      	mov	r0, r3
 8007750:	f000 facb 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007754:	e01c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007762:	461a      	mov	r2, r3
 8007764:	f000 fa62 	bl	8007c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2140      	movs	r1, #64	@ 0x40
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fabb 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007774:	e00c      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4619      	mov	r1, r3
 8007780:	4610      	mov	r0, r2
 8007782:	f000 fab2 	bl	8007cea <TIM_ITRx_SetConfig>
      break;
 8007786:	e003      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
      break;
 800778c:	e000      	b.n	8007790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800778e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
	...

080077fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a3a      	ldr	r2, [pc, #232]	@ (80078f8 <TIM_Base_SetConfig+0xfc>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00f      	beq.n	8007834 <TIM_Base_SetConfig+0x38>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781a:	d00b      	beq.n	8007834 <TIM_Base_SetConfig+0x38>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a37      	ldr	r2, [pc, #220]	@ (80078fc <TIM_Base_SetConfig+0x100>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d007      	beq.n	8007834 <TIM_Base_SetConfig+0x38>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a36      	ldr	r2, [pc, #216]	@ (8007900 <TIM_Base_SetConfig+0x104>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d003      	beq.n	8007834 <TIM_Base_SetConfig+0x38>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a35      	ldr	r2, [pc, #212]	@ (8007904 <TIM_Base_SetConfig+0x108>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d108      	bne.n	8007846 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a2b      	ldr	r2, [pc, #172]	@ (80078f8 <TIM_Base_SetConfig+0xfc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d01b      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007854:	d017      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a28      	ldr	r2, [pc, #160]	@ (80078fc <TIM_Base_SetConfig+0x100>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d013      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a27      	ldr	r2, [pc, #156]	@ (8007900 <TIM_Base_SetConfig+0x104>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d00f      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a26      	ldr	r2, [pc, #152]	@ (8007904 <TIM_Base_SetConfig+0x108>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00b      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a25      	ldr	r2, [pc, #148]	@ (8007908 <TIM_Base_SetConfig+0x10c>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d007      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a24      	ldr	r2, [pc, #144]	@ (800790c <TIM_Base_SetConfig+0x110>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d003      	beq.n	8007886 <TIM_Base_SetConfig+0x8a>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a23      	ldr	r2, [pc, #140]	@ (8007910 <TIM_Base_SetConfig+0x114>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d108      	bne.n	8007898 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800788c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a0e      	ldr	r2, [pc, #56]	@ (80078f8 <TIM_Base_SetConfig+0xfc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d103      	bne.n	80078cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d105      	bne.n	80078ea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f023 0201 	bic.w	r2, r3, #1
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	611a      	str	r2, [r3, #16]
  }
}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40000400 	.word	0x40000400
 8007900:	40000800 	.word	0x40000800
 8007904:	40000c00 	.word	0x40000c00
 8007908:	40014000 	.word	0x40014000
 800790c:	40014400 	.word	0x40014400
 8007910:	40014800 	.word	0x40014800

08007914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f023 0201 	bic.w	r2, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f023 0302 	bic.w	r3, r3, #2
 800795c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a1c      	ldr	r2, [pc, #112]	@ (80079dc <TIM_OC1_SetConfig+0xc8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10c      	bne.n	800798a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f023 0308 	bic.w	r3, r3, #8
 8007976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f023 0304 	bic.w	r3, r3, #4
 8007988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a13      	ldr	r2, [pc, #76]	@ (80079dc <TIM_OC1_SetConfig+0xc8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d111      	bne.n	80079b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	bf00      	nop
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000

080079e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b087      	sub	sp, #28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a1b      	ldr	r3, [r3, #32]
 80079f4:	f023 0210 	bic.w	r2, r3, #16
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f023 0320 	bic.w	r3, r3, #32
 8007a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	011b      	lsls	r3, r3, #4
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <TIM_OC2_SetConfig+0xd4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d10d      	bne.n	8007a5c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <TIM_OC2_SetConfig+0xd4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d113      	bne.n	8007a8c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	693a      	ldr	r2, [r7, #16]
 8007a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40010000 	.word	0x40010000

08007ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	021b      	lsls	r3, r3, #8
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <TIM_OC3_SetConfig+0xd0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10d      	bne.n	8007b32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a14      	ldr	r2, [pc, #80]	@ (8007b88 <TIM_OC3_SetConfig+0xd0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d113      	bne.n	8007b62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	699b      	ldr	r3, [r3, #24]
 8007b5a:	011b      	lsls	r3, r3, #4
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	621a      	str	r2, [r3, #32]
}
 8007b7c:	bf00      	nop
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	40010000 	.word	0x40010000

08007b8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a10      	ldr	r2, [pc, #64]	@ (8007c28 <TIM_OC4_SetConfig+0x9c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d109      	bne.n	8007c00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	019b      	lsls	r3, r3, #6
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	621a      	str	r2, [r3, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	371c      	adds	r7, #28
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000

08007c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f023 0201 	bic.w	r2, r3, #1
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f023 030a 	bic.w	r3, r3, #10
 8007c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b087      	sub	sp, #28
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	f023 0210 	bic.w	r2, r3, #16
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	697a      	ldr	r2, [r7, #20]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	697a      	ldr	r2, [r7, #20]
 8007cdc:	621a      	str	r2, [r3, #32]
}
 8007cde:	bf00      	nop
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f043 0307 	orr.w	r3, r3, #7
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b087      	sub	sp, #28
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	021a      	lsls	r2, r3, #8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	609a      	str	r2, [r3, #8]
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f003 031f 	and.w	r3, r3, #31
 8007d72:	2201      	movs	r2, #1
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1a      	ldr	r2, [r3, #32]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	43db      	mvns	r3, r3
 8007d82:	401a      	ands	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a1a      	ldr	r2, [r3, #32]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f003 031f 	and.w	r3, r3, #31
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	fa01 f303 	lsl.w	r3, r1, r3
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	621a      	str	r2, [r3, #32]
}
 8007d9e:	bf00      	nop
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
	...

08007dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e050      	b.n	8007e66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1c      	ldr	r2, [pc, #112]	@ (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d018      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e10:	d013      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00e      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a16      	ldr	r2, [pc, #88]	@ (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d009      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a15      	ldr	r2, [pc, #84]	@ (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d004      	beq.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a13      	ldr	r2, [pc, #76]	@ (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d10c      	bne.n	8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40010000 	.word	0x40010000
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800
 8007e80:	40000c00 	.word	0x40000c00
 8007e84:	40014000 	.word	0x40014000

08007e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e042      	b.n	8007f48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fb f9e6 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2224      	movs	r2, #36	@ 0x24
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f82b 	bl	8007f50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695a      	ldr	r2, [r3, #20]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f54:	b0c0      	sub	sp, #256	@ 0x100
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f6c:	68d9      	ldr	r1, [r3, #12]
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	ea40 0301 	orr.w	r3, r0, r1
 8007f78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007fa8:	f021 010c 	bic.w	r1, r1, #12
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007fb6:	430b      	orrs	r3, r1
 8007fb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fca:	6999      	ldr	r1, [r3, #24]
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	ea40 0301 	orr.w	r3, r0, r1
 8007fd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b8f      	ldr	r3, [pc, #572]	@ (800821c <UART_SetConfig+0x2cc>)
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d005      	beq.n	8007ff0 <UART_SetConfig+0xa0>
 8007fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4b8d      	ldr	r3, [pc, #564]	@ (8008220 <UART_SetConfig+0x2d0>)
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d104      	bne.n	8007ffa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ff0:	f7fe fe04 	bl	8006bfc <HAL_RCC_GetPCLK2Freq>
 8007ff4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ff8:	e003      	b.n	8008002 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ffa:	f7fe fdeb 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 8007ffe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008006:	69db      	ldr	r3, [r3, #28]
 8008008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800c:	f040 810c 	bne.w	8008228 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008014:	2200      	movs	r2, #0
 8008016:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800801a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800801e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008022:	4622      	mov	r2, r4
 8008024:	462b      	mov	r3, r5
 8008026:	1891      	adds	r1, r2, r2
 8008028:	65b9      	str	r1, [r7, #88]	@ 0x58
 800802a:	415b      	adcs	r3, r3
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800802e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008032:	4621      	mov	r1, r4
 8008034:	eb12 0801 	adds.w	r8, r2, r1
 8008038:	4629      	mov	r1, r5
 800803a:	eb43 0901 	adc.w	r9, r3, r1
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800804a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800804e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008052:	4690      	mov	r8, r2
 8008054:	4699      	mov	r9, r3
 8008056:	4623      	mov	r3, r4
 8008058:	eb18 0303 	adds.w	r3, r8, r3
 800805c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008060:	462b      	mov	r3, r5
 8008062:	eb49 0303 	adc.w	r3, r9, r3
 8008066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008076:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800807a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800807e:	460b      	mov	r3, r1
 8008080:	18db      	adds	r3, r3, r3
 8008082:	653b      	str	r3, [r7, #80]	@ 0x50
 8008084:	4613      	mov	r3, r2
 8008086:	eb42 0303 	adc.w	r3, r2, r3
 800808a:	657b      	str	r3, [r7, #84]	@ 0x54
 800808c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008090:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008094:	f7f8 fde0 	bl	8000c58 <__aeabi_uldivmod>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4b61      	ldr	r3, [pc, #388]	@ (8008224 <UART_SetConfig+0x2d4>)
 800809e:	fba3 2302 	umull	r2, r3, r3, r2
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	011c      	lsls	r4, r3, #4
 80080a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80080b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80080b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80080b8:	4642      	mov	r2, r8
 80080ba:	464b      	mov	r3, r9
 80080bc:	1891      	adds	r1, r2, r2
 80080be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80080c0:	415b      	adcs	r3, r3
 80080c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80080c8:	4641      	mov	r1, r8
 80080ca:	eb12 0a01 	adds.w	sl, r2, r1
 80080ce:	4649      	mov	r1, r9
 80080d0:	eb43 0b01 	adc.w	fp, r3, r1
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080e8:	4692      	mov	sl, r2
 80080ea:	469b      	mov	fp, r3
 80080ec:	4643      	mov	r3, r8
 80080ee:	eb1a 0303 	adds.w	r3, sl, r3
 80080f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080f6:	464b      	mov	r3, r9
 80080f8:	eb4b 0303 	adc.w	r3, fp, r3
 80080fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800810c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008110:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008114:	460b      	mov	r3, r1
 8008116:	18db      	adds	r3, r3, r3
 8008118:	643b      	str	r3, [r7, #64]	@ 0x40
 800811a:	4613      	mov	r3, r2
 800811c:	eb42 0303 	adc.w	r3, r2, r3
 8008120:	647b      	str	r3, [r7, #68]	@ 0x44
 8008122:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008126:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800812a:	f7f8 fd95 	bl	8000c58 <__aeabi_uldivmod>
 800812e:	4602      	mov	r2, r0
 8008130:	460b      	mov	r3, r1
 8008132:	4611      	mov	r1, r2
 8008134:	4b3b      	ldr	r3, [pc, #236]	@ (8008224 <UART_SetConfig+0x2d4>)
 8008136:	fba3 2301 	umull	r2, r3, r3, r1
 800813a:	095b      	lsrs	r3, r3, #5
 800813c:	2264      	movs	r2, #100	@ 0x64
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	1acb      	subs	r3, r1, r3
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800814a:	4b36      	ldr	r3, [pc, #216]	@ (8008224 <UART_SetConfig+0x2d4>)
 800814c:	fba3 2302 	umull	r2, r3, r3, r2
 8008150:	095b      	lsrs	r3, r3, #5
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008158:	441c      	add	r4, r3
 800815a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800815e:	2200      	movs	r2, #0
 8008160:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008164:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008168:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	1891      	adds	r1, r2, r2
 8008172:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008174:	415b      	adcs	r3, r3
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800817c:	4641      	mov	r1, r8
 800817e:	1851      	adds	r1, r2, r1
 8008180:	6339      	str	r1, [r7, #48]	@ 0x30
 8008182:	4649      	mov	r1, r9
 8008184:	414b      	adcs	r3, r1
 8008186:	637b      	str	r3, [r7, #52]	@ 0x34
 8008188:	f04f 0200 	mov.w	r2, #0
 800818c:	f04f 0300 	mov.w	r3, #0
 8008190:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008194:	4659      	mov	r1, fp
 8008196:	00cb      	lsls	r3, r1, #3
 8008198:	4651      	mov	r1, sl
 800819a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800819e:	4651      	mov	r1, sl
 80081a0:	00ca      	lsls	r2, r1, #3
 80081a2:	4610      	mov	r0, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	4642      	mov	r2, r8
 80081aa:	189b      	adds	r3, r3, r2
 80081ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081b0:	464b      	mov	r3, r9
 80081b2:	460a      	mov	r2, r1
 80081b4:	eb42 0303 	adc.w	r3, r2, r3
 80081b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80081c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80081cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80081d0:	460b      	mov	r3, r1
 80081d2:	18db      	adds	r3, r3, r3
 80081d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081d6:	4613      	mov	r3, r2
 80081d8:	eb42 0303 	adc.w	r3, r2, r3
 80081dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081e6:	f7f8 fd37 	bl	8000c58 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008224 <UART_SetConfig+0x2d4>)
 80081f0:	fba3 1302 	umull	r1, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	2164      	movs	r1, #100	@ 0x64
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	3332      	adds	r3, #50	@ 0x32
 8008202:	4a08      	ldr	r2, [pc, #32]	@ (8008224 <UART_SetConfig+0x2d4>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	f003 0207 	and.w	r2, r3, #7
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4422      	add	r2, r4
 8008216:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008218:	e106      	b.n	8008428 <UART_SetConfig+0x4d8>
 800821a:	bf00      	nop
 800821c:	40011000 	.word	0x40011000
 8008220:	40011400 	.word	0x40011400
 8008224:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008232:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800823a:	4642      	mov	r2, r8
 800823c:	464b      	mov	r3, r9
 800823e:	1891      	adds	r1, r2, r2
 8008240:	6239      	str	r1, [r7, #32]
 8008242:	415b      	adcs	r3, r3
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
 8008246:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800824a:	4641      	mov	r1, r8
 800824c:	1854      	adds	r4, r2, r1
 800824e:	4649      	mov	r1, r9
 8008250:	eb43 0501 	adc.w	r5, r3, r1
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	00eb      	lsls	r3, r5, #3
 800825e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008262:	00e2      	lsls	r2, r4, #3
 8008264:	4614      	mov	r4, r2
 8008266:	461d      	mov	r5, r3
 8008268:	4643      	mov	r3, r8
 800826a:	18e3      	adds	r3, r4, r3
 800826c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008270:	464b      	mov	r3, r9
 8008272:	eb45 0303 	adc.w	r3, r5, r3
 8008276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800827a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008286:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800828a:	f04f 0200 	mov.w	r2, #0
 800828e:	f04f 0300 	mov.w	r3, #0
 8008292:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008296:	4629      	mov	r1, r5
 8008298:	008b      	lsls	r3, r1, #2
 800829a:	4621      	mov	r1, r4
 800829c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082a0:	4621      	mov	r1, r4
 80082a2:	008a      	lsls	r2, r1, #2
 80082a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80082a8:	f7f8 fcd6 	bl	8000c58 <__aeabi_uldivmod>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	4b60      	ldr	r3, [pc, #384]	@ (8008434 <UART_SetConfig+0x4e4>)
 80082b2:	fba3 2302 	umull	r2, r3, r3, r2
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	011c      	lsls	r4, r3, #4
 80082ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80082c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80082c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80082cc:	4642      	mov	r2, r8
 80082ce:	464b      	mov	r3, r9
 80082d0:	1891      	adds	r1, r2, r2
 80082d2:	61b9      	str	r1, [r7, #24]
 80082d4:	415b      	adcs	r3, r3
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082dc:	4641      	mov	r1, r8
 80082de:	1851      	adds	r1, r2, r1
 80082e0:	6139      	str	r1, [r7, #16]
 80082e2:	4649      	mov	r1, r9
 80082e4:	414b      	adcs	r3, r1
 80082e6:	617b      	str	r3, [r7, #20]
 80082e8:	f04f 0200 	mov.w	r2, #0
 80082ec:	f04f 0300 	mov.w	r3, #0
 80082f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082f4:	4659      	mov	r1, fp
 80082f6:	00cb      	lsls	r3, r1, #3
 80082f8:	4651      	mov	r1, sl
 80082fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082fe:	4651      	mov	r1, sl
 8008300:	00ca      	lsls	r2, r1, #3
 8008302:	4610      	mov	r0, r2
 8008304:	4619      	mov	r1, r3
 8008306:	4603      	mov	r3, r0
 8008308:	4642      	mov	r2, r8
 800830a:	189b      	adds	r3, r3, r2
 800830c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008310:	464b      	mov	r3, r9
 8008312:	460a      	mov	r2, r1
 8008314:	eb42 0303 	adc.w	r3, r2, r3
 8008318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800831c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008326:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008334:	4649      	mov	r1, r9
 8008336:	008b      	lsls	r3, r1, #2
 8008338:	4641      	mov	r1, r8
 800833a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800833e:	4641      	mov	r1, r8
 8008340:	008a      	lsls	r2, r1, #2
 8008342:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008346:	f7f8 fc87 	bl	8000c58 <__aeabi_uldivmod>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	4611      	mov	r1, r2
 8008350:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008352:	fba3 2301 	umull	r2, r3, r3, r1
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	2264      	movs	r2, #100	@ 0x64
 800835a:	fb02 f303 	mul.w	r3, r2, r3
 800835e:	1acb      	subs	r3, r1, r3
 8008360:	011b      	lsls	r3, r3, #4
 8008362:	3332      	adds	r3, #50	@ 0x32
 8008364:	4a33      	ldr	r2, [pc, #204]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008366:	fba2 2303 	umull	r2, r3, r2, r3
 800836a:	095b      	lsrs	r3, r3, #5
 800836c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008370:	441c      	add	r4, r3
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	673b      	str	r3, [r7, #112]	@ 0x70
 800837a:	677a      	str	r2, [r7, #116]	@ 0x74
 800837c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008380:	4642      	mov	r2, r8
 8008382:	464b      	mov	r3, r9
 8008384:	1891      	adds	r1, r2, r2
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	415b      	adcs	r3, r3
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008390:	4641      	mov	r1, r8
 8008392:	1851      	adds	r1, r2, r1
 8008394:	6039      	str	r1, [r7, #0]
 8008396:	4649      	mov	r1, r9
 8008398:	414b      	adcs	r3, r1
 800839a:	607b      	str	r3, [r7, #4]
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	f04f 0300 	mov.w	r3, #0
 80083a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083a8:	4659      	mov	r1, fp
 80083aa:	00cb      	lsls	r3, r1, #3
 80083ac:	4651      	mov	r1, sl
 80083ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b2:	4651      	mov	r1, sl
 80083b4:	00ca      	lsls	r2, r1, #3
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	4603      	mov	r3, r0
 80083bc:	4642      	mov	r2, r8
 80083be:	189b      	adds	r3, r3, r2
 80083c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083c2:	464b      	mov	r3, r9
 80083c4:	460a      	mov	r2, r1
 80083c6:	eb42 0303 	adc.w	r3, r2, r3
 80083ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80083d6:	667a      	str	r2, [r7, #100]	@ 0x64
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80083e4:	4649      	mov	r1, r9
 80083e6:	008b      	lsls	r3, r1, #2
 80083e8:	4641      	mov	r1, r8
 80083ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ee:	4641      	mov	r1, r8
 80083f0:	008a      	lsls	r2, r1, #2
 80083f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083f6:	f7f8 fc2f 	bl	8000c58 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008400:	fba3 1302 	umull	r1, r3, r3, r2
 8008404:	095b      	lsrs	r3, r3, #5
 8008406:	2164      	movs	r1, #100	@ 0x64
 8008408:	fb01 f303 	mul.w	r3, r1, r3
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	3332      	adds	r3, #50	@ 0x32
 8008412:	4a08      	ldr	r2, [pc, #32]	@ (8008434 <UART_SetConfig+0x4e4>)
 8008414:	fba2 2303 	umull	r2, r3, r2, r3
 8008418:	095b      	lsrs	r3, r3, #5
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4422      	add	r2, r4
 8008426:	609a      	str	r2, [r3, #8]
}
 8008428:	bf00      	nop
 800842a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800842e:	46bd      	mov	sp, r7
 8008430:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008434:	51eb851f 	.word	0x51eb851f

08008438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008438:	b084      	sub	sp, #16
 800843a:	b580      	push	{r7, lr}
 800843c:	b084      	sub	sp, #16
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	f107 001c 	add.w	r0, r7, #28
 8008446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800844a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800844e:	2b01      	cmp	r3, #1
 8008450:	d123      	bne.n	800849a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800847a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800847e:	2b01      	cmp	r3, #1
 8008480:	d105      	bne.n	800848e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f001 fae8 	bl	8009a64 <USB_CoreReset>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
 8008498:	e01b      	b.n	80084d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fadc 	bl	8009a64 <USB_CoreReset>
 80084ac:	4603      	mov	r3, r0
 80084ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d106      	bne.n	80084c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80084c4:	e005      	b.n	80084d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084d2:	7fbb      	ldrb	r3, [r7, #30]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d10b      	bne.n	80084f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f043 0206 	orr.w	r2, r3, #6
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f043 0220 	orr.w	r2, r3, #32
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084fc:	b004      	add	sp, #16
 80084fe:	4770      	bx	lr

08008500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	2b02      	cmp	r3, #2
 8008512:	d165      	bne.n	80085e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4a41      	ldr	r2, [pc, #260]	@ (800861c <USB_SetTurnaroundTime+0x11c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d906      	bls.n	800852a <USB_SetTurnaroundTime+0x2a>
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4a40      	ldr	r2, [pc, #256]	@ (8008620 <USB_SetTurnaroundTime+0x120>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d202      	bcs.n	800852a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008524:	230f      	movs	r3, #15
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e062      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	4a3c      	ldr	r2, [pc, #240]	@ (8008620 <USB_SetTurnaroundTime+0x120>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d306      	bcc.n	8008540 <USB_SetTurnaroundTime+0x40>
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4a3b      	ldr	r2, [pc, #236]	@ (8008624 <USB_SetTurnaroundTime+0x124>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d202      	bcs.n	8008540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800853a:	230e      	movs	r3, #14
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e057      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4a38      	ldr	r2, [pc, #224]	@ (8008624 <USB_SetTurnaroundTime+0x124>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d306      	bcc.n	8008556 <USB_SetTurnaroundTime+0x56>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4a37      	ldr	r2, [pc, #220]	@ (8008628 <USB_SetTurnaroundTime+0x128>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d202      	bcs.n	8008556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008550:	230d      	movs	r3, #13
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e04c      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4a33      	ldr	r2, [pc, #204]	@ (8008628 <USB_SetTurnaroundTime+0x128>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d306      	bcc.n	800856c <USB_SetTurnaroundTime+0x6c>
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4a32      	ldr	r2, [pc, #200]	@ (800862c <USB_SetTurnaroundTime+0x12c>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d802      	bhi.n	800856c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008566:	230c      	movs	r3, #12
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	e041      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	4a2f      	ldr	r2, [pc, #188]	@ (800862c <USB_SetTurnaroundTime+0x12c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d906      	bls.n	8008582 <USB_SetTurnaroundTime+0x82>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4a2e      	ldr	r2, [pc, #184]	@ (8008630 <USB_SetTurnaroundTime+0x130>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d802      	bhi.n	8008582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800857c:	230b      	movs	r3, #11
 800857e:	617b      	str	r3, [r7, #20]
 8008580:	e036      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	4a2a      	ldr	r2, [pc, #168]	@ (8008630 <USB_SetTurnaroundTime+0x130>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d906      	bls.n	8008598 <USB_SetTurnaroundTime+0x98>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4a29      	ldr	r2, [pc, #164]	@ (8008634 <USB_SetTurnaroundTime+0x134>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d802      	bhi.n	8008598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008592:	230a      	movs	r3, #10
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	e02b      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4a26      	ldr	r2, [pc, #152]	@ (8008634 <USB_SetTurnaroundTime+0x134>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d906      	bls.n	80085ae <USB_SetTurnaroundTime+0xae>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4a25      	ldr	r2, [pc, #148]	@ (8008638 <USB_SetTurnaroundTime+0x138>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d202      	bcs.n	80085ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085a8:	2309      	movs	r3, #9
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	e020      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4a21      	ldr	r2, [pc, #132]	@ (8008638 <USB_SetTurnaroundTime+0x138>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d306      	bcc.n	80085c4 <USB_SetTurnaroundTime+0xc4>
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	4a20      	ldr	r2, [pc, #128]	@ (800863c <USB_SetTurnaroundTime+0x13c>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d802      	bhi.n	80085c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085be:	2308      	movs	r3, #8
 80085c0:	617b      	str	r3, [r7, #20]
 80085c2:	e015      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	4a1d      	ldr	r2, [pc, #116]	@ (800863c <USB_SetTurnaroundTime+0x13c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d906      	bls.n	80085da <USB_SetTurnaroundTime+0xda>
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008640 <USB_SetTurnaroundTime+0x140>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d202      	bcs.n	80085da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085d4:	2307      	movs	r3, #7
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e00a      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085da:	2306      	movs	r3, #6
 80085dc:	617b      	str	r3, [r7, #20]
 80085de:	e007      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085e6:	2309      	movs	r3, #9
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e001      	b.n	80085f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085ec:	2309      	movs	r3, #9
 80085ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	68da      	ldr	r2, [r3, #12]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008608:	431a      	orrs	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	00d8acbf 	.word	0x00d8acbf
 8008620:	00e4e1c0 	.word	0x00e4e1c0
 8008624:	00f42400 	.word	0x00f42400
 8008628:	01067380 	.word	0x01067380
 800862c:	011a499f 	.word	0x011a499f
 8008630:	01312cff 	.word	0x01312cff
 8008634:	014ca43f 	.word	0x014ca43f
 8008638:	016e3600 	.word	0x016e3600
 800863c:	01a6ab1f 	.word	0x01a6ab1f
 8008640:	01e84800 	.word	0x01e84800

08008644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	f043 0201 	orr.w	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008666:	b480      	push	{r7}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d115      	bne.n	80086d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086b6:	200a      	movs	r0, #10
 80086b8:	f7fb f9b6 	bl	8003a28 <HAL_Delay>
      ms += 10U;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	330a      	adds	r3, #10
 80086c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f001 f93f 	bl	8009946 <USB_GetMode>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d01e      	beq.n	800870c <USB_SetCurrentMode+0x84>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80086d2:	d9f0      	bls.n	80086b6 <USB_SetCurrentMode+0x2e>
 80086d4:	e01a      	b.n	800870c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d115      	bne.n	8008708 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086e8:	200a      	movs	r0, #10
 80086ea:	f7fb f99d 	bl	8003a28 <HAL_Delay>
      ms += 10U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	330a      	adds	r3, #10
 80086f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f926 	bl	8009946 <USB_GetMode>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <USB_SetCurrentMode+0x84>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2bc7      	cmp	r3, #199	@ 0xc7
 8008704:	d9f0      	bls.n	80086e8 <USB_SetCurrentMode+0x60>
 8008706:	e001      	b.n	800870c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e005      	b.n	8008718 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008710:	d101      	bne.n	8008716 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e000      	b.n	8008718 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008720:	b084      	sub	sp, #16
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800872e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800873a:	2300      	movs	r3, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	e009      	b.n	8008754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3340      	adds	r3, #64	@ 0x40
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4413      	add	r3, r2
 800874a:	2200      	movs	r2, #0
 800874c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3301      	adds	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2b0e      	cmp	r3, #14
 8008758:	d9f2      	bls.n	8008740 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800875a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11c      	bne.n	800879c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008770:	f043 0302 	orr.w	r3, r3, #2
 8008774:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38
 800879a:	e00b      	b.n	80087b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087ba:	461a      	mov	r2, r3
 80087bc:	2300      	movs	r3, #0
 80087be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d10d      	bne.n	80087e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d104      	bne.n	80087da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f968 	bl	8008aa8 <USB_SetDevSpeed>
 80087d8:	e008      	b.n	80087ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087da:	2101      	movs	r1, #1
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f963 	bl	8008aa8 <USB_SetDevSpeed>
 80087e2:	e003      	b.n	80087ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087e4:	2103      	movs	r1, #3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f95e 	bl	8008aa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087ec:	2110      	movs	r1, #16
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8fa 	bl	80089e8 <USB_FlushTxFifo>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f924 	bl	8008a4c <USB_FlushRxFifo>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008814:	461a      	mov	r2, r3
 8008816:	2300      	movs	r3, #0
 8008818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008820:	461a      	mov	r2, r3
 8008822:	2300      	movs	r3, #0
 8008824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882c:	461a      	mov	r2, r3
 800882e:	2300      	movs	r3, #0
 8008830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	e043      	b.n	80088c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	015a      	lsls	r2, r3, #5
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4413      	add	r3, r2
 8008840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800884a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800884e:	d118      	bne.n	8008882 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10a      	bne.n	800886c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008862:	461a      	mov	r2, r3
 8008864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	e013      	b.n	8008894 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008878:	461a      	mov	r2, r3
 800887a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	e008      	b.n	8008894 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888e:	461a      	mov	r2, r3
 8008890:	2300      	movs	r3, #0
 8008892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088a0:	461a      	mov	r2, r3
 80088a2:	2300      	movs	r3, #0
 80088a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b2:	461a      	mov	r2, r3
 80088b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3301      	adds	r3, #1
 80088be:	613b      	str	r3, [r7, #16]
 80088c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088c4:	461a      	mov	r2, r3
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d3b5      	bcc.n	8008838 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e043      	b.n	800895a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088e8:	d118      	bne.n	800891c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088fc:	461a      	mov	r2, r3
 80088fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	e013      	b.n	800892e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008912:	461a      	mov	r2, r3
 8008914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e008      	b.n	800892e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008928:	461a      	mov	r2, r3
 800892a:	2300      	movs	r3, #0
 800892c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893a:	461a      	mov	r2, r3
 800893c:	2300      	movs	r3, #0
 800893e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894c:	461a      	mov	r2, r3
 800894e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3301      	adds	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800895e:	461a      	mov	r2, r3
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	4293      	cmp	r3, r2
 8008964:	d3b5      	bcc.n	80088d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800898c:	2b00      	cmp	r3, #0
 800898e:	d105      	bne.n	800899c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	f043 0210 	orr.w	r2, r3, #16
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	699a      	ldr	r2, [r3, #24]
 80089a0:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <USB_DevInit+0x2c4>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f043 0208 	orr.w	r2, r3, #8
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d107      	bne.n	80089d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089cc:	f043 0304 	orr.w	r3, r3, #4
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089e0:	b004      	add	sp, #16
 80089e2:	4770      	bx	lr
 80089e4:	803c3800 	.word	0x803c3800

080089e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	3301      	adds	r3, #1
 80089fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a02:	d901      	bls.n	8008a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e01b      	b.n	8008a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	daf2      	bge.n	80089f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	019b      	lsls	r3, r3, #6
 8008a18:	f043 0220 	orr.w	r2, r3, #32
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3301      	adds	r3, #1
 8008a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a2c:	d901      	bls.n	8008a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e006      	b.n	8008a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b20      	cmp	r3, #32
 8008a3c:	d0f0      	beq.n	8008a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a64:	d901      	bls.n	8008a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e018      	b.n	8008a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	daf2      	bge.n	8008a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2210      	movs	r2, #16
 8008a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a88:	d901      	bls.n	8008a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e006      	b.n	8008a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d0f0      	beq.n	8008a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	78fb      	ldrb	r3, [r7, #3]
 8008ac2:	68f9      	ldr	r1, [r7, #12]
 8008ac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b087      	sub	sp, #28
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f003 0306 	and.w	r3, r3, #6
 8008af2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d102      	bne.n	8008b00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008afa:	2300      	movs	r3, #0
 8008afc:	75fb      	strb	r3, [r7, #23]
 8008afe:	e00a      	b.n	8008b16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d002      	beq.n	8008b0c <USB_GetDevSpeed+0x32>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b06      	cmp	r3, #6
 8008b0a:	d102      	bne.n	8008b12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	75fb      	strb	r3, [r7, #23]
 8008b10:	e001      	b.n	8008b16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b12:	230f      	movs	r3, #15
 8008b14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	785b      	ldrb	r3, [r3, #1]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d13a      	bne.n	8008bb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b46:	69da      	ldr	r2, [r3, #28]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	2101      	movs	r1, #1
 8008b52:	fa01 f303 	lsl.w	r3, r1, r3
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	68f9      	ldr	r1, [r7, #12]
 8008b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d155      	bne.n	8008c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	791b      	ldrb	r3, [r3, #4]
 8008b92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	059b      	lsls	r3, r3, #22
 8008b9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	e036      	b.n	8008c24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	68f9      	ldr	r1, [r7, #12]
 8008bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d11a      	bne.n	8008c24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	791b      	ldrb	r3, [r3, #4]
 8008c08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c0a:	430b      	orrs	r3, r1
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
	...

08008c34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d161      	bne.n	8008d14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c66:	d11f      	bne.n	8008ca8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	0151      	lsls	r1, r2, #5
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	440a      	add	r2, r1
 8008c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68ba      	ldr	r2, [r7, #8]
 8008c98:	0151      	lsls	r1, r2, #5
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	440a      	add	r2, r1
 8008c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc8:	4013      	ands	r3, r2
 8008cca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd2:	69da      	ldr	r2, [r3, #28]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	f003 030f 	and.w	r3, r3, #15
 8008cdc:	2101      	movs	r1, #1
 8008cde:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	68f9      	ldr	r1, [r7, #12]
 8008ce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cec:	4013      	ands	r3, r2
 8008cee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	0159      	lsls	r1, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	440b      	add	r3, r1
 8008d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4b35      	ldr	r3, [pc, #212]	@ (8008de4 <USB_DeactivateEndpoint+0x1b0>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]
 8008d12:	e060      	b.n	8008dd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d2a:	d11f      	bne.n	8008d6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	015a      	lsls	r2, r3, #5
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	4413      	add	r3, r2
 8008d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d82:	041b      	lsls	r3, r3, #16
 8008d84:	43db      	mvns	r3, r3
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d96:	69da      	ldr	r2, [r3, #28]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	2101      	movs	r1, #1
 8008da2:	fa01 f303 	lsl.w	r3, r1, r3
 8008da6:	041b      	lsls	r3, r3, #16
 8008da8:	43db      	mvns	r3, r3
 8008daa:	68f9      	ldr	r1, [r7, #12]
 8008dac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008db0:	4013      	ands	r3, r2
 8008db2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	0159      	lsls	r1, r3, #5
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	440b      	add	r3, r1
 8008dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <USB_DeactivateEndpoint+0x1b4>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr
 8008de4:	ec337800 	.word	0xec337800
 8008de8:	eff37800 	.word	0xeff37800

08008dec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08a      	sub	sp, #40	@ 0x28
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	60b9      	str	r1, [r7, #8]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	f040 817f 	bne.w	800910c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d132      	bne.n	8008e7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	69ba      	ldr	r2, [r7, #24]
 8008e4a:	0151      	lsls	r1, r2, #5
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	440a      	add	r2, r1
 8008e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e74:	0cdb      	lsrs	r3, r3, #19
 8008e76:	04db      	lsls	r3, r3, #19
 8008e78:	6113      	str	r3, [r2, #16]
 8008e7a:	e097      	b.n	8008fac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e96:	0cdb      	lsrs	r3, r3, #19
 8008e98:	04db      	lsls	r3, r3, #19
 8008e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	0151      	lsls	r1, r2, #5
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	440a      	add	r2, r1
 8008eb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008eba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ebe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d11a      	bne.n	8008efc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	691a      	ldr	r2, [r3, #16]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d903      	bls.n	8008eda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	689a      	ldr	r2, [r3, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	0151      	lsls	r1, r2, #5
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	440a      	add	r2, r1
 8008ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ef8:	6113      	str	r3, [r2, #16]
 8008efa:	e044      	b.n	8008f86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	691a      	ldr	r2, [r3, #16]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	1e5a      	subs	r2, r3, #1
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	691a      	ldr	r2, [r3, #16]
 8008f20:	8afb      	ldrh	r3, [r7, #22]
 8008f22:	04d9      	lsls	r1, r3, #19
 8008f24:	4ba4      	ldr	r3, [pc, #656]	@ (80091b8 <USB_EPStartXfer+0x3cc>)
 8008f26:	400b      	ands	r3, r1
 8008f28:	69b9      	ldr	r1, [r7, #24]
 8008f2a:	0148      	lsls	r0, r1, #5
 8008f2c:	69f9      	ldr	r1, [r7, #28]
 8008f2e:	4401      	add	r1, r0
 8008f30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f34:	4313      	orrs	r3, r2
 8008f36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	791b      	ldrb	r3, [r3, #4]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d122      	bne.n	8008f86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	0151      	lsls	r1, r2, #5
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	440a      	add	r2, r1
 8008f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6c:	691a      	ldr	r2, [r3, #16]
 8008f6e:	8afb      	ldrh	r3, [r7, #22]
 8008f70:	075b      	lsls	r3, r3, #29
 8008f72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f76:	69b9      	ldr	r1, [r7, #24]
 8008f78:	0148      	lsls	r0, r1, #5
 8008f7a:	69f9      	ldr	r1, [r7, #28]
 8008f7c:	4401      	add	r1, r0
 8008f7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f82:	4313      	orrs	r3, r2
 8008f84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f9c:	69b9      	ldr	r1, [r7, #24]
 8008f9e:	0148      	lsls	r0, r1, #5
 8008fa0:	69f9      	ldr	r1, [r7, #28]
 8008fa2:	4401      	add	r1, r0
 8008fa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d14b      	bne.n	800904a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	791b      	ldrb	r3, [r3, #4]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d128      	bne.n	8009028 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d110      	bne.n	8009008 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009000:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	e00f      	b.n	8009028 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	440a      	add	r2, r1
 800901e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009026:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	0151      	lsls	r1, r2, #5
 800903a:	69fa      	ldr	r2, [r7, #28]
 800903c:	440a      	add	r2, r1
 800903e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009042:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	e166      	b.n	8009318 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009064:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009068:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	791b      	ldrb	r3, [r3, #4]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d015      	beq.n	800909e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 814e 	beq.w	8009318 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	f003 030f 	and.w	r3, r3, #15
 800908c:	2101      	movs	r1, #1
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	69f9      	ldr	r1, [r7, #28]
 8009094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009098:	4313      	orrs	r3, r2
 800909a:	634b      	str	r3, [r1, #52]	@ 0x34
 800909c:	e13c      	b.n	8009318 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d110      	bne.n	80090d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	69ba      	ldr	r2, [r7, #24]
 80090be:	0151      	lsls	r1, r2, #5
 80090c0:	69fa      	ldr	r2, [r7, #28]
 80090c2:	440a      	add	r2, r1
 80090c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	e00f      	b.n	80090f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69ba      	ldr	r2, [r7, #24]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	68d9      	ldr	r1, [r3, #12]
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	b298      	uxth	r0, r3
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4603      	mov	r3, r0
 8009104:	68f8      	ldr	r0, [r7, #12]
 8009106:	f000 f9b9 	bl	800947c <USB_WritePacket>
 800910a:	e105      	b.n	8009318 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	69fb      	ldr	r3, [r7, #28]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	440a      	add	r2, r1
 8009122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009126:	0cdb      	lsrs	r3, r3, #19
 8009128:	04db      	lsls	r3, r3, #19
 800912a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009146:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800914a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800914e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d132      	bne.n	80091bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009184:	69b9      	ldr	r1, [r7, #24]
 8009186:	0148      	lsls	r0, r1, #5
 8009188:	69f9      	ldr	r1, [r7, #28]
 800918a:	4401      	add	r1, r0
 800918c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009190:	4313      	orrs	r3, r2
 8009192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091b2:	6113      	str	r3, [r2, #16]
 80091b4:	e062      	b.n	800927c <USB_EPStartXfer+0x490>
 80091b6:	bf00      	nop
 80091b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d123      	bne.n	800920c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091c4:	69bb      	ldr	r3, [r7, #24]
 80091c6:	015a      	lsls	r2, r3, #5
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	4413      	add	r3, r2
 80091cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d0:	691a      	ldr	r2, [r3, #16]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091da:	69b9      	ldr	r1, [r7, #24]
 80091dc:	0148      	lsls	r0, r1, #5
 80091de:	69f9      	ldr	r1, [r7, #28]
 80091e0:	4401      	add	r1, r0
 80091e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091e6:	4313      	orrs	r3, r2
 80091e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	69fa      	ldr	r2, [r7, #28]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009204:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009208:	6113      	str	r3, [r2, #16]
 800920a:	e037      	b.n	800927c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	691a      	ldr	r2, [r3, #16]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	4413      	add	r3, r2
 8009216:	1e5a      	subs	r2, r3, #1
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	8afa      	ldrh	r2, [r7, #22]
 8009228:	fb03 f202 	mul.w	r2, r3, r2
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800923c:	691a      	ldr	r2, [r3, #16]
 800923e:	8afb      	ldrh	r3, [r7, #22]
 8009240:	04d9      	lsls	r1, r3, #19
 8009242:	4b38      	ldr	r3, [pc, #224]	@ (8009324 <USB_EPStartXfer+0x538>)
 8009244:	400b      	ands	r3, r1
 8009246:	69b9      	ldr	r1, [r7, #24]
 8009248:	0148      	lsls	r0, r1, #5
 800924a:	69f9      	ldr	r1, [r7, #28]
 800924c:	4401      	add	r1, r0
 800924e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009252:	4313      	orrs	r3, r2
 8009254:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009262:	691a      	ldr	r2, [r3, #16]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6a1b      	ldr	r3, [r3, #32]
 8009268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800926c:	69b9      	ldr	r1, [r7, #24]
 800926e:	0148      	lsls	r0, r1, #5
 8009270:	69f9      	ldr	r1, [r7, #28]
 8009272:	4401      	add	r1, r0
 8009274:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009278:	4313      	orrs	r3, r2
 800927a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800927c:	79fb      	ldrb	r3, [r7, #7]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d10d      	bne.n	800929e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d009      	beq.n	800929e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	68d9      	ldr	r1, [r3, #12]
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800929a:	460a      	mov	r2, r1
 800929c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	791b      	ldrb	r3, [r3, #4]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d128      	bne.n	80092f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d110      	bne.n	80092d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	e00f      	b.n	80092f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	0151      	lsls	r1, r2, #5
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	440a      	add	r2, r1
 800930e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009312:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3720      	adds	r7, #32
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	1ff80000 	.word	0x1ff80000

08009328 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	785b      	ldrb	r3, [r3, #1]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d14a      	bne.n	80093dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800935a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800935e:	f040 8086 	bne.w	800946e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009380:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009384:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	7812      	ldrb	r2, [r2, #0]
 800939a:	0151      	lsls	r1, r2, #5
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	440a      	add	r2, r1
 80093a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d902      	bls.n	80093c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	75fb      	strb	r3, [r7, #23]
          break;
 80093be:	e056      	b.n	800946e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093d8:	d0e7      	beq.n	80093aa <USB_EPStopXfer+0x82>
 80093da:	e048      	b.n	800946e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f4:	d13b      	bne.n	800946e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009414:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009418:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	0151      	lsls	r1, r2, #5
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	440a      	add	r2, r1
 8009434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009438:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800943c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	3301      	adds	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f242 7210 	movw	r2, #10000	@ 0x2710
 800944a:	4293      	cmp	r3, r2
 800944c:	d902      	bls.n	8009454 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	75fb      	strb	r3, [r7, #23]
          break;
 8009452:	e00c      	b.n	800946e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800946c:	d0e7      	beq.n	800943e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009470:	4618      	mov	r0, r3
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800947c:	b480      	push	{r7}
 800947e:	b089      	sub	sp, #36	@ 0x24
 8009480:	af00      	add	r7, sp, #0
 8009482:	60f8      	str	r0, [r7, #12]
 8009484:	60b9      	str	r1, [r7, #8]
 8009486:	4611      	mov	r1, r2
 8009488:	461a      	mov	r2, r3
 800948a:	460b      	mov	r3, r1
 800948c:	71fb      	strb	r3, [r7, #7]
 800948e:	4613      	mov	r3, r2
 8009490:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800949a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d123      	bne.n	80094ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094a2:	88bb      	ldrh	r3, [r7, #4]
 80094a4:	3303      	adds	r3, #3
 80094a6:	089b      	lsrs	r3, r3, #2
 80094a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094aa:	2300      	movs	r3, #0
 80094ac:	61bb      	str	r3, [r7, #24]
 80094ae:	e018      	b.n	80094e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	031a      	lsls	r2, r3, #12
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094bc:	461a      	mov	r2, r3
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	3301      	adds	r3, #1
 80094c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	3301      	adds	r3, #1
 80094ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	3301      	adds	r3, #1
 80094d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	3301      	adds	r3, #1
 80094da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	3301      	adds	r3, #1
 80094e0:	61bb      	str	r3, [r7, #24]
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d3e2      	bcc.n	80094b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3724      	adds	r7, #36	@ 0x24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b08b      	sub	sp, #44	@ 0x2c
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	60b9      	str	r1, [r7, #8]
 8009502:	4613      	mov	r3, r2
 8009504:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800950e:	88fb      	ldrh	r3, [r7, #6]
 8009510:	089b      	lsrs	r3, r3, #2
 8009512:	b29b      	uxth	r3, r3
 8009514:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009516:	88fb      	ldrh	r3, [r7, #6]
 8009518:	f003 0303 	and.w	r3, r3, #3
 800951c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800951e:	2300      	movs	r3, #0
 8009520:	623b      	str	r3, [r7, #32]
 8009522:	e014      	b.n	800954e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009532:	3301      	adds	r3, #1
 8009534:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009538:	3301      	adds	r3, #1
 800953a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800953c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953e:	3301      	adds	r3, #1
 8009540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009544:	3301      	adds	r3, #1
 8009546:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	3301      	adds	r3, #1
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	6a3a      	ldr	r2, [r7, #32]
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	429a      	cmp	r2, r3
 8009554:	d3e6      	bcc.n	8009524 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009556:	8bfb      	ldrh	r3, [r7, #30]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01e      	beq.n	800959a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009566:	461a      	mov	r2, r3
 8009568:	f107 0310 	add.w	r3, r7, #16
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	fa22 f303 	lsr.w	r3, r2, r3
 800957c:	b2da      	uxtb	r2, r3
 800957e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009580:	701a      	strb	r2, [r3, #0]
      i++;
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	3301      	adds	r3, #1
 8009586:	623b      	str	r3, [r7, #32]
      pDest++;
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	3301      	adds	r3, #1
 800958c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800958e:	8bfb      	ldrh	r3, [r7, #30]
 8009590:	3b01      	subs	r3, #1
 8009592:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009594:	8bfb      	ldrh	r3, [r7, #30]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1ea      	bne.n	8009570 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800959a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800959c:	4618      	mov	r0, r3
 800959e:	372c      	adds	r7, #44	@ 0x2c
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d12c      	bne.n	800961e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db12      	blt.n	80095fc <USB_EPSetStall+0x54>
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00f      	beq.n	80095fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	015a      	lsls	r2, r3, #5
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	4413      	add	r3, r2
 80095e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	0151      	lsls	r1, r2, #5
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	440a      	add	r2, r1
 80095f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	440a      	add	r2, r1
 8009612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009616:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	e02b      	b.n	8009676 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	db12      	blt.n	8009656 <USB_EPSetStall+0xae>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00f      	beq.n	8009656 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009650:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009654:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	0151      	lsls	r1, r2, #5
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	440a      	add	r2, r1
 800966c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009674:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d128      	bne.n	80096f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	0151      	lsls	r1, r2, #5
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	440a      	add	r2, r1
 80096b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d003      	beq.n	80096d0 <USB_EPClearStall+0x4c>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	791b      	ldrb	r3, [r3, #4]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d138      	bne.n	8009742 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	0151      	lsls	r1, r2, #5
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	440a      	add	r2, r1
 80096e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e027      	b.n	8009742 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	0151      	lsls	r1, r2, #5
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	440a      	add	r2, r1
 8009708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800970c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009710:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	791b      	ldrb	r3, [r3, #4]
 8009716:	2b03      	cmp	r3, #3
 8009718:	d003      	beq.n	8009722 <USB_EPClearStall+0x9e>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	791b      	ldrb	r3, [r3, #4]
 800971e:	2b02      	cmp	r3, #2
 8009720:	d10f      	bne.n	8009742 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	0151      	lsls	r1, r2, #5
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	440a      	add	r2, r1
 8009738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800973c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009740:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	460b      	mov	r3, r1
 800975a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800976e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009772:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009784:	68f9      	ldr	r1, [r7, #12]
 8009786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800978a:	4313      	orrs	r3, r2
 800978c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097ca:	f023 0302 	bic.w	r3, r3, #2
 80097ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr

080097de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097de:	b480      	push	{r7}
 80097e0:	b085      	sub	sp, #20
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097f8:	f023 0303 	bic.w	r3, r3, #3
 80097fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800980c:	f043 0302 	orr.w	r3, r3, #2
 8009810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699b      	ldr	r3, [r3, #24]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	4013      	ands	r3, r2
 8009836:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009838:	68fb      	ldr	r3, [r7, #12]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	4013      	ands	r3, r2
 8009868:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	0c1b      	lsrs	r3, r3, #16
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800987a:	b480      	push	{r7}
 800987c:	b085      	sub	sp, #20
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	4013      	ands	r3, r2
 800989c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	b29b      	uxth	r3, r3
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098be:	78fb      	ldrb	r3, [r7, #3]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4013      	ands	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098dc:	68bb      	ldr	r3, [r7, #8]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098ea:	b480      	push	{r7}
 80098ec:	b087      	sub	sp, #28
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800990c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	fa22 f303 	lsr.w	r3, r2, r3
 800991a:	01db      	lsls	r3, r3, #7
 800991c:	b2db      	uxtb	r3, r3
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	4013      	ands	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009938:	68bb      	ldr	r3, [r7, #8]
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f003 0301 	and.w	r3, r3, #1
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009980:	f023 0307 	bic.w	r3, r3, #7
 8009984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	460b      	mov	r3, r1
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	333c      	adds	r3, #60	@ 0x3c
 80099be:	3304      	adds	r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	4a26      	ldr	r2, [pc, #152]	@ (8009a60 <USB_EP0_OutStart+0xb8>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d90a      	bls.n	80099e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099dc:	d101      	bne.n	80099e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	e037      	b.n	8009a52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e8:	461a      	mov	r2, r3
 80099ea:	2300      	movs	r3, #0
 80099ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a10:	f043 0318 	orr.w	r3, r3, #24
 8009a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d10f      	bne.n	8009a50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a36:	461a      	mov	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	4f54300a 	.word	0x4f54300a

08009a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a7c:	d901      	bls.n	8009a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e01b      	b.n	8009aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	daf2      	bge.n	8009a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f043 0201 	orr.w	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aa6:	d901      	bls.n	8009aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e006      	b.n	8009aba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d0f0      	beq.n	8009a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
	...

08009ac8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ad4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009ad8:	f002 fc9a 	bl	800c410 <USBD_static_malloc>
 8009adc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d109      	bne.n	8009af8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32b0      	adds	r2, #176	@ 0xb0
 8009aee:	2100      	movs	r1, #0
 8009af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009af4:	2302      	movs	r3, #2
 8009af6:	e0d4      	b.n	8009ca2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009af8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009afc:	2100      	movs	r1, #0
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f003 fa47 	bl	800cf92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	32b0      	adds	r2, #176	@ 0xb0
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	32b0      	adds	r2, #176	@ 0xb0
 8009b1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7c1b      	ldrb	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d138      	bne.n	8009ba2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b30:	4b5e      	ldr	r3, [pc, #376]	@ (8009cac <USBD_CDC_Init+0x1e4>)
 8009b32:	7819      	ldrb	r1, [r3, #0]
 8009b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b38:	2202      	movs	r2, #2
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f002 fb45 	bl	800c1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b40:	4b5a      	ldr	r3, [pc, #360]	@ (8009cac <USBD_CDC_Init+0x1e4>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	f003 020f 	and.w	r2, r3, #15
 8009b48:	6879      	ldr	r1, [r7, #4]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	3324      	adds	r3, #36	@ 0x24
 8009b56:	2201      	movs	r2, #1
 8009b58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b5a:	4b55      	ldr	r3, [pc, #340]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009b5c:	7819      	ldrb	r1, [r3, #0]
 8009b5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b62:	2202      	movs	r2, #2
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f002 fb30 	bl	800c1ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b6a:	4b51      	ldr	r3, [pc, #324]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 020f 	and.w	r2, r3, #15
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b82:	2201      	movs	r2, #1
 8009b84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b86:	4b4b      	ldr	r3, [pc, #300]	@ (8009cb4 <USBD_CDC_Init+0x1ec>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	3326      	adds	r3, #38	@ 0x26
 8009b9c:	2210      	movs	r2, #16
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	e035      	b.n	8009c0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ba2:	4b42      	ldr	r3, [pc, #264]	@ (8009cac <USBD_CDC_Init+0x1e4>)
 8009ba4:	7819      	ldrb	r1, [r3, #0]
 8009ba6:	2340      	movs	r3, #64	@ 0x40
 8009ba8:	2202      	movs	r2, #2
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f002 fb0d 	bl	800c1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8009cac <USBD_CDC_Init+0x1e4>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	f003 020f 	and.w	r2, r3, #15
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	440b      	add	r3, r1
 8009bc4:	3324      	adds	r3, #36	@ 0x24
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bca:	4b39      	ldr	r3, [pc, #228]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009bcc:	7819      	ldrb	r1, [r3, #0]
 8009bce:	2340      	movs	r3, #64	@ 0x40
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f002 faf9 	bl	800c1ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bd8:	4b35      	ldr	r3, [pc, #212]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	f003 020f 	and.w	r2, r3, #15
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	4613      	mov	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	440b      	add	r3, r1
 8009bec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb4 <USBD_CDC_Init+0x1ec>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	440b      	add	r3, r1
 8009c08:	3326      	adds	r3, #38	@ 0x26
 8009c0a:	2210      	movs	r2, #16
 8009c0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c0e:	4b29      	ldr	r3, [pc, #164]	@ (8009cb4 <USBD_CDC_Init+0x1ec>)
 8009c10:	7819      	ldrb	r1, [r3, #0]
 8009c12:	2308      	movs	r3, #8
 8009c14:	2203      	movs	r2, #3
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f002 fad7 	bl	800c1ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c1c:	4b25      	ldr	r3, [pc, #148]	@ (8009cb4 <USBD_CDC_Init+0x1ec>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	f003 020f 	and.w	r2, r3, #15
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4613      	mov	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	440b      	add	r3, r1
 8009c30:	3324      	adds	r3, #36	@ 0x24
 8009c32:	2201      	movs	r2, #1
 8009c34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	33b0      	adds	r3, #176	@ 0xb0
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	e018      	b.n	8009ca2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	7c1b      	ldrb	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c78:	4b0d      	ldr	r3, [pc, #52]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009c7a:	7819      	ldrb	r1, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f002 fb8e 	bl	800c3a8 <USBD_LL_PrepareReceive>
 8009c8c:	e008      	b.n	8009ca0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c8e:	4b08      	ldr	r3, [pc, #32]	@ (8009cb0 <USBD_CDC_Init+0x1e8>)
 8009c90:	7819      	ldrb	r1, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c98:	2340      	movs	r3, #64	@ 0x40
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f002 fb84 	bl	800c3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200002bb 	.word	0x200002bb
 8009cb0:	200002bc 	.word	0x200002bc
 8009cb4:	200002bd 	.word	0x200002bd

08009cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8009db0 <USBD_CDC_DeInit+0xf8>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 faa3 	bl	800c216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cd0:	4b37      	ldr	r3, [pc, #220]	@ (8009db0 <USBD_CDC_DeInit+0xf8>)
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 020f 	and.w	r2, r3, #15
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4413      	add	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	440b      	add	r3, r1
 8009ce4:	3324      	adds	r3, #36	@ 0x24
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009cea:	4b32      	ldr	r3, [pc, #200]	@ (8009db4 <USBD_CDC_DeInit+0xfc>)
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f002 fa90 	bl	800c216 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8009db4 <USBD_CDC_DeInit+0xfc>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	f003 020f 	and.w	r2, r3, #15
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	440b      	add	r3, r1
 8009d0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d12:	4b29      	ldr	r3, [pc, #164]	@ (8009db8 <USBD_CDC_DeInit+0x100>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f002 fa7c 	bl	800c216 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d1e:	4b26      	ldr	r3, [pc, #152]	@ (8009db8 <USBD_CDC_DeInit+0x100>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	f003 020f 	and.w	r2, r3, #15
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	440b      	add	r3, r1
 8009d32:	3324      	adds	r3, #36	@ 0x24
 8009d34:	2200      	movs	r2, #0
 8009d36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d38:	4b1f      	ldr	r3, [pc, #124]	@ (8009db8 <USBD_CDC_DeInit+0x100>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 020f 	and.w	r2, r3, #15
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3326      	adds	r3, #38	@ 0x26
 8009d4e:	2200      	movs	r2, #0
 8009d50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	32b0      	adds	r2, #176	@ 0xb0
 8009d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d01f      	beq.n	8009da4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	33b0      	adds	r3, #176	@ 0xb0
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	32b0      	adds	r2, #176	@ 0xb0
 8009d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f002 fb50 	bl	800c42c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	32b0      	adds	r2, #176	@ 0xb0
 8009d96:	2100      	movs	r1, #0
 8009d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	200002bb 	.word	0x200002bb
 8009db4:	200002bc 	.word	0x200002bc
 8009db8:	200002bd 	.word	0x200002bd

08009dbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	32b0      	adds	r2, #176	@ 0xb0
 8009dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0bf      	b.n	8009f6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d050      	beq.n	8009e9a <USBD_CDC_Setup+0xde>
 8009df8:	2b20      	cmp	r3, #32
 8009dfa:	f040 80af 	bne.w	8009f5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	88db      	ldrh	r3, [r3, #6]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d03a      	beq.n	8009e7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	b25b      	sxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	da1b      	bge.n	8009e48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	33b0      	adds	r3, #176	@ 0xb0
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4413      	add	r3, r2
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	88d2      	ldrh	r2, [r2, #6]
 8009e2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	88db      	ldrh	r3, [r3, #6]
 8009e32:	2b07      	cmp	r3, #7
 8009e34:	bf28      	it	cs
 8009e36:	2307      	movcs	r3, #7
 8009e38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	89fa      	ldrh	r2, [r7, #14]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 fd93 	bl	800b96c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e46:	e090      	b.n	8009f6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	785a      	ldrb	r2, [r3, #1]
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	88db      	ldrh	r3, [r3, #6]
 8009e56:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e58:	d803      	bhi.n	8009e62 <USBD_CDC_Setup+0xa6>
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	88db      	ldrh	r3, [r3, #6]
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	e000      	b.n	8009e64 <USBD_CDC_Setup+0xa8>
 8009e62:	2240      	movs	r2, #64	@ 0x40
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e6a:	6939      	ldr	r1, [r7, #16]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e72:	461a      	mov	r2, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 fda5 	bl	800b9c4 <USBD_CtlPrepareRx>
      break;
 8009e7a:	e076      	b.n	8009f6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	33b0      	adds	r3, #176	@ 0xb0
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	7850      	ldrb	r0, [r2, #1]
 8009e92:	2200      	movs	r2, #0
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	4798      	blx	r3
      break;
 8009e98:	e067      	b.n	8009f6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	785b      	ldrb	r3, [r3, #1]
 8009e9e:	2b0b      	cmp	r3, #11
 8009ea0:	d851      	bhi.n	8009f46 <USBD_CDC_Setup+0x18a>
 8009ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ea8 <USBD_CDC_Setup+0xec>)
 8009ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea8:	08009ed9 	.word	0x08009ed9
 8009eac:	08009f55 	.word	0x08009f55
 8009eb0:	08009f47 	.word	0x08009f47
 8009eb4:	08009f47 	.word	0x08009f47
 8009eb8:	08009f47 	.word	0x08009f47
 8009ebc:	08009f47 	.word	0x08009f47
 8009ec0:	08009f47 	.word	0x08009f47
 8009ec4:	08009f47 	.word	0x08009f47
 8009ec8:	08009f47 	.word	0x08009f47
 8009ecc:	08009f47 	.word	0x08009f47
 8009ed0:	08009f03 	.word	0x08009f03
 8009ed4:	08009f2d 	.word	0x08009f2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d107      	bne.n	8009ef4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ee4:	f107 030a 	add.w	r3, r7, #10
 8009ee8:	2202      	movs	r2, #2
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fd3d 	bl	800b96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ef2:	e032      	b.n	8009f5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ef4:	6839      	ldr	r1, [r7, #0]
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f001 fcbb 	bl	800b872 <USBD_CtlError>
            ret = USBD_FAIL;
 8009efc:	2303      	movs	r3, #3
 8009efe:	75fb      	strb	r3, [r7, #23]
          break;
 8009f00:	e02b      	b.n	8009f5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b03      	cmp	r3, #3
 8009f0c:	d107      	bne.n	8009f1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f0e:	f107 030d 	add.w	r3, r7, #13
 8009f12:	2201      	movs	r2, #1
 8009f14:	4619      	mov	r1, r3
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f001 fd28 	bl	800b96c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f1c:	e01d      	b.n	8009f5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f1e:	6839      	ldr	r1, [r7, #0]
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fca6 	bl	800b872 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f26:	2303      	movs	r3, #3
 8009f28:	75fb      	strb	r3, [r7, #23]
          break;
 8009f2a:	e016      	b.n	8009f5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	d00f      	beq.n	8009f58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 fc99 	bl	800b872 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f40:	2303      	movs	r3, #3
 8009f42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f44:	e008      	b.n	8009f58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 fc92 	bl	800b872 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	75fb      	strb	r3, [r7, #23]
          break;
 8009f52:	e002      	b.n	8009f5a <USBD_CDC_Setup+0x19e>
          break;
 8009f54:	bf00      	nop
 8009f56:	e008      	b.n	8009f6a <USBD_CDC_Setup+0x1ae>
          break;
 8009f58:	bf00      	nop
      }
      break;
 8009f5a:	e006      	b.n	8009f6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 fc87 	bl	800b872 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	75fb      	strb	r3, [r7, #23]
      break;
 8009f68:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	32b0      	adds	r2, #176	@ 0xb0
 8009f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e065      	b.n	800a06a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	32b0      	adds	r2, #176	@ 0xb0
 8009fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fae:	78fb      	ldrb	r3, [r7, #3]
 8009fb0:	f003 020f 	and.w	r2, r3, #15
 8009fb4:	6879      	ldr	r1, [r7, #4]
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3318      	adds	r3, #24
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02f      	beq.n	800a028 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	f003 020f 	and.w	r2, r3, #15
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	440b      	add	r3, r1
 8009fda:	3318      	adds	r3, #24
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	78fb      	ldrb	r3, [r7, #3]
 8009fe0:	f003 010f 	and.w	r1, r3, #15
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	00db      	lsls	r3, r3, #3
 8009fea:	440b      	add	r3, r1
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4403      	add	r3, r0
 8009ff0:	331c      	adds	r3, #28
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	fbb2 f1f3 	udiv	r1, r2, r3
 8009ff8:	fb01 f303 	mul.w	r3, r1, r3
 8009ffc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d112      	bne.n	800a028 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	f003 020f 	and.w	r2, r3, #15
 800a008:	6879      	ldr	r1, [r7, #4]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	440b      	add	r3, r1
 800a014:	3318      	adds	r3, #24
 800a016:	2200      	movs	r2, #0
 800a018:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a01a:	78f9      	ldrb	r1, [r7, #3]
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f002 f9a0 	bl	800c366 <USBD_LL_Transmit>
 800a026:	e01f      	b.n	800a068 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	33b0      	adds	r3, #176	@ 0xb0
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d010      	beq.n	800a068 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	33b0      	adds	r3, #176	@ 0xb0
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a064:	78fa      	ldrb	r2, [r7, #3]
 800a066:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	32b0      	adds	r2, #176	@ 0xb0
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	32b0      	adds	r2, #176	@ 0xb0
 800a098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e01a      	b.n	800a0da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f002 f99e 	bl	800c3ea <USBD_LL_GetRxDataSize>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	33b0      	adds	r3, #176	@ 0xb0
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0ce:	68fa      	ldr	r2, [r7, #12]
 800a0d0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b084      	sub	sp, #16
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	32b0      	adds	r2, #176	@ 0xb0
 800a0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a100:	2303      	movs	r3, #3
 800a102:	e024      	b.n	800a14e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	33b0      	adds	r3, #176	@ 0xb0
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d019      	beq.n	800a14c <USBD_CDC_EP0_RxReady+0x6a>
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a11e:	2bff      	cmp	r3, #255	@ 0xff
 800a120:	d014      	beq.n	800a14c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	33b0      	adds	r3, #176	@ 0xb0
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4413      	add	r3, r2
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	68fa      	ldr	r2, [r7, #12]
 800a136:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a13a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a142:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	22ff      	movs	r2, #255	@ 0xff
 800a148:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a160:	2182      	movs	r1, #130	@ 0x82
 800a162:	4818      	ldr	r0, [pc, #96]	@ (800a1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a164:	f000 fd4f 	bl	800ac06 <USBD_GetEpDesc>
 800a168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a16a:	2101      	movs	r1, #1
 800a16c:	4815      	ldr	r0, [pc, #84]	@ (800a1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a16e:	f000 fd4a 	bl	800ac06 <USBD_GetEpDesc>
 800a172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a174:	2181      	movs	r1, #129	@ 0x81
 800a176:	4813      	ldr	r0, [pc, #76]	@ (800a1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a178:	f000 fd45 	bl	800ac06 <USBD_GetEpDesc>
 800a17c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2210      	movs	r2, #16
 800a188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d006      	beq.n	800a19e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	2200      	movs	r2, #0
 800a194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a198:	711a      	strb	r2, [r3, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d006      	beq.n	800a1b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1ac:	711a      	strb	r2, [r3, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2243      	movs	r2, #67	@ 0x43
 800a1b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1b8:	4b02      	ldr	r3, [pc, #8]	@ (800a1c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3718      	adds	r7, #24
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000278 	.word	0x20000278

0800a1c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1d0:	2182      	movs	r1, #130	@ 0x82
 800a1d2:	4818      	ldr	r0, [pc, #96]	@ (800a234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1d4:	f000 fd17 	bl	800ac06 <USBD_GetEpDesc>
 800a1d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4815      	ldr	r0, [pc, #84]	@ (800a234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1de:	f000 fd12 	bl	800ac06 <USBD_GetEpDesc>
 800a1e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1e4:	2181      	movs	r1, #129	@ 0x81
 800a1e6:	4813      	ldr	r0, [pc, #76]	@ (800a234 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1e8:	f000 fd0d 	bl	800ac06 <USBD_GetEpDesc>
 800a1ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2210      	movs	r2, #16
 800a1f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2200      	movs	r2, #0
 800a204:	711a      	strb	r2, [r3, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f042 0202 	orr.w	r2, r2, #2
 800a20c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d006      	beq.n	800a222 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	711a      	strb	r2, [r3, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f042 0202 	orr.w	r2, r2, #2
 800a220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2243      	movs	r2, #67	@ 0x43
 800a226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a228:	4b02      	ldr	r3, [pc, #8]	@ (800a234 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3718      	adds	r7, #24
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000278 	.word	0x20000278

0800a238 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a240:	2182      	movs	r1, #130	@ 0x82
 800a242:	4818      	ldr	r0, [pc, #96]	@ (800a2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a244:	f000 fcdf 	bl	800ac06 <USBD_GetEpDesc>
 800a248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a24a:	2101      	movs	r1, #1
 800a24c:	4815      	ldr	r0, [pc, #84]	@ (800a2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a24e:	f000 fcda 	bl	800ac06 <USBD_GetEpDesc>
 800a252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a254:	2181      	movs	r1, #129	@ 0x81
 800a256:	4813      	ldr	r0, [pc, #76]	@ (800a2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a258:	f000 fcd5 	bl	800ac06 <USBD_GetEpDesc>
 800a25c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2210      	movs	r2, #16
 800a268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2200      	movs	r2, #0
 800a274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a278:	711a      	strb	r2, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d006      	beq.n	800a292 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a28c:	711a      	strb	r2, [r3, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2243      	movs	r2, #67	@ 0x43
 800a296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a298:	4b02      	ldr	r3, [pc, #8]	@ (800a2a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20000278 	.word	0x20000278

0800a2a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	220a      	movs	r2, #10
 800a2b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2b6:	4b03      	ldr	r3, [pc, #12]	@ (800a2c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr
 800a2c4:	20000234 	.word	0x20000234

0800a2c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d101      	bne.n	800a2dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e009      	b.n	800a2f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	33b0      	adds	r3, #176	@ 0xb0
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b087      	sub	sp, #28
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	32b0      	adds	r2, #176	@ 0xb0
 800a312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a316:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a31e:	2303      	movs	r3, #3
 800a320:	e008      	b.n	800a334 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	32b0      	adds	r2, #176	@ 0xb0
 800a354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a358:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a360:	2303      	movs	r3, #3
 800a362:	e004      	b.n	800a36e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
	...

0800a37c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32b0      	adds	r2, #176	@ 0xb0
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e025      	b.n	800a3ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d11f      	bne.n	800a3ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3b4:	4b10      	ldr	r3, [pc, #64]	@ (800a3f8 <USBD_CDC_TransmitPacket+0x7c>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 020f 	and.w	r2, r3, #15
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4403      	add	r3, r0
 800a3ce:	3318      	adds	r3, #24
 800a3d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3d2:	4b09      	ldr	r3, [pc, #36]	@ (800a3f8 <USBD_CDC_TransmitPacket+0x7c>)
 800a3d4:	7819      	ldrb	r1, [r3, #0]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f001 ffbf 	bl	800c366 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	200002bb 	.word	0x200002bb

0800a3fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	32b0      	adds	r2, #176	@ 0xb0
 800a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a412:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	32b0      	adds	r2, #176	@ 0xb0
 800a41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a426:	2303      	movs	r3, #3
 800a428:	e018      	b.n	800a45c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	7c1b      	ldrb	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a432:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <USBD_CDC_ReceivePacket+0x68>)
 800a434:	7819      	ldrb	r1, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a43c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f001 ffb1 	bl	800c3a8 <USBD_LL_PrepareReceive>
 800a446:	e008      	b.n	800a45a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a448:	4b06      	ldr	r3, [pc, #24]	@ (800a464 <USBD_CDC_ReceivePacket+0x68>)
 800a44a:	7819      	ldrb	r1, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a452:	2340      	movs	r3, #64	@ 0x40
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 ffa7 	bl	800c3a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	200002bc 	.word	0x200002bc

0800a468 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	4613      	mov	r3, r2
 800a474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e01f      	b.n	800a4c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	79fa      	ldrb	r2, [r7, #7]
 800a4b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f001 fe21 	bl	800c0fc <USBD_LL_Init>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3718      	adds	r7, #24
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e025      	b.n	800a52c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	32ae      	adds	r2, #174	@ 0xae
 800a4f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00f      	beq.n	800a51c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	32ae      	adds	r2, #174	@ 0xae
 800a506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50c:	f107 020e 	add.w	r2, r7, #14
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	4602      	mov	r2, r0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f001 fe29 	bl	800c194 <USBD_LL_Start>
 800a542:	4603      	mov	r3, r0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a554:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a556:	4618      	mov	r0, r3
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d009      	beq.n	800a590 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	4611      	mov	r1, r2
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	4798      	blx	r3
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	78fa      	ldrb	r2, [r7, #3]
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5de:	6839      	ldr	r1, [r7, #0]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 f90c 	bl	800b7fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	2b02      	cmp	r3, #2
 800a608:	d01a      	beq.n	800a640 <USBD_LL_SetupStage+0x72>
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d822      	bhi.n	800a654 <USBD_LL_SetupStage+0x86>
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <USBD_LL_SetupStage+0x4a>
 800a612:	2b01      	cmp	r3, #1
 800a614:	d00a      	beq.n	800a62c <USBD_LL_SetupStage+0x5e>
 800a616:	e01d      	b.n	800a654 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fb63 	bl	800acec <USBD_StdDevReq>
 800a626:	4603      	mov	r3, r0
 800a628:	73fb      	strb	r3, [r7, #15]
      break;
 800a62a:	e020      	b.n	800a66e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fbcb 	bl	800add0 <USBD_StdItfReq>
 800a63a:	4603      	mov	r3, r0
 800a63c:	73fb      	strb	r3, [r7, #15]
      break;
 800a63e:	e016      	b.n	800a66e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fc2d 	bl	800aea8 <USBD_StdEPReq>
 800a64e:	4603      	mov	r3, r0
 800a650:	73fb      	strb	r3, [r7, #15]
      break;
 800a652:	e00c      	b.n	800a66e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a65a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	4619      	mov	r1, r3
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 fdf6 	bl	800c254 <USBD_LL_StallEP>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]
      break;
 800a66c:	bf00      	nop
  }

  return ret;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	460b      	mov	r3, r1
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a68a:	7afb      	ldrb	r3, [r7, #11]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d16e      	bne.n	800a76e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	f040 8098 	bne.w	800a7d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d913      	bls.n	800a6d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	1ad2      	subs	r2, r2, r3
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	68da      	ldr	r2, [r3, #12]
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	bf28      	it	cs
 800a6ca:	4613      	movcs	r3, r2
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f001 f994 	bl	800b9fe <USBD_CtlContinueRx>
 800a6d6:	e07d      	b.n	800a7d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d014      	beq.n	800a710 <USBD_LL_DataOutStage+0x98>
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d81d      	bhi.n	800a726 <USBD_LL_DataOutStage+0xae>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <USBD_LL_DataOutStage+0x7c>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d003      	beq.n	800a6fa <USBD_LL_DataOutStage+0x82>
 800a6f2:	e018      	b.n	800a726 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	75bb      	strb	r3, [r7, #22]
            break;
 800a6f8:	e018      	b.n	800a72c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a700:	b2db      	uxtb	r3, r3
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fa64 	bl	800abd2 <USBD_CoreFindIF>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75bb      	strb	r3, [r7, #22]
            break;
 800a70e:	e00d      	b.n	800a72c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a716:	b2db      	uxtb	r3, r3
 800a718:	4619      	mov	r1, r3
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 fa66 	bl	800abec <USBD_CoreFindEP>
 800a720:	4603      	mov	r3, r0
 800a722:	75bb      	strb	r3, [r7, #22]
            break;
 800a724:	e002      	b.n	800a72c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a726:	2300      	movs	r3, #0
 800a728:	75bb      	strb	r3, [r7, #22]
            break;
 800a72a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a72c:	7dbb      	ldrb	r3, [r7, #22]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d119      	bne.n	800a766 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b03      	cmp	r3, #3
 800a73c:	d113      	bne.n	800a766 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a73e:	7dba      	ldrb	r2, [r7, #22]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	32ae      	adds	r2, #174	@ 0xae
 800a744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a74e:	7dba      	ldrb	r2, [r7, #22]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a756:	7dba      	ldrb	r2, [r7, #22]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	32ae      	adds	r2, #174	@ 0xae
 800a75c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f001 f95a 	bl	800ba20 <USBD_CtlSendStatus>
 800a76c:	e032      	b.n	800a7d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a76e:	7afb      	ldrb	r3, [r7, #11]
 800a770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a774:	b2db      	uxtb	r3, r3
 800a776:	4619      	mov	r1, r3
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 fa37 	bl	800abec <USBD_CoreFindEP>
 800a77e:	4603      	mov	r3, r0
 800a780:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a782:	7dbb      	ldrb	r3, [r7, #22]
 800a784:	2bff      	cmp	r3, #255	@ 0xff
 800a786:	d025      	beq.n	800a7d4 <USBD_LL_DataOutStage+0x15c>
 800a788:	7dbb      	ldrb	r3, [r7, #22]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d122      	bne.n	800a7d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b03      	cmp	r3, #3
 800a798:	d117      	bne.n	800a7ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a79a:	7dba      	ldrb	r2, [r7, #22]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	32ae      	adds	r2, #174	@ 0xae
 800a7a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00f      	beq.n	800a7ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7aa:	7dba      	ldrb	r2, [r7, #22]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7b2:	7dba      	ldrb	r2, [r7, #22]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	32ae      	adds	r2, #174	@ 0xae
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	7afa      	ldrb	r2, [r7, #11]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	4798      	blx	r3
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7d0:	7dfb      	ldrb	r3, [r7, #23]
 800a7d2:	e000      	b.n	800a7d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3718      	adds	r7, #24
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b086      	sub	sp, #24
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	607a      	str	r2, [r7, #4]
 800a7ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d16f      	bne.n	800a8d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3314      	adds	r3, #20
 800a7f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d15a      	bne.n	800a8b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d914      	bls.n	800a838 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	689a      	ldr	r2, [r3, #8]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	1ad2      	subs	r2, r2, r3
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	461a      	mov	r2, r3
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f001 f8bc 	bl	800b9a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a82a:	2300      	movs	r3, #0
 800a82c:	2200      	movs	r2, #0
 800a82e:	2100      	movs	r1, #0
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f001 fdb9 	bl	800c3a8 <USBD_LL_PrepareReceive>
 800a836:	e03f      	b.n	800a8b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	429a      	cmp	r2, r3
 800a842:	d11c      	bne.n	800a87e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d316      	bcc.n	800a87e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d20f      	bcs.n	800a87e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f001 f89d 	bl	800b9a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a870:	2300      	movs	r3, #0
 800a872:	2200      	movs	r2, #0
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f001 fd96 	bl	800c3a8 <USBD_LL_PrepareReceive>
 800a87c:	e01c      	b.n	800a8b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a884:	b2db      	uxtb	r3, r3
 800a886:	2b03      	cmp	r3, #3
 800a888:	d10f      	bne.n	800a8aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d009      	beq.n	800a8aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8aa:	2180      	movs	r1, #128	@ 0x80
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f001 fcd1 	bl	800c254 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f001 f8c7 	bl	800ba46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d03a      	beq.n	800a938 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f7ff fe42 	bl	800a54c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8d0:	e032      	b.n	800a938 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
 800a8d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	4619      	mov	r1, r3
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f985 	bl	800abec <USBD_CoreFindEP>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	2bff      	cmp	r3, #255	@ 0xff
 800a8ea:	d025      	beq.n	800a938 <USBD_LL_DataInStage+0x15a>
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d122      	bne.n	800a938 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d11c      	bne.n	800a938 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a8fe:	7dfa      	ldrb	r2, [r7, #23]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	32ae      	adds	r2, #174	@ 0xae
 800a904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d014      	beq.n	800a938 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a90e:	7dfa      	ldrb	r2, [r7, #23]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a916:	7dfa      	ldrb	r2, [r7, #23]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	32ae      	adds	r2, #174	@ 0xae
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	7afa      	ldrb	r2, [r7, #11]
 800a924:	4611      	mov	r1, r2
 800a926:	68f8      	ldr	r0, [r7, #12]
 800a928:	4798      	blx	r3
 800a92a:	4603      	mov	r3, r0
 800a92c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a92e:	7dbb      	ldrb	r3, [r7, #22]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a934:	7dbb      	ldrb	r3, [r7, #22]
 800a936:	e000      	b.n	800a93a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2200      	movs	r2, #0
 800a962:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d014      	beq.n	800a9a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00e      	beq.n	800a9a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	6852      	ldr	r2, [r2, #4]
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	4611      	mov	r1, r2
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9a4:	2303      	movs	r3, #3
 800a9a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9a8:	2340      	movs	r3, #64	@ 0x40
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 fc0b 	bl	800c1ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2240      	movs	r2, #64	@ 0x40
 800a9c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9c4:	2340      	movs	r3, #64	@ 0x40
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2180      	movs	r1, #128	@ 0x80
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fbfd 	bl	800c1ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2201      	movs	r2, #1
 800a9d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2240      	movs	r2, #64	@ 0x40
 800a9da:	621a      	str	r2, [r3, #32]

  return ret;
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	78fa      	ldrb	r2, [r7, #3]
 800a9f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d006      	beq.n	800aa28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2204      	movs	r2, #4
 800aa2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d106      	bne.n	800aa60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d110      	bne.n	800aaa4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32ae      	adds	r2, #174	@ 0xae
 800aac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01c      	b.n	800ab0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d115      	bne.n	800ab08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	32ae      	adds	r2, #174	@ 0xae
 800aae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	32ae      	adds	r2, #174	@ 0xae
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	78fa      	ldrb	r2, [r7, #3]
 800ab02:	4611      	mov	r1, r2
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b082      	sub	sp, #8
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	32ae      	adds	r2, #174	@ 0xae
 800ab28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e01c      	b.n	800ab6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b03      	cmp	r3, #3
 800ab3e:	d115      	bne.n	800ab6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	@ 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	32ae      	adds	r2, #174	@ 0xae
 800ab5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab64:	78fa      	ldrb	r2, [r7, #3]
 800ab66:	4611      	mov	r1, r2
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00e      	beq.n	800abc8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	6852      	ldr	r2, [r2, #4]
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	4611      	mov	r1, r2
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abc4:	2303      	movs	r3, #3
 800abc6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	460b      	mov	r3, r1
 800abdc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abde:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800abf8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	885b      	ldrh	r3, [r3, #2]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d91f      	bls.n	800ac6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac32:	e013      	b.n	800ac5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac34:	f107 030a 	add.w	r3, r7, #10
 800ac38:	4619      	mov	r1, r3
 800ac3a:	6978      	ldr	r0, [r7, #20]
 800ac3c:	f000 f81b 	bl	800ac76 <USBD_GetNextDesc>
 800ac40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	785b      	ldrb	r3, [r3, #1]
 800ac46:	2b05      	cmp	r3, #5
 800ac48:	d108      	bne.n	800ac5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	789b      	ldrb	r3, [r3, #2]
 800ac52:	78fa      	ldrb	r2, [r7, #3]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d008      	beq.n	800ac6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	897b      	ldrh	r3, [r7, #10]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d8e5      	bhi.n	800ac34 <USBD_GetEpDesc+0x2e>
 800ac68:	e000      	b.n	800ac6c <USBD_GetEpDesc+0x66>
          break;
 800ac6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac6c:	693b      	ldr	r3, [r7, #16]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3718      	adds	r7, #24
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	7812      	ldrb	r2, [r2, #0]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aca0:	68fb      	ldr	r3, [r7, #12]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acae:	b480      	push	{r7}
 800acb0:	b087      	sub	sp, #28
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	3301      	adds	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800accc:	8a3b      	ldrh	r3, [r7, #16]
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	b21a      	sxth	r2, r3
 800acd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acd6:	4313      	orrs	r3, r2
 800acd8:	b21b      	sxth	r3, r3
 800acda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acdc:	89fb      	ldrh	r3, [r7, #14]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad02:	2b40      	cmp	r3, #64	@ 0x40
 800ad04:	d005      	beq.n	800ad12 <USBD_StdDevReq+0x26>
 800ad06:	2b40      	cmp	r3, #64	@ 0x40
 800ad08:	d857      	bhi.n	800adba <USBD_StdDevReq+0xce>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00f      	beq.n	800ad2e <USBD_StdDevReq+0x42>
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d153      	bne.n	800adba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	32ae      	adds	r2, #174	@ 0xae
 800ad1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	4798      	blx	r3
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad2c:	e04a      	b.n	800adc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	2b09      	cmp	r3, #9
 800ad34:	d83b      	bhi.n	800adae <USBD_StdDevReq+0xc2>
 800ad36:	a201      	add	r2, pc, #4	@ (adr r2, 800ad3c <USBD_StdDevReq+0x50>)
 800ad38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3c:	0800ad91 	.word	0x0800ad91
 800ad40:	0800ada5 	.word	0x0800ada5
 800ad44:	0800adaf 	.word	0x0800adaf
 800ad48:	0800ad9b 	.word	0x0800ad9b
 800ad4c:	0800adaf 	.word	0x0800adaf
 800ad50:	0800ad6f 	.word	0x0800ad6f
 800ad54:	0800ad65 	.word	0x0800ad65
 800ad58:	0800adaf 	.word	0x0800adaf
 800ad5c:	0800ad87 	.word	0x0800ad87
 800ad60:	0800ad79 	.word	0x0800ad79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad64:	6839      	ldr	r1, [r7, #0]
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa3c 	bl	800b1e4 <USBD_GetDescriptor>
          break;
 800ad6c:	e024      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad6e:	6839      	ldr	r1, [r7, #0]
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fba1 	bl	800b4b8 <USBD_SetAddress>
          break;
 800ad76:	e01f      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fbe0 	bl	800b540 <USBD_SetConfig>
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
          break;
 800ad84:	e018      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad86:	6839      	ldr	r1, [r7, #0]
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 fc83 	bl	800b694 <USBD_GetConfig>
          break;
 800ad8e:	e013      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fcb4 	bl	800b700 <USBD_GetStatus>
          break;
 800ad98:	e00e      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fce3 	bl	800b768 <USBD_SetFeature>
          break;
 800ada2:	e009      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fd07 	bl	800b7ba <USBD_ClrFeature>
          break;
 800adac:	e004      	b.n	800adb8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fd5e 	bl	800b872 <USBD_CtlError>
          break;
 800adb6:	bf00      	nop
      }
      break;
 800adb8:	e004      	b.n	800adc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fd58 	bl	800b872 <USBD_CtlError>
      break;
 800adc2:	bf00      	nop
  }

  return ret;
 800adc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3710      	adds	r7, #16
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop

0800add0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ade6:	2b40      	cmp	r3, #64	@ 0x40
 800ade8:	d005      	beq.n	800adf6 <USBD_StdItfReq+0x26>
 800adea:	2b40      	cmp	r3, #64	@ 0x40
 800adec:	d852      	bhi.n	800ae94 <USBD_StdItfReq+0xc4>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <USBD_StdItfReq+0x26>
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d14e      	bne.n	800ae94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d840      	bhi.n	800ae86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	889b      	ldrh	r3, [r3, #4]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d836      	bhi.n	800ae7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	889b      	ldrh	r3, [r3, #4]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	4619      	mov	r1, r3
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7ff fedb 	bl	800abd2 <USBD_CoreFindIF>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	2bff      	cmp	r3, #255	@ 0xff
 800ae24:	d01d      	beq.n	800ae62 <USBD_StdItfReq+0x92>
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d11a      	bne.n	800ae62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae2c:	7bba      	ldrb	r2, [r7, #14]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	32ae      	adds	r2, #174	@ 0xae
 800ae32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00f      	beq.n	800ae5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae3c:	7bba      	ldrb	r2, [r7, #14]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae44:	7bba      	ldrb	r2, [r7, #14]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	32ae      	adds	r2, #174	@ 0xae
 800ae4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	6839      	ldr	r1, [r7, #0]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
 800ae56:	4603      	mov	r3, r0
 800ae58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae5a:	e004      	b.n	800ae66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae60:	e001      	b.n	800ae66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae62:	2303      	movs	r3, #3
 800ae64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	88db      	ldrh	r3, [r3, #6]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d110      	bne.n	800ae90 <USBD_StdItfReq+0xc0>
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10d      	bne.n	800ae90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fdd3 	bl	800ba20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae7a:	e009      	b.n	800ae90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fcf7 	bl	800b872 <USBD_CtlError>
          break;
 800ae84:	e004      	b.n	800ae90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fcf2 	bl	800b872 <USBD_CtlError>
          break;
 800ae8e:	e000      	b.n	800ae92 <USBD_StdItfReq+0xc2>
          break;
 800ae90:	bf00      	nop
      }
      break;
 800ae92:	e004      	b.n	800ae9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fceb 	bl	800b872 <USBD_CtlError>
      break;
 800ae9c:	bf00      	nop
  }

  return ret;
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	889b      	ldrh	r3, [r3, #4]
 800aeba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aec4:	2b40      	cmp	r3, #64	@ 0x40
 800aec6:	d007      	beq.n	800aed8 <USBD_StdEPReq+0x30>
 800aec8:	2b40      	cmp	r3, #64	@ 0x40
 800aeca:	f200 817f 	bhi.w	800b1cc <USBD_StdEPReq+0x324>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d02a      	beq.n	800af28 <USBD_StdEPReq+0x80>
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	f040 817a 	bne.w	800b1cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aed8:	7bbb      	ldrb	r3, [r7, #14]
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff fe85 	bl	800abec <USBD_CoreFindEP>
 800aee2:	4603      	mov	r3, r0
 800aee4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aee6:	7b7b      	ldrb	r3, [r7, #13]
 800aee8:	2bff      	cmp	r3, #255	@ 0xff
 800aeea:	f000 8174 	beq.w	800b1d6 <USBD_StdEPReq+0x32e>
 800aeee:	7b7b      	ldrb	r3, [r7, #13]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f040 8170 	bne.w	800b1d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800aef6:	7b7a      	ldrb	r2, [r7, #13]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aefe:	7b7a      	ldrb	r2, [r7, #13]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	32ae      	adds	r2, #174	@ 0xae
 800af04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 8163 	beq.w	800b1d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af10:	7b7a      	ldrb	r2, [r7, #13]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	32ae      	adds	r2, #174	@ 0xae
 800af16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4798      	blx	r3
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af26:	e156      	b.n	800b1d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d008      	beq.n	800af42 <USBD_StdEPReq+0x9a>
 800af30:	2b03      	cmp	r3, #3
 800af32:	f300 8145 	bgt.w	800b1c0 <USBD_StdEPReq+0x318>
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 809b 	beq.w	800b072 <USBD_StdEPReq+0x1ca>
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d03c      	beq.n	800afba <USBD_StdEPReq+0x112>
 800af40:	e13e      	b.n	800b1c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d002      	beq.n	800af54 <USBD_StdEPReq+0xac>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	d016      	beq.n	800af80 <USBD_StdEPReq+0xd8>
 800af52:	e02c      	b.n	800afae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00d      	beq.n	800af76 <USBD_StdEPReq+0xce>
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	2b80      	cmp	r3, #128	@ 0x80
 800af5e:	d00a      	beq.n	800af76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f975 	bl	800c254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af6a:	2180      	movs	r1, #128	@ 0x80
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f971 	bl	800c254 <USBD_LL_StallEP>
 800af72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af74:	e020      	b.n	800afb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af76:	6839      	ldr	r1, [r7, #0]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fc7a 	bl	800b872 <USBD_CtlError>
              break;
 800af7e:	e01b      	b.n	800afb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	885b      	ldrh	r3, [r3, #2]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10e      	bne.n	800afa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00b      	beq.n	800afa6 <USBD_StdEPReq+0xfe>
 800af8e:	7bbb      	ldrb	r3, [r7, #14]
 800af90:	2b80      	cmp	r3, #128	@ 0x80
 800af92:	d008      	beq.n	800afa6 <USBD_StdEPReq+0xfe>
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	88db      	ldrh	r3, [r3, #6]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d104      	bne.n	800afa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 f957 	bl	800c254 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 fd3a 	bl	800ba20 <USBD_CtlSendStatus>

              break;
 800afac:	e004      	b.n	800afb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fc5e 	bl	800b872 <USBD_CtlError>
              break;
 800afb6:	bf00      	nop
          }
          break;
 800afb8:	e107      	b.n	800b1ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d002      	beq.n	800afcc <USBD_StdEPReq+0x124>
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d016      	beq.n	800aff8 <USBD_StdEPReq+0x150>
 800afca:	e04b      	b.n	800b064 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00d      	beq.n	800afee <USBD_StdEPReq+0x146>
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b80      	cmp	r3, #128	@ 0x80
 800afd6:	d00a      	beq.n	800afee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afd8:	7bbb      	ldrb	r3, [r7, #14]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f939 	bl	800c254 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afe2:	2180      	movs	r1, #128	@ 0x80
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 f935 	bl	800c254 <USBD_LL_StallEP>
 800afea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afec:	e040      	b.n	800b070 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800afee:	6839      	ldr	r1, [r7, #0]
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f000 fc3e 	bl	800b872 <USBD_CtlError>
              break;
 800aff6:	e03b      	b.n	800b070 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	885b      	ldrh	r3, [r3, #2]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d136      	bne.n	800b06e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 f93f 	bl	800c292 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fd03 	bl	800ba20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b01a:	7bbb      	ldrb	r3, [r7, #14]
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f7ff fde4 	bl	800abec <USBD_CoreFindEP>
 800b024:	4603      	mov	r3, r0
 800b026:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b028:	7b7b      	ldrb	r3, [r7, #13]
 800b02a:	2bff      	cmp	r3, #255	@ 0xff
 800b02c:	d01f      	beq.n	800b06e <USBD_StdEPReq+0x1c6>
 800b02e:	7b7b      	ldrb	r3, [r7, #13]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d11c      	bne.n	800b06e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b034:	7b7a      	ldrb	r2, [r7, #13]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b03c:	7b7a      	ldrb	r2, [r7, #13]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32ae      	adds	r2, #174	@ 0xae
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d010      	beq.n	800b06e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b04c:	7b7a      	ldrb	r2, [r7, #13]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32ae      	adds	r2, #174	@ 0xae
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	4798      	blx	r3
 800b05e:	4603      	mov	r3, r0
 800b060:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b062:	e004      	b.n	800b06e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fc03 	bl	800b872 <USBD_CtlError>
              break;
 800b06c:	e000      	b.n	800b070 <USBD_StdEPReq+0x1c8>
              break;
 800b06e:	bf00      	nop
          }
          break;
 800b070:	e0ab      	b.n	800b1ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d002      	beq.n	800b084 <USBD_StdEPReq+0x1dc>
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d032      	beq.n	800b0e8 <USBD_StdEPReq+0x240>
 800b082:	e097      	b.n	800b1b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b084:	7bbb      	ldrb	r3, [r7, #14]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d007      	beq.n	800b09a <USBD_StdEPReq+0x1f2>
 800b08a:	7bbb      	ldrb	r3, [r7, #14]
 800b08c:	2b80      	cmp	r3, #128	@ 0x80
 800b08e:	d004      	beq.n	800b09a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fbed 	bl	800b872 <USBD_CtlError>
                break;
 800b098:	e091      	b.n	800b1be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b09a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	da0b      	bge.n	800b0ba <USBD_StdEPReq+0x212>
 800b0a2:	7bbb      	ldrb	r3, [r7, #14]
 800b0a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	3310      	adds	r3, #16
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	e00b      	b.n	800b0d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	2202      	movs	r2, #2
 800b0de:	4619      	mov	r1, r3
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fc43 	bl	800b96c <USBD_CtlSendData>
              break;
 800b0e6:	e06a      	b.n	800b1be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b0e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	da11      	bge.n	800b114 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	f003 020f 	and.w	r2, r3, #15
 800b0f6:	6879      	ldr	r1, [r7, #4]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	440b      	add	r3, r1
 800b102:	3324      	adds	r3, #36	@ 0x24
 800b104:	881b      	ldrh	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d117      	bne.n	800b13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fbb0 	bl	800b872 <USBD_CtlError>
                  break;
 800b112:	e054      	b.n	800b1be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	f003 020f 	and.w	r2, r3, #15
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fb9d 	bl	800b872 <USBD_CtlError>
                  break;
 800b138:	e041      	b.n	800b1be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	da0b      	bge.n	800b15a <USBD_StdEPReq+0x2b2>
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b148:	4613      	mov	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	3310      	adds	r3, #16
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	4413      	add	r3, r2
 800b156:	3304      	adds	r3, #4
 800b158:	e00b      	b.n	800b172 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	4413      	add	r3, r2
 800b170:	3304      	adds	r3, #4
 800b172:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b174:	7bbb      	ldrb	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <USBD_StdEPReq+0x2d8>
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	2b80      	cmp	r3, #128	@ 0x80
 800b17e:	d103      	bne.n	800b188 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	e00e      	b.n	800b1a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f001 f89f 	bl	800c2d0 <USBD_LL_IsStallEP>
 800b192:	4603      	mov	r3, r0
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2201      	movs	r2, #1
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e002      	b.n	800b1a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fbdd 	bl	800b96c <USBD_CtlSendData>
              break;
 800b1b2:	e004      	b.n	800b1be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fb5b 	bl	800b872 <USBD_CtlError>
              break;
 800b1bc:	bf00      	nop
          }
          break;
 800b1be:	e004      	b.n	800b1ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1c0:	6839      	ldr	r1, [r7, #0]
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f000 fb55 	bl	800b872 <USBD_CtlError>
          break;
 800b1c8:	bf00      	nop
      }
      break;
 800b1ca:	e005      	b.n	800b1d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb4f 	bl	800b872 <USBD_CtlError>
      break;
 800b1d4:	e000      	b.n	800b1d8 <USBD_StdEPReq+0x330>
      break;
 800b1d6:	bf00      	nop
  }

  return ret;
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
	...

0800b1e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	2b06      	cmp	r3, #6
 800b206:	f200 8128 	bhi.w	800b45a <USBD_GetDescriptor+0x276>
 800b20a:	a201      	add	r2, pc, #4	@ (adr r2, 800b210 <USBD_GetDescriptor+0x2c>)
 800b20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b210:	0800b22d 	.word	0x0800b22d
 800b214:	0800b245 	.word	0x0800b245
 800b218:	0800b285 	.word	0x0800b285
 800b21c:	0800b45b 	.word	0x0800b45b
 800b220:	0800b45b 	.word	0x0800b45b
 800b224:	0800b3fb 	.word	0x0800b3fb
 800b228:	0800b427 	.word	0x0800b427
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	7c12      	ldrb	r2, [r2, #16]
 800b238:	f107 0108 	add.w	r1, r7, #8
 800b23c:	4610      	mov	r0, r2
 800b23e:	4798      	blx	r3
 800b240:	60f8      	str	r0, [r7, #12]
      break;
 800b242:	e112      	b.n	800b46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7c1b      	ldrb	r3, [r3, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10d      	bne.n	800b268 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b254:	f107 0208 	add.w	r2, r7, #8
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3301      	adds	r3, #1
 800b262:	2202      	movs	r2, #2
 800b264:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b266:	e100      	b.n	800b46a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b270:	f107 0208 	add.w	r2, r7, #8
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3301      	adds	r3, #1
 800b27e:	2202      	movs	r2, #2
 800b280:	701a      	strb	r2, [r3, #0]
      break;
 800b282:	e0f2      	b.n	800b46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	885b      	ldrh	r3, [r3, #2]
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	f200 80ac 	bhi.w	800b3e8 <USBD_GetDescriptor+0x204>
 800b290:	a201      	add	r2, pc, #4	@ (adr r2, 800b298 <USBD_GetDescriptor+0xb4>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2b1 	.word	0x0800b2b1
 800b29c:	0800b2e5 	.word	0x0800b2e5
 800b2a0:	0800b319 	.word	0x0800b319
 800b2a4:	0800b34d 	.word	0x0800b34d
 800b2a8:	0800b381 	.word	0x0800b381
 800b2ac:	0800b3b5 	.word	0x0800b3b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d00b      	beq.n	800b2d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	7c12      	ldrb	r2, [r2, #16]
 800b2c8:	f107 0108 	add.w	r1, r7, #8
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
 800b2d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d2:	e091      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2d4:	6839      	ldr	r1, [r7, #0]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 facb 	bl	800b872 <USBD_CtlError>
            err++;
 800b2dc:	7afb      	ldrb	r3, [r7, #11]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e2:	e089      	b.n	800b3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ea:	689b      	ldr	r3, [r3, #8]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00b      	beq.n	800b308 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	7c12      	ldrb	r2, [r2, #16]
 800b2fc:	f107 0108 	add.w	r1, r7, #8
 800b300:	4610      	mov	r0, r2
 800b302:	4798      	blx	r3
 800b304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b306:	e077      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fab1 	bl	800b872 <USBD_CtlError>
            err++;
 800b310:	7afb      	ldrb	r3, [r7, #11]
 800b312:	3301      	adds	r3, #1
 800b314:	72fb      	strb	r3, [r7, #11]
          break;
 800b316:	e06f      	b.n	800b3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00b      	beq.n	800b33c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	7c12      	ldrb	r2, [r2, #16]
 800b330:	f107 0108 	add.w	r1, r7, #8
 800b334:	4610      	mov	r0, r2
 800b336:	4798      	blx	r3
 800b338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33a:	e05d      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fa97 	bl	800b872 <USBD_CtlError>
            err++;
 800b344:	7afb      	ldrb	r3, [r7, #11]
 800b346:	3301      	adds	r3, #1
 800b348:	72fb      	strb	r3, [r7, #11]
          break;
 800b34a:	e055      	b.n	800b3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b36e:	e043      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fa7d 	bl	800b872 <USBD_CtlError>
            err++;
 800b378:	7afb      	ldrb	r3, [r7, #11]
 800b37a:	3301      	adds	r3, #1
 800b37c:	72fb      	strb	r3, [r7, #11]
          break;
 800b37e:	e03b      	b.n	800b3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d00b      	beq.n	800b3a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b392:	695b      	ldr	r3, [r3, #20]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	f107 0108 	add.w	r1, r7, #8
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a2:	e029      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fa63 	bl	800b872 <USBD_CtlError>
            err++;
 800b3ac:	7afb      	ldrb	r3, [r7, #11]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b2:	e021      	b.n	800b3f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00b      	beq.n	800b3d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	7c12      	ldrb	r2, [r2, #16]
 800b3cc:	f107 0108 	add.w	r1, r7, #8
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4798      	blx	r3
 800b3d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3d6:	e00f      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fa49 	bl	800b872 <USBD_CtlError>
            err++;
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3e6:	e007      	b.n	800b3f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa41 	bl	800b872 <USBD_CtlError>
          err++;
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b3f6:	bf00      	nop
      }
      break;
 800b3f8:	e037      	b.n	800b46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7c1b      	ldrb	r3, [r3, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b40a:	f107 0208 	add.w	r2, r7, #8
 800b40e:	4610      	mov	r0, r2
 800b410:	4798      	blx	r3
 800b412:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b414:	e029      	b.n	800b46a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa2a 	bl	800b872 <USBD_CtlError>
        err++;
 800b41e:	7afb      	ldrb	r3, [r7, #11]
 800b420:	3301      	adds	r3, #1
 800b422:	72fb      	strb	r3, [r7, #11]
      break;
 800b424:	e021      	b.n	800b46a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	7c1b      	ldrb	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10d      	bne.n	800b44a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b436:	f107 0208 	add.w	r2, r7, #8
 800b43a:	4610      	mov	r0, r2
 800b43c:	4798      	blx	r3
 800b43e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	2207      	movs	r2, #7
 800b446:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b448:	e00f      	b.n	800b46a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa10 	bl	800b872 <USBD_CtlError>
        err++;
 800b452:	7afb      	ldrb	r3, [r7, #11]
 800b454:	3301      	adds	r3, #1
 800b456:	72fb      	strb	r3, [r7, #11]
      break;
 800b458:	e007      	b.n	800b46a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 fa08 	bl	800b872 <USBD_CtlError>
      err++;
 800b462:	7afb      	ldrb	r3, [r7, #11]
 800b464:	3301      	adds	r3, #1
 800b466:	72fb      	strb	r3, [r7, #11]
      break;
 800b468:	bf00      	nop
  }

  if (err != 0U)
 800b46a:	7afb      	ldrb	r3, [r7, #11]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d11e      	bne.n	800b4ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	88db      	ldrh	r3, [r3, #6]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d016      	beq.n	800b4a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b478:	893b      	ldrh	r3, [r7, #8]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00e      	beq.n	800b49c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	88da      	ldrh	r2, [r3, #6]
 800b482:	893b      	ldrh	r3, [r7, #8]
 800b484:	4293      	cmp	r3, r2
 800b486:	bf28      	it	cs
 800b488:	4613      	movcs	r3, r2
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b48e:	893b      	ldrh	r3, [r7, #8]
 800b490:	461a      	mov	r2, r3
 800b492:	68f9      	ldr	r1, [r7, #12]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fa69 	bl	800b96c <USBD_CtlSendData>
 800b49a:	e009      	b.n	800b4b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f9e7 	bl	800b872 <USBD_CtlError>
 800b4a4:	e004      	b.n	800b4b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 faba 	bl	800ba20 <USBD_CtlSendStatus>
 800b4ac:	e000      	b.n	800b4b0 <USBD_GetDescriptor+0x2cc>
    return;
 800b4ae:	bf00      	nop
  }
}
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop

0800b4b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	889b      	ldrh	r3, [r3, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d131      	bne.n	800b52e <USBD_SetAddress+0x76>
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	88db      	ldrh	r3, [r3, #6]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d12d      	bne.n	800b52e <USBD_SetAddress+0x76>
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	885b      	ldrh	r3, [r3, #2]
 800b4d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4d8:	d829      	bhi.n	800b52e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	885b      	ldrh	r3, [r3, #2]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	d104      	bne.n	800b4fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f9bc 	bl	800b872 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4fa:	e01d      	b.n	800b538 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	7bfa      	ldrb	r2, [r7, #15]
 800b500:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 ff0d 	bl	800c328 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 fa86 	bl	800ba20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2202      	movs	r2, #2
 800b51e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b522:	e009      	b.n	800b538 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52c:	e004      	b.n	800b538 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b52e:	6839      	ldr	r1, [r7, #0]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f99e 	bl	800b872 <USBD_CtlError>
  }
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b54a:	2300      	movs	r3, #0
 800b54c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	885b      	ldrh	r3, [r3, #2]
 800b552:	b2da      	uxtb	r2, r3
 800b554:	4b4e      	ldr	r3, [pc, #312]	@ (800b690 <USBD_SetConfig+0x150>)
 800b556:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b558:	4b4d      	ldr	r3, [pc, #308]	@ (800b690 <USBD_SetConfig+0x150>)
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d905      	bls.n	800b56c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b560:	6839      	ldr	r1, [r7, #0]
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f985 	bl	800b872 <USBD_CtlError>
    return USBD_FAIL;
 800b568:	2303      	movs	r3, #3
 800b56a:	e08c      	b.n	800b686 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b02      	cmp	r3, #2
 800b576:	d002      	beq.n	800b57e <USBD_SetConfig+0x3e>
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d029      	beq.n	800b5d0 <USBD_SetConfig+0x90>
 800b57c:	e075      	b.n	800b66a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b57e:	4b44      	ldr	r3, [pc, #272]	@ (800b690 <USBD_SetConfig+0x150>)
 800b580:	781b      	ldrb	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d020      	beq.n	800b5c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b586:	4b42      	ldr	r3, [pc, #264]	@ (800b690 <USBD_SetConfig+0x150>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b590:	4b3f      	ldr	r3, [pc, #252]	@ (800b690 <USBD_SetConfig+0x150>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7fe ffe3 	bl	800a562 <USBD_SetClassConfig>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d008      	beq.n	800b5b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f962 	bl	800b872 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5b6:	e065      	b.n	800b684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 fa31 	bl	800ba20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2203      	movs	r2, #3
 800b5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5c6:	e05d      	b.n	800b684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fa29 	bl	800ba20 <USBD_CtlSendStatus>
      break;
 800b5ce:	e059      	b.n	800b684 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5d0:	4b2f      	ldr	r3, [pc, #188]	@ (800b690 <USBD_SetConfig+0x150>)
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d112      	bne.n	800b5fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2202      	movs	r2, #2
 800b5dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b5e0:	4b2b      	ldr	r3, [pc, #172]	@ (800b690 <USBD_SetConfig+0x150>)
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5ea:	4b29      	ldr	r3, [pc, #164]	@ (800b690 <USBD_SetConfig+0x150>)
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f7fe ffd2 	bl	800a59a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fa12 	bl	800ba20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5fc:	e042      	b.n	800b684 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b5fe:	4b24      	ldr	r3, [pc, #144]	@ (800b690 <USBD_SetConfig+0x150>)
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d02a      	beq.n	800b662 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fe ffc0 	bl	800a59a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b61a:	4b1d      	ldr	r3, [pc, #116]	@ (800b690 <USBD_SetConfig+0x150>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b624:	4b1a      	ldr	r3, [pc, #104]	@ (800b690 <USBD_SetConfig+0x150>)
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7fe ff99 	bl	800a562 <USBD_SetClassConfig>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00f      	beq.n	800b65a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b63a:	6839      	ldr	r1, [r7, #0]
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f918 	bl	800b872 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685b      	ldr	r3, [r3, #4]
 800b646:	b2db      	uxtb	r3, r3
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7fe ffa5 	bl	800a59a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b658:	e014      	b.n	800b684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f9e0 	bl	800ba20 <USBD_CtlSendStatus>
      break;
 800b660:	e010      	b.n	800b684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f9dc 	bl	800ba20 <USBD_CtlSendStatus>
      break;
 800b668:	e00c      	b.n	800b684 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f900 	bl	800b872 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b672:	4b07      	ldr	r3, [pc, #28]	@ (800b690 <USBD_SetConfig+0x150>)
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7fe ff8e 	bl	800a59a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b67e:	2303      	movs	r3, #3
 800b680:	73fb      	strb	r3, [r7, #15]
      break;
 800b682:	bf00      	nop
  }

  return ret;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20000ad4 	.word	0x20000ad4

0800b694 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	88db      	ldrh	r3, [r3, #6]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d004      	beq.n	800b6b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f000 f8e2 	bl	800b872 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6ae:	e023      	b.n	800b6f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	dc02      	bgt.n	800b6c2 <USBD_GetConfig+0x2e>
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	dc03      	bgt.n	800b6c8 <USBD_GetConfig+0x34>
 800b6c0:	e015      	b.n	800b6ee <USBD_GetConfig+0x5a>
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d00b      	beq.n	800b6de <USBD_GetConfig+0x4a>
 800b6c6:	e012      	b.n	800b6ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f948 	bl	800b96c <USBD_CtlSendData>
        break;
 800b6dc:	e00c      	b.n	800b6f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f940 	bl	800b96c <USBD_CtlSendData>
        break;
 800b6ec:	e004      	b.n	800b6f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f8be 	bl	800b872 <USBD_CtlError>
        break;
 800b6f6:	bf00      	nop
}
 800b6f8:	bf00      	nop
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b710:	b2db      	uxtb	r3, r3
 800b712:	3b01      	subs	r3, #1
 800b714:	2b02      	cmp	r3, #2
 800b716:	d81e      	bhi.n	800b756 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	88db      	ldrh	r3, [r3, #6]
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d004      	beq.n	800b72a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b720:	6839      	ldr	r1, [r7, #0]
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f8a5 	bl	800b872 <USBD_CtlError>
        break;
 800b728:	e01a      	b.n	800b760 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2201      	movs	r2, #1
 800b72e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b736:	2b00      	cmp	r3, #0
 800b738:	d005      	beq.n	800b746 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	f043 0202 	orr.w	r2, r3, #2
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	330c      	adds	r3, #12
 800b74a:	2202      	movs	r2, #2
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f90c 	bl	800b96c <USBD_CtlSendData>
      break;
 800b754:	e004      	b.n	800b760 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b756:	6839      	ldr	r1, [r7, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f88a 	bl	800b872 <USBD_CtlError>
      break;
 800b75e:	bf00      	nop
  }
}
 800b760:	bf00      	nop
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	885b      	ldrh	r3, [r3, #2]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d107      	bne.n	800b78a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2201      	movs	r2, #1
 800b77e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f94c 	bl	800ba20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b788:	e013      	b.n	800b7b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	885b      	ldrh	r3, [r3, #2]
 800b78e:	2b02      	cmp	r3, #2
 800b790:	d10b      	bne.n	800b7aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	889b      	ldrh	r3, [r3, #4]
 800b796:	0a1b      	lsrs	r3, r3, #8
 800b798:	b29b      	uxth	r3, r3
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 f93c 	bl	800ba20 <USBD_CtlSendStatus>
}
 800b7a8:	e003      	b.n	800b7b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f860 	bl	800b872 <USBD_CtlError>
}
 800b7b2:	bf00      	nop
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b082      	sub	sp, #8
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d80b      	bhi.n	800b7ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	885b      	ldrh	r3, [r3, #2]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d10c      	bne.n	800b7f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 f91c 	bl	800ba20 <USBD_CtlSendStatus>
      }
      break;
 800b7e8:	e004      	b.n	800b7f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 f840 	bl	800b872 <USBD_CtlError>
      break;
 800b7f2:	e000      	b.n	800b7f6 <USBD_ClrFeature+0x3c>
      break;
 800b7f4:	bf00      	nop
  }
}
 800b7f6:	bf00      	nop
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3301      	adds	r3, #1
 800b818:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	781a      	ldrb	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	f7ff fa40 	bl	800acae <SWAPBYTE>
 800b82e:	4603      	mov	r3, r0
 800b830:	461a      	mov	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3301      	adds	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7ff fa33 	bl	800acae <SWAPBYTE>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fa26 	bl	800acae <SWAPBYTE>
 800b862:	4603      	mov	r3, r0
 800b864:	461a      	mov	r2, r3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	80da      	strh	r2, [r3, #6]
}
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b87c:	2180      	movs	r1, #128	@ 0x80
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fce8 	bl	800c254 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b884:	2100      	movs	r1, #0
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fce4 	bl	800c254 <USBD_LL_StallEP>
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d042      	beq.n	800b930 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8ae:	6938      	ldr	r0, [r7, #16]
 800b8b0:	f000 f842 	bl	800b938 <USBD_GetLen>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8be:	d808      	bhi.n	800b8d2 <USBD_GetString+0x3e>
 800b8c0:	6938      	ldr	r0, [r7, #16]
 800b8c2:	f000 f839 	bl	800b938 <USBD_GetLen>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	005b      	lsls	r3, r3, #1
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	e001      	b.n	800b8d6 <USBD_GetString+0x42>
 800b8d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	4413      	add	r3, r2
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	7812      	ldrb	r2, [r2, #0]
 800b8e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8e6:	7dfb      	ldrb	r3, [r7, #23]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	2203      	movs	r2, #3
 800b8f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b8f6:	7dfb      	ldrb	r3, [r7, #23]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b8fc:	e013      	b.n	800b926 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4413      	add	r3, r2
 800b904:	693a      	ldr	r2, [r7, #16]
 800b906:	7812      	ldrb	r2, [r2, #0]
 800b908:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	3301      	adds	r3, #1
 800b90e:	613b      	str	r3, [r7, #16]
    idx++;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	3301      	adds	r3, #1
 800b914:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	4413      	add	r3, r2
 800b91c:	2200      	movs	r2, #0
 800b91e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	3301      	adds	r3, #1
 800b924:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e7      	bne.n	800b8fe <USBD_GetString+0x6a>
 800b92e:	e000      	b.n	800b932 <USBD_GetString+0x9e>
    return;
 800b930:	bf00      	nop
  }
}
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b948:	e005      	b.n	800b956 <USBD_GetLen+0x1e>
  {
    len++;
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	3301      	adds	r3, #1
 800b94e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	3301      	adds	r3, #1
 800b954:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f5      	bne.n	800b94a <USBD_GetLen+0x12>
  }

  return len;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	2100      	movs	r1, #0
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f000 fce7 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 fcd6 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2203      	movs	r2, #3
 800b9d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fcda 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b084      	sub	sp, #16
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f000 fcc9 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba30:	2300      	movs	r3, #0
 800ba32:	2200      	movs	r2, #0
 800ba34:	2100      	movs	r1, #0
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fc95 	bl	800c366 <USBD_LL_Transmit>

  return USBD_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2205      	movs	r2, #5
 800ba52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba56:	2300      	movs	r3, #0
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fca3 	bl	800c3a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba70:	2200      	movs	r2, #0
 800ba72:	4912      	ldr	r1, [pc, #72]	@ (800babc <MX_USB_DEVICE_Init+0x50>)
 800ba74:	4812      	ldr	r0, [pc, #72]	@ (800bac0 <MX_USB_DEVICE_Init+0x54>)
 800ba76:	f7fe fcf7 	bl	800a468 <USBD_Init>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ba80:	f7f7 f94a 	bl	8002d18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ba84:	490f      	ldr	r1, [pc, #60]	@ (800bac4 <MX_USB_DEVICE_Init+0x58>)
 800ba86:	480e      	ldr	r0, [pc, #56]	@ (800bac0 <MX_USB_DEVICE_Init+0x54>)
 800ba88:	f7fe fd1e 	bl	800a4c8 <USBD_RegisterClass>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ba92:	f7f7 f941 	bl	8002d18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ba96:	490c      	ldr	r1, [pc, #48]	@ (800bac8 <MX_USB_DEVICE_Init+0x5c>)
 800ba98:	4809      	ldr	r0, [pc, #36]	@ (800bac0 <MX_USB_DEVICE_Init+0x54>)
 800ba9a:	f7fe fc15 	bl	800a2c8 <USBD_CDC_RegisterInterface>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800baa4:	f7f7 f938 	bl	8002d18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800baa8:	4805      	ldr	r0, [pc, #20]	@ (800bac0 <MX_USB_DEVICE_Init+0x54>)
 800baaa:	f7fe fd43 	bl	800a534 <USBD_Start>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bab4:	f7f7 f930 	bl	8002d18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bab8:	bf00      	nop
 800baba:	bd80      	pop	{r7, pc}
 800babc:	200002d4 	.word	0x200002d4
 800bac0:	20000ad8 	.word	0x20000ad8
 800bac4:	20000240 	.word	0x20000240
 800bac8:	200002c0 	.word	0x200002c0

0800bacc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bad0:	2200      	movs	r2, #0
 800bad2:	4905      	ldr	r1, [pc, #20]	@ (800bae8 <CDC_Init_FS+0x1c>)
 800bad4:	4805      	ldr	r0, [pc, #20]	@ (800baec <CDC_Init_FS+0x20>)
 800bad6:	f7fe fc11 	bl	800a2fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bada:	4905      	ldr	r1, [pc, #20]	@ (800baf0 <CDC_Init_FS+0x24>)
 800badc:	4803      	ldr	r0, [pc, #12]	@ (800baec <CDC_Init_FS+0x20>)
 800bade:	f7fe fc2f 	bl	800a340 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bae2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	200015b4 	.word	0x200015b4
 800baec:	20000ad8 	.word	0x20000ad8
 800baf0:	20000db4 	.word	0x20000db4

0800baf4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800baf8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
 800bb10:	4613      	mov	r3, r2
 800bb12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b23      	cmp	r3, #35	@ 0x23
 800bb18:	d84a      	bhi.n	800bbb0 <CDC_Control_FS+0xac>
 800bb1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb20 <CDC_Control_FS+0x1c>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bbb1 	.word	0x0800bbb1
 800bb24:	0800bbb1 	.word	0x0800bbb1
 800bb28:	0800bbb1 	.word	0x0800bbb1
 800bb2c:	0800bbb1 	.word	0x0800bbb1
 800bb30:	0800bbb1 	.word	0x0800bbb1
 800bb34:	0800bbb1 	.word	0x0800bbb1
 800bb38:	0800bbb1 	.word	0x0800bbb1
 800bb3c:	0800bbb1 	.word	0x0800bbb1
 800bb40:	0800bbb1 	.word	0x0800bbb1
 800bb44:	0800bbb1 	.word	0x0800bbb1
 800bb48:	0800bbb1 	.word	0x0800bbb1
 800bb4c:	0800bbb1 	.word	0x0800bbb1
 800bb50:	0800bbb1 	.word	0x0800bbb1
 800bb54:	0800bbb1 	.word	0x0800bbb1
 800bb58:	0800bbb1 	.word	0x0800bbb1
 800bb5c:	0800bbb1 	.word	0x0800bbb1
 800bb60:	0800bbb1 	.word	0x0800bbb1
 800bb64:	0800bbb1 	.word	0x0800bbb1
 800bb68:	0800bbb1 	.word	0x0800bbb1
 800bb6c:	0800bbb1 	.word	0x0800bbb1
 800bb70:	0800bbb1 	.word	0x0800bbb1
 800bb74:	0800bbb1 	.word	0x0800bbb1
 800bb78:	0800bbb1 	.word	0x0800bbb1
 800bb7c:	0800bbb1 	.word	0x0800bbb1
 800bb80:	0800bbb1 	.word	0x0800bbb1
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	0800bbb1 	.word	0x0800bbb1
 800bb8c:	0800bbb1 	.word	0x0800bbb1
 800bb90:	0800bbb1 	.word	0x0800bbb1
 800bb94:	0800bbb1 	.word	0x0800bbb1
 800bb98:	0800bbb1 	.word	0x0800bbb1
 800bb9c:	0800bbb1 	.word	0x0800bbb1
 800bba0:	0800bbb1 	.word	0x0800bbb1
 800bba4:	0800bbb1 	.word	0x0800bbb1
 800bba8:	0800bbb1 	.word	0x0800bbb1
 800bbac:	0800bbb1 	.word	0x0800bbb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbb0:	bf00      	nop
  }

  return (USBD_OK);
 800bbb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4808      	ldr	r0, [pc, #32]	@ (800bbf0 <CDC_Receive_FS+0x30>)
 800bbce:	f7fe fbb7 	bl	800a340 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbd2:	4807      	ldr	r0, [pc, #28]	@ (800bbf0 <CDC_Receive_FS+0x30>)
 800bbd4:	f7fe fc12 	bl	800a3fc <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7f6 ffc2 	bl	8002b68 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800bbe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000ad8 	.word	0x20000ad8

0800bbf4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bc04:	4b0d      	ldr	r3, [pc, #52]	@ (800bc3c <CDC_Transmit_FS+0x48>)
 800bc06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e00b      	b.n	800bc32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bc1a:	887b      	ldrh	r3, [r7, #2]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	4806      	ldr	r0, [pc, #24]	@ (800bc3c <CDC_Transmit_FS+0x48>)
 800bc22:	f7fe fb6b 	bl	800a2fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bc26:	4805      	ldr	r0, [pc, #20]	@ (800bc3c <CDC_Transmit_FS+0x48>)
 800bc28:	f7fe fba8 	bl	800a37c <USBD_CDC_TransmitPacket>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	20000ad8 	.word	0x20000ad8

0800bc40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b087      	sub	sp, #28
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	371c      	adds	r7, #28
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
	...

0800bc64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	6039      	str	r1, [r7, #0]
 800bc6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2212      	movs	r2, #18
 800bc74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc76:	4b03      	ldr	r3, [pc, #12]	@ (800bc84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr
 800bc84:	200002f0 	.word	0x200002f0

0800bc88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	4603      	mov	r3, r0
 800bc90:	6039      	str	r1, [r7, #0]
 800bc92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	2204      	movs	r2, #4
 800bc98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc9a:	4b03      	ldr	r3, [pc, #12]	@ (800bca8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	20000304 	.word	0x20000304

0800bcac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	6039      	str	r1, [r7, #0]
 800bcb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d105      	bne.n	800bcca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	4907      	ldr	r1, [pc, #28]	@ (800bce0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcc2:	4808      	ldr	r0, [pc, #32]	@ (800bce4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcc4:	f7ff fde6 	bl	800b894 <USBD_GetString>
 800bcc8:	e004      	b.n	800bcd4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	4904      	ldr	r1, [pc, #16]	@ (800bce0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcce:	4805      	ldr	r0, [pc, #20]	@ (800bce4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd0:	f7ff fde0 	bl	800b894 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd4:	4b02      	ldr	r3, [pc, #8]	@ (800bce0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	20001db4 	.word	0x20001db4
 800bce4:	0800f1a8 	.word	0x0800f1a8

0800bce8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcf4:	683a      	ldr	r2, [r7, #0]
 800bcf6:	4904      	ldr	r1, [pc, #16]	@ (800bd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcf8:	4804      	ldr	r0, [pc, #16]	@ (800bd0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcfa:	f7ff fdcb 	bl	800b894 <USBD_GetString>
  return USBD_StrDesc;
 800bcfe:	4b02      	ldr	r3, [pc, #8]	@ (800bd08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20001db4 	.word	0x20001db4
 800bd0c:	0800f1c0 	.word	0x0800f1c0

0800bd10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	6039      	str	r1, [r7, #0]
 800bd1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	221a      	movs	r2, #26
 800bd20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd22:	f000 f843 	bl	800bdac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd26:	4b02      	ldr	r3, [pc, #8]	@ (800bd30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3708      	adds	r7, #8
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000308 	.word	0x20000308

0800bd34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	6039      	str	r1, [r7, #0]
 800bd3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d105      	bne.n	800bd52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	4907      	ldr	r1, [pc, #28]	@ (800bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd4a:	4808      	ldr	r0, [pc, #32]	@ (800bd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd4c:	f7ff fda2 	bl	800b894 <USBD_GetString>
 800bd50:	e004      	b.n	800bd5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	4904      	ldr	r1, [pc, #16]	@ (800bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd56:	4805      	ldr	r0, [pc, #20]	@ (800bd6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd58:	f7ff fd9c 	bl	800b894 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd5c:	4b02      	ldr	r3, [pc, #8]	@ (800bd68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20001db4 	.word	0x20001db4
 800bd6c:	0800f1d4 	.word	0x0800f1d4

0800bd70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	6039      	str	r1, [r7, #0]
 800bd7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d105      	bne.n	800bd8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4907      	ldr	r1, [pc, #28]	@ (800bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd86:	4808      	ldr	r0, [pc, #32]	@ (800bda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd88:	f7ff fd84 	bl	800b894 <USBD_GetString>
 800bd8c:	e004      	b.n	800bd98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4904      	ldr	r1, [pc, #16]	@ (800bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd92:	4805      	ldr	r0, [pc, #20]	@ (800bda8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd94:	f7ff fd7e 	bl	800b894 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd98:	4b02      	ldr	r3, [pc, #8]	@ (800bda4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001db4 	.word	0x20001db4
 800bda8:	0800f1e0 	.word	0x0800f1e0

0800bdac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf0 <Get_SerialNum+0x44>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf4 <Get_SerialNum+0x48>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf8 <Get_SerialNum+0x4c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4413      	add	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d009      	beq.n	800bde6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	4909      	ldr	r1, [pc, #36]	@ (800bdfc <Get_SerialNum+0x50>)
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f000 f814 	bl	800be04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bddc:	2204      	movs	r2, #4
 800bdde:	4908      	ldr	r1, [pc, #32]	@ (800be00 <Get_SerialNum+0x54>)
 800bde0:	68b8      	ldr	r0, [r7, #8]
 800bde2:	f000 f80f 	bl	800be04 <IntToUnicode>
  }
}
 800bde6:	bf00      	nop
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	1fff7a10 	.word	0x1fff7a10
 800bdf4:	1fff7a14 	.word	0x1fff7a14
 800bdf8:	1fff7a18 	.word	0x1fff7a18
 800bdfc:	2000030a 	.word	0x2000030a
 800be00:	2000031a 	.word	0x2000031a

0800be04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be04:	b480      	push	{r7}
 800be06:	b087      	sub	sp, #28
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	4613      	mov	r3, r2
 800be10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be16:	2300      	movs	r3, #0
 800be18:	75fb      	strb	r3, [r7, #23]
 800be1a:	e027      	b.n	800be6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	0f1b      	lsrs	r3, r3, #28
 800be20:	2b09      	cmp	r3, #9
 800be22:	d80b      	bhi.n	800be3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	0f1b      	lsrs	r3, r3, #28
 800be28:	b2da      	uxtb	r2, r3
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	4619      	mov	r1, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	440b      	add	r3, r1
 800be34:	3230      	adds	r2, #48	@ 0x30
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	e00a      	b.n	800be52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	0f1b      	lsrs	r3, r3, #28
 800be40:	b2da      	uxtb	r2, r3
 800be42:	7dfb      	ldrb	r3, [r7, #23]
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4619      	mov	r1, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	440b      	add	r3, r1
 800be4c:	3237      	adds	r2, #55	@ 0x37
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
 800be5a:	005b      	lsls	r3, r3, #1
 800be5c:	3301      	adds	r3, #1
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	4413      	add	r3, r2
 800be62:	2200      	movs	r2, #0
 800be64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be66:	7dfb      	ldrb	r3, [r7, #23]
 800be68:	3301      	adds	r3, #1
 800be6a:	75fb      	strb	r3, [r7, #23]
 800be6c:	7dfa      	ldrb	r2, [r7, #23]
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	429a      	cmp	r2, r3
 800be72:	d3d3      	bcc.n	800be1c <IntToUnicode+0x18>
  }
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop
 800be78:	371c      	adds	r7, #28
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
	...

0800be84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08a      	sub	sp, #40	@ 0x28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be8c:	f107 0314 	add.w	r3, r7, #20
 800be90:	2200      	movs	r2, #0
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	605a      	str	r2, [r3, #4]
 800be96:	609a      	str	r2, [r3, #8]
 800be98:	60da      	str	r2, [r3, #12]
 800be9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bea4:	d13a      	bne.n	800bf1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bea6:	2300      	movs	r3, #0
 800bea8:	613b      	str	r3, [r7, #16]
 800beaa:	4b1e      	ldr	r3, [pc, #120]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800beac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beae:	4a1d      	ldr	r2, [pc, #116]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800beb0:	f043 0301 	orr.w	r3, r3, #1
 800beb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800beb6:	4b1b      	ldr	r3, [pc, #108]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800beb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	613b      	str	r3, [r7, #16]
 800bec0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bec2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec8:	2302      	movs	r3, #2
 800beca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800becc:	2300      	movs	r3, #0
 800bece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bed0:	2303      	movs	r3, #3
 800bed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bed4:	230a      	movs	r3, #10
 800bed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bed8:	f107 0314 	add.w	r3, r7, #20
 800bedc:	4619      	mov	r1, r3
 800bede:	4812      	ldr	r0, [pc, #72]	@ (800bf28 <HAL_PCD_MspInit+0xa4>)
 800bee0:	f7f8 fe40 	bl	8004b64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bee4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800bee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee8:	4a0e      	ldr	r2, [pc, #56]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800beea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beee:	6353      	str	r3, [r2, #52]	@ 0x34
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	4b0b      	ldr	r3, [pc, #44]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800bef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef8:	4a0a      	ldr	r2, [pc, #40]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800befa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800befe:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf00:	4b08      	ldr	r3, [pc, #32]	@ (800bf24 <HAL_PCD_MspInit+0xa0>)
 800bf02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2100      	movs	r1, #0
 800bf10:	2043      	movs	r0, #67	@ 0x43
 800bf12:	f7f8 fa80 	bl	8004416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf16:	2043      	movs	r0, #67	@ 0x43
 800bf18:	f7f8 fa99 	bl	800444e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf1c:	bf00      	nop
 800bf1e:	3728      	adds	r7, #40	@ 0x28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	40023800 	.word	0x40023800
 800bf28:	40020000 	.word	0x40020000

0800bf2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf40:	4619      	mov	r1, r3
 800bf42:	4610      	mov	r0, r2
 800bf44:	f7fe fb43 	bl	800a5ce <USBD_LL_SetupStage>
}
 800bf48:	bf00      	nop
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	78fb      	ldrb	r3, [r7, #3]
 800bf78:	4619      	mov	r1, r3
 800bf7a:	f7fe fb7d 	bl	800a678 <USBD_LL_DataOutStage>
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b082      	sub	sp, #8
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
 800bf8e:	460b      	mov	r3, r1
 800bf90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	440b      	add	r3, r1
 800bfa6:	3320      	adds	r3, #32
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	78fb      	ldrb	r3, [r7, #3]
 800bfac:	4619      	mov	r1, r3
 800bfae:	f7fe fc16 	bl	800a7de <USBD_LL_DataInStage>
}
 800bfb2:	bf00      	nop
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fd50 	bl	800aa6e <USBD_LL_SOF>
}
 800bfce:	bf00      	nop
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b084      	sub	sp, #16
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	79db      	ldrb	r3, [r3, #7]
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	d001      	beq.n	800bfee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bfea:	f7f6 fe95 	bl	8002d18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bff4:	7bfa      	ldrb	r2, [r7, #15]
 800bff6:	4611      	mov	r1, r2
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fcf4 	bl	800a9e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c004:	4618      	mov	r0, r3
 800c006:	f7fe fc9c 	bl	800a942 <USBD_LL_Reset>
}
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
	...

0800c014 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c022:	4618      	mov	r0, r3
 800c024:	f7fe fcef 	bl	800aa06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6812      	ldr	r2, [r2, #0]
 800c036:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c03a:	f043 0301 	orr.w	r3, r3, #1
 800c03e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7adb      	ldrb	r3, [r3, #11]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d005      	beq.n	800c054 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c048:	4b04      	ldr	r3, [pc, #16]	@ (800c05c <HAL_PCD_SuspendCallback+0x48>)
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	4a03      	ldr	r2, [pc, #12]	@ (800c05c <HAL_PCD_SuspendCallback+0x48>)
 800c04e:	f043 0306 	orr.w	r3, r3, #6
 800c052:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	e000ed00 	.word	0xe000ed00

0800c060 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fce5 	bl	800aa3e <USBD_LL_Resume>
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c08e:	78fa      	ldrb	r2, [r7, #3]
 800c090:	4611      	mov	r1, r2
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fd3d 	bl	800ab12 <USBD_LL_IsoOUTIncomplete>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b2:	78fa      	ldrb	r2, [r7, #3]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fcf9 	bl	800aaae <USBD_LL_IsoINIncomplete>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7fe fd4f 	bl	800ab76 <USBD_LL_DevConnected>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7fe fd4c 	bl	800ab8c <USBD_LL_DevDisconnected>
}
 800c0f4:	bf00      	nop
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d13c      	bne.n	800c186 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c10c:	4a20      	ldr	r2, [pc, #128]	@ (800c190 <USBD_LL_Init+0x94>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a1e      	ldr	r2, [pc, #120]	@ (800c190 <USBD_LL_Init+0x94>)
 800c118:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c11c:	4b1c      	ldr	r3, [pc, #112]	@ (800c190 <USBD_LL_Init+0x94>)
 800c11e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c122:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c124:	4b1a      	ldr	r3, [pc, #104]	@ (800c190 <USBD_LL_Init+0x94>)
 800c126:	2204      	movs	r2, #4
 800c128:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c12a:	4b19      	ldr	r3, [pc, #100]	@ (800c190 <USBD_LL_Init+0x94>)
 800c12c:	2202      	movs	r2, #2
 800c12e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c130:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <USBD_LL_Init+0x94>)
 800c132:	2200      	movs	r2, #0
 800c134:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c136:	4b16      	ldr	r3, [pc, #88]	@ (800c190 <USBD_LL_Init+0x94>)
 800c138:	2202      	movs	r2, #2
 800c13a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c13c:	4b14      	ldr	r3, [pc, #80]	@ (800c190 <USBD_LL_Init+0x94>)
 800c13e:	2200      	movs	r2, #0
 800c140:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c142:	4b13      	ldr	r3, [pc, #76]	@ (800c190 <USBD_LL_Init+0x94>)
 800c144:	2200      	movs	r2, #0
 800c146:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c148:	4b11      	ldr	r3, [pc, #68]	@ (800c190 <USBD_LL_Init+0x94>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c14e:	4b10      	ldr	r3, [pc, #64]	@ (800c190 <USBD_LL_Init+0x94>)
 800c150:	2200      	movs	r2, #0
 800c152:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c154:	4b0e      	ldr	r3, [pc, #56]	@ (800c190 <USBD_LL_Init+0x94>)
 800c156:	2200      	movs	r2, #0
 800c158:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c15a:	480d      	ldr	r0, [pc, #52]	@ (800c190 <USBD_LL_Init+0x94>)
 800c15c:	f7f8 feb7 	bl	8004ece <HAL_PCD_Init>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	d001      	beq.n	800c16a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c166:	f7f6 fdd7 	bl	8002d18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c16a:	2180      	movs	r1, #128	@ 0x80
 800c16c:	4808      	ldr	r0, [pc, #32]	@ (800c190 <USBD_LL_Init+0x94>)
 800c16e:	f7fa f8e4 	bl	800633a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c172:	2240      	movs	r2, #64	@ 0x40
 800c174:	2100      	movs	r1, #0
 800c176:	4806      	ldr	r0, [pc, #24]	@ (800c190 <USBD_LL_Init+0x94>)
 800c178:	f7fa f898 	bl	80062ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c17c:	2280      	movs	r2, #128	@ 0x80
 800c17e:	2101      	movs	r1, #1
 800c180:	4803      	ldr	r0, [pc, #12]	@ (800c190 <USBD_LL_Init+0x94>)
 800c182:	f7fa f893 	bl	80062ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20001fb4 	.word	0x20001fb4

0800c194 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7f8 ff9e 	bl	80050ec <HAL_PCD_Start>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f942 	bl	800c440 <USBD_Get_USB_Status>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	4608      	mov	r0, r1
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4603      	mov	r3, r0
 800c1da:	70fb      	strb	r3, [r7, #3]
 800c1dc:	460b      	mov	r3, r1
 800c1de:	70bb      	strb	r3, [r7, #2]
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c1f2:	78bb      	ldrb	r3, [r7, #2]
 800c1f4:	883a      	ldrh	r2, [r7, #0]
 800c1f6:	78f9      	ldrb	r1, [r7, #3]
 800c1f8:	f7f9 fc72 	bl	8005ae0 <HAL_PCD_EP_Open>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c200:	7bfb      	ldrb	r3, [r7, #15]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 f91c 	bl	800c440 <USBD_Get_USB_Status>
 800c208:	4603      	mov	r3, r0
 800c20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3710      	adds	r7, #16
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b084      	sub	sp, #16
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	460b      	mov	r3, r1
 800c220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c222:	2300      	movs	r3, #0
 800c224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c230:	78fa      	ldrb	r2, [r7, #3]
 800c232:	4611      	mov	r1, r2
 800c234:	4618      	mov	r0, r3
 800c236:	f7f9 fcbd 	bl	8005bb4 <HAL_PCD_EP_Close>
 800c23a:	4603      	mov	r3, r0
 800c23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	4618      	mov	r0, r3
 800c242:	f000 f8fd 	bl	800c440 <USBD_Get_USB_Status>
 800c246:	4603      	mov	r3, r0
 800c248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3710      	adds	r7, #16
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c26e:	78fa      	ldrb	r2, [r7, #3]
 800c270:	4611      	mov	r1, r2
 800c272:	4618      	mov	r0, r3
 800c274:	f7f9 fd75 	bl	8005d62 <HAL_PCD_EP_SetStall>
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 f8de 	bl	800c440 <USBD_Get_USB_Status>
 800c284:	4603      	mov	r3, r0
 800c286:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c288:	7bbb      	ldrb	r3, [r7, #14]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}

0800c292 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c292:	b580      	push	{r7, lr}
 800c294:	b084      	sub	sp, #16
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2ac:	78fa      	ldrb	r2, [r7, #3]
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7f9 fdb9 	bl	8005e28 <HAL_PCD_EP_ClrStall>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f000 f8bf 	bl	800c440 <USBD_Get_USB_Status>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	da0b      	bge.n	800c304 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2f2:	68f9      	ldr	r1, [r7, #12]
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	4413      	add	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	440b      	add	r3, r1
 800c2fe:	3316      	adds	r3, #22
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	e00b      	b.n	800c31c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c304:	78fb      	ldrb	r3, [r7, #3]
 800c306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c30a:	68f9      	ldr	r1, [r7, #12]
 800c30c:	4613      	mov	r3, r2
 800c30e:	00db      	lsls	r3, r3, #3
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	440b      	add	r3, r1
 800c316:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c31a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	4611      	mov	r1, r2
 800c346:	4618      	mov	r0, r3
 800c348:	f7f9 fba6 	bl	8005a98 <HAL_PCD_SetAddress>
 800c34c:	4603      	mov	r3, r0
 800c34e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c350:	7bfb      	ldrb	r3, [r7, #15]
 800c352:	4618      	mov	r0, r3
 800c354:	f000 f874 	bl	800c440 <USBD_Get_USB_Status>
 800c358:	4603      	mov	r3, r0
 800c35a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3710      	adds	r7, #16
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	60f8      	str	r0, [r7, #12]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
 800c372:	460b      	mov	r3, r1
 800c374:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37a:	2300      	movs	r3, #0
 800c37c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c384:	7af9      	ldrb	r1, [r7, #11]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	f7f9 fcb0 	bl	8005cee <HAL_PCD_EP_Transmit>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f853 	bl	800c440 <USBD_Get_USB_Status>
 800c39a:	4603      	mov	r3, r0
 800c39c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c39e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	607a      	str	r2, [r7, #4]
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	460b      	mov	r3, r1
 800c3b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3c6:	7af9      	ldrb	r1, [r7, #11]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	f7f9 fc3c 	bl	8005c48 <HAL_PCD_EP_Receive>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 f832 	bl	800c440 <USBD_Get_USB_Status>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}

0800c3ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3ea:	b580      	push	{r7, lr}
 800c3ec:	b082      	sub	sp, #8
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	6078      	str	r0, [r7, #4]
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3fc:	78fa      	ldrb	r2, [r7, #3]
 800c3fe:	4611      	mov	r1, r2
 800c400:	4618      	mov	r0, r3
 800c402:	f7f9 fc5c 	bl	8005cbe <HAL_PCD_EP_GetRxCount>
 800c406:	4603      	mov	r3, r0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c418:	4b03      	ldr	r3, [pc, #12]	@ (800c428 <USBD_static_malloc+0x18>)
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	20002498 	.word	0x20002498

0800c42c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]

}
 800c434:	bf00      	nop
 800c436:	370c      	adds	r7, #12
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	4603      	mov	r3, r0
 800c448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d817      	bhi.n	800c484 <USBD_Get_USB_Status+0x44>
 800c454:	a201      	add	r2, pc, #4	@ (adr r2, 800c45c <USBD_Get_USB_Status+0x1c>)
 800c456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c45a:	bf00      	nop
 800c45c:	0800c46d 	.word	0x0800c46d
 800c460:	0800c473 	.word	0x0800c473
 800c464:	0800c479 	.word	0x0800c479
 800c468:	0800c47f 	.word	0x0800c47f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
    break;
 800c470:	e00b      	b.n	800c48a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c472:	2303      	movs	r3, #3
 800c474:	73fb      	strb	r3, [r7, #15]
    break;
 800c476:	e008      	b.n	800c48a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c478:	2301      	movs	r3, #1
 800c47a:	73fb      	strb	r3, [r7, #15]
    break;
 800c47c:	e005      	b.n	800c48a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c47e:	2303      	movs	r3, #3
 800c480:	73fb      	strb	r3, [r7, #15]
    break;
 800c482:	e002      	b.n	800c48a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c484:	2303      	movs	r3, #3
 800c486:	73fb      	strb	r3, [r7, #15]
    break;
 800c488:	bf00      	nop
  }
  return usb_status;
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <__cvt>:
 800c498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c49c:	ec57 6b10 	vmov	r6, r7, d0
 800c4a0:	2f00      	cmp	r7, #0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	bfbb      	ittet	lt
 800c4aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c4ae:	461f      	movlt	r7, r3
 800c4b0:	2300      	movge	r3, #0
 800c4b2:	232d      	movlt	r3, #45	@ 0x2d
 800c4b4:	700b      	strb	r3, [r1, #0]
 800c4b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c4bc:	4691      	mov	r9, r2
 800c4be:	f023 0820 	bic.w	r8, r3, #32
 800c4c2:	bfbc      	itt	lt
 800c4c4:	4632      	movlt	r2, r6
 800c4c6:	4616      	movlt	r6, r2
 800c4c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c4cc:	d005      	beq.n	800c4da <__cvt+0x42>
 800c4ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c4d2:	d100      	bne.n	800c4d6 <__cvt+0x3e>
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	2102      	movs	r1, #2
 800c4d8:	e000      	b.n	800c4dc <__cvt+0x44>
 800c4da:	2103      	movs	r1, #3
 800c4dc:	ab03      	add	r3, sp, #12
 800c4de:	9301      	str	r3, [sp, #4]
 800c4e0:	ab02      	add	r3, sp, #8
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	ec47 6b10 	vmov	d0, r6, r7
 800c4e8:	4653      	mov	r3, sl
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	f000 fe68 	bl	800d1c0 <_dtoa_r>
 800c4f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	d119      	bne.n	800c52c <__cvt+0x94>
 800c4f8:	f019 0f01 	tst.w	r9, #1
 800c4fc:	d00e      	beq.n	800c51c <__cvt+0x84>
 800c4fe:	eb00 0904 	add.w	r9, r0, r4
 800c502:	2200      	movs	r2, #0
 800c504:	2300      	movs	r3, #0
 800c506:	4630      	mov	r0, r6
 800c508:	4639      	mov	r1, r7
 800c50a:	f7f4 fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c50e:	b108      	cbz	r0, 800c514 <__cvt+0x7c>
 800c510:	f8cd 900c 	str.w	r9, [sp, #12]
 800c514:	2230      	movs	r2, #48	@ 0x30
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	454b      	cmp	r3, r9
 800c51a:	d31e      	bcc.n	800c55a <__cvt+0xc2>
 800c51c:	9b03      	ldr	r3, [sp, #12]
 800c51e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c520:	1b5b      	subs	r3, r3, r5
 800c522:	4628      	mov	r0, r5
 800c524:	6013      	str	r3, [r2, #0]
 800c526:	b004      	add	sp, #16
 800c528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c52c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c530:	eb00 0904 	add.w	r9, r0, r4
 800c534:	d1e5      	bne.n	800c502 <__cvt+0x6a>
 800c536:	7803      	ldrb	r3, [r0, #0]
 800c538:	2b30      	cmp	r3, #48	@ 0x30
 800c53a:	d10a      	bne.n	800c552 <__cvt+0xba>
 800c53c:	2200      	movs	r2, #0
 800c53e:	2300      	movs	r3, #0
 800c540:	4630      	mov	r0, r6
 800c542:	4639      	mov	r1, r7
 800c544:	f7f4 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c548:	b918      	cbnz	r0, 800c552 <__cvt+0xba>
 800c54a:	f1c4 0401 	rsb	r4, r4, #1
 800c54e:	f8ca 4000 	str.w	r4, [sl]
 800c552:	f8da 3000 	ldr.w	r3, [sl]
 800c556:	4499      	add	r9, r3
 800c558:	e7d3      	b.n	800c502 <__cvt+0x6a>
 800c55a:	1c59      	adds	r1, r3, #1
 800c55c:	9103      	str	r1, [sp, #12]
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	e7d9      	b.n	800c516 <__cvt+0x7e>

0800c562 <__exponent>:
 800c562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c564:	2900      	cmp	r1, #0
 800c566:	bfba      	itte	lt
 800c568:	4249      	neglt	r1, r1
 800c56a:	232d      	movlt	r3, #45	@ 0x2d
 800c56c:	232b      	movge	r3, #43	@ 0x2b
 800c56e:	2909      	cmp	r1, #9
 800c570:	7002      	strb	r2, [r0, #0]
 800c572:	7043      	strb	r3, [r0, #1]
 800c574:	dd29      	ble.n	800c5ca <__exponent+0x68>
 800c576:	f10d 0307 	add.w	r3, sp, #7
 800c57a:	461d      	mov	r5, r3
 800c57c:	270a      	movs	r7, #10
 800c57e:	461a      	mov	r2, r3
 800c580:	fbb1 f6f7 	udiv	r6, r1, r7
 800c584:	fb07 1416 	mls	r4, r7, r6, r1
 800c588:	3430      	adds	r4, #48	@ 0x30
 800c58a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c58e:	460c      	mov	r4, r1
 800c590:	2c63      	cmp	r4, #99	@ 0x63
 800c592:	f103 33ff 	add.w	r3, r3, #4294967295
 800c596:	4631      	mov	r1, r6
 800c598:	dcf1      	bgt.n	800c57e <__exponent+0x1c>
 800c59a:	3130      	adds	r1, #48	@ 0x30
 800c59c:	1e94      	subs	r4, r2, #2
 800c59e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c5a2:	1c41      	adds	r1, r0, #1
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	42ab      	cmp	r3, r5
 800c5a8:	d30a      	bcc.n	800c5c0 <__exponent+0x5e>
 800c5aa:	f10d 0309 	add.w	r3, sp, #9
 800c5ae:	1a9b      	subs	r3, r3, r2
 800c5b0:	42ac      	cmp	r4, r5
 800c5b2:	bf88      	it	hi
 800c5b4:	2300      	movhi	r3, #0
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	4403      	add	r3, r0
 800c5ba:	1a18      	subs	r0, r3, r0
 800c5bc:	b003      	add	sp, #12
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c5c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c5c8:	e7ed      	b.n	800c5a6 <__exponent+0x44>
 800c5ca:	2330      	movs	r3, #48	@ 0x30
 800c5cc:	3130      	adds	r1, #48	@ 0x30
 800c5ce:	7083      	strb	r3, [r0, #2]
 800c5d0:	70c1      	strb	r1, [r0, #3]
 800c5d2:	1d03      	adds	r3, r0, #4
 800c5d4:	e7f1      	b.n	800c5ba <__exponent+0x58>
	...

0800c5d8 <_printf_float>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	b08d      	sub	sp, #52	@ 0x34
 800c5de:	460c      	mov	r4, r1
 800c5e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	f000 fcdb 	bl	800cfa4 <_localeconv_r>
 800c5ee:	6803      	ldr	r3, [r0, #0]
 800c5f0:	9304      	str	r3, [sp, #16]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7f3 fe44 	bl	8000280 <strlen>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c600:	9005      	str	r0, [sp, #20]
 800c602:	3307      	adds	r3, #7
 800c604:	f023 0307 	bic.w	r3, r3, #7
 800c608:	f103 0208 	add.w	r2, r3, #8
 800c60c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c610:	f8d4 b000 	ldr.w	fp, [r4]
 800c614:	f8c8 2000 	str.w	r2, [r8]
 800c618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c61c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c620:	9307      	str	r3, [sp, #28]
 800c622:	f8cd 8018 	str.w	r8, [sp, #24]
 800c626:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c62a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c62e:	4b9c      	ldr	r3, [pc, #624]	@ (800c8a0 <_printf_float+0x2c8>)
 800c630:	f04f 32ff 	mov.w	r2, #4294967295
 800c634:	f7f4 fa82 	bl	8000b3c <__aeabi_dcmpun>
 800c638:	bb70      	cbnz	r0, 800c698 <_printf_float+0xc0>
 800c63a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c63e:	4b98      	ldr	r3, [pc, #608]	@ (800c8a0 <_printf_float+0x2c8>)
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	f7f4 fa5c 	bl	8000b00 <__aeabi_dcmple>
 800c648:	bb30      	cbnz	r0, 800c698 <_printf_float+0xc0>
 800c64a:	2200      	movs	r2, #0
 800c64c:	2300      	movs	r3, #0
 800c64e:	4640      	mov	r0, r8
 800c650:	4649      	mov	r1, r9
 800c652:	f7f4 fa4b 	bl	8000aec <__aeabi_dcmplt>
 800c656:	b110      	cbz	r0, 800c65e <_printf_float+0x86>
 800c658:	232d      	movs	r3, #45	@ 0x2d
 800c65a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c65e:	4a91      	ldr	r2, [pc, #580]	@ (800c8a4 <_printf_float+0x2cc>)
 800c660:	4b91      	ldr	r3, [pc, #580]	@ (800c8a8 <_printf_float+0x2d0>)
 800c662:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c666:	bf94      	ite	ls
 800c668:	4690      	movls	r8, r2
 800c66a:	4698      	movhi	r8, r3
 800c66c:	2303      	movs	r3, #3
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	f02b 0304 	bic.w	r3, fp, #4
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	f04f 0900 	mov.w	r9, #0
 800c67a:	9700      	str	r7, [sp, #0]
 800c67c:	4633      	mov	r3, r6
 800c67e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c680:	4621      	mov	r1, r4
 800c682:	4628      	mov	r0, r5
 800c684:	f000 f9d2 	bl	800ca2c <_printf_common>
 800c688:	3001      	adds	r0, #1
 800c68a:	f040 808d 	bne.w	800c7a8 <_printf_float+0x1d0>
 800c68e:	f04f 30ff 	mov.w	r0, #4294967295
 800c692:	b00d      	add	sp, #52	@ 0x34
 800c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c698:	4642      	mov	r2, r8
 800c69a:	464b      	mov	r3, r9
 800c69c:	4640      	mov	r0, r8
 800c69e:	4649      	mov	r1, r9
 800c6a0:	f7f4 fa4c 	bl	8000b3c <__aeabi_dcmpun>
 800c6a4:	b140      	cbz	r0, 800c6b8 <_printf_float+0xe0>
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	bfbc      	itt	lt
 800c6ac:	232d      	movlt	r3, #45	@ 0x2d
 800c6ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c6b2:	4a7e      	ldr	r2, [pc, #504]	@ (800c8ac <_printf_float+0x2d4>)
 800c6b4:	4b7e      	ldr	r3, [pc, #504]	@ (800c8b0 <_printf_float+0x2d8>)
 800c6b6:	e7d4      	b.n	800c662 <_printf_float+0x8a>
 800c6b8:	6863      	ldr	r3, [r4, #4]
 800c6ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c6be:	9206      	str	r2, [sp, #24]
 800c6c0:	1c5a      	adds	r2, r3, #1
 800c6c2:	d13b      	bne.n	800c73c <_printf_float+0x164>
 800c6c4:	2306      	movs	r3, #6
 800c6c6:	6063      	str	r3, [r4, #4]
 800c6c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	6022      	str	r2, [r4, #0]
 800c6d0:	9303      	str	r3, [sp, #12]
 800c6d2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c6d8:	ab09      	add	r3, sp, #36	@ 0x24
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	6861      	ldr	r1, [r4, #4]
 800c6de:	ec49 8b10 	vmov	d0, r8, r9
 800c6e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f7ff fed6 	bl	800c498 <__cvt>
 800c6ec:	9b06      	ldr	r3, [sp, #24]
 800c6ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c6f0:	2b47      	cmp	r3, #71	@ 0x47
 800c6f2:	4680      	mov	r8, r0
 800c6f4:	d129      	bne.n	800c74a <_printf_float+0x172>
 800c6f6:	1cc8      	adds	r0, r1, #3
 800c6f8:	db02      	blt.n	800c700 <_printf_float+0x128>
 800c6fa:	6863      	ldr	r3, [r4, #4]
 800c6fc:	4299      	cmp	r1, r3
 800c6fe:	dd41      	ble.n	800c784 <_printf_float+0x1ac>
 800c700:	f1aa 0a02 	sub.w	sl, sl, #2
 800c704:	fa5f fa8a 	uxtb.w	sl, sl
 800c708:	3901      	subs	r1, #1
 800c70a:	4652      	mov	r2, sl
 800c70c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c710:	9109      	str	r1, [sp, #36]	@ 0x24
 800c712:	f7ff ff26 	bl	800c562 <__exponent>
 800c716:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c718:	1813      	adds	r3, r2, r0
 800c71a:	2a01      	cmp	r2, #1
 800c71c:	4681      	mov	r9, r0
 800c71e:	6123      	str	r3, [r4, #16]
 800c720:	dc02      	bgt.n	800c728 <_printf_float+0x150>
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	07d2      	lsls	r2, r2, #31
 800c726:	d501      	bpl.n	800c72c <_printf_float+0x154>
 800c728:	3301      	adds	r3, #1
 800c72a:	6123      	str	r3, [r4, #16]
 800c72c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c730:	2b00      	cmp	r3, #0
 800c732:	d0a2      	beq.n	800c67a <_printf_float+0xa2>
 800c734:	232d      	movs	r3, #45	@ 0x2d
 800c736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c73a:	e79e      	b.n	800c67a <_printf_float+0xa2>
 800c73c:	9a06      	ldr	r2, [sp, #24]
 800c73e:	2a47      	cmp	r2, #71	@ 0x47
 800c740:	d1c2      	bne.n	800c6c8 <_printf_float+0xf0>
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1c0      	bne.n	800c6c8 <_printf_float+0xf0>
 800c746:	2301      	movs	r3, #1
 800c748:	e7bd      	b.n	800c6c6 <_printf_float+0xee>
 800c74a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c74e:	d9db      	bls.n	800c708 <_printf_float+0x130>
 800c750:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c754:	d118      	bne.n	800c788 <_printf_float+0x1b0>
 800c756:	2900      	cmp	r1, #0
 800c758:	6863      	ldr	r3, [r4, #4]
 800c75a:	dd0b      	ble.n	800c774 <_printf_float+0x19c>
 800c75c:	6121      	str	r1, [r4, #16]
 800c75e:	b913      	cbnz	r3, 800c766 <_printf_float+0x18e>
 800c760:	6822      	ldr	r2, [r4, #0]
 800c762:	07d0      	lsls	r0, r2, #31
 800c764:	d502      	bpl.n	800c76c <_printf_float+0x194>
 800c766:	3301      	adds	r3, #1
 800c768:	440b      	add	r3, r1
 800c76a:	6123      	str	r3, [r4, #16]
 800c76c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c76e:	f04f 0900 	mov.w	r9, #0
 800c772:	e7db      	b.n	800c72c <_printf_float+0x154>
 800c774:	b913      	cbnz	r3, 800c77c <_printf_float+0x1a4>
 800c776:	6822      	ldr	r2, [r4, #0]
 800c778:	07d2      	lsls	r2, r2, #31
 800c77a:	d501      	bpl.n	800c780 <_printf_float+0x1a8>
 800c77c:	3302      	adds	r3, #2
 800c77e:	e7f4      	b.n	800c76a <_printf_float+0x192>
 800c780:	2301      	movs	r3, #1
 800c782:	e7f2      	b.n	800c76a <_printf_float+0x192>
 800c784:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c78a:	4299      	cmp	r1, r3
 800c78c:	db05      	blt.n	800c79a <_printf_float+0x1c2>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	6121      	str	r1, [r4, #16]
 800c792:	07d8      	lsls	r0, r3, #31
 800c794:	d5ea      	bpl.n	800c76c <_printf_float+0x194>
 800c796:	1c4b      	adds	r3, r1, #1
 800c798:	e7e7      	b.n	800c76a <_printf_float+0x192>
 800c79a:	2900      	cmp	r1, #0
 800c79c:	bfd4      	ite	le
 800c79e:	f1c1 0202 	rsble	r2, r1, #2
 800c7a2:	2201      	movgt	r2, #1
 800c7a4:	4413      	add	r3, r2
 800c7a6:	e7e0      	b.n	800c76a <_printf_float+0x192>
 800c7a8:	6823      	ldr	r3, [r4, #0]
 800c7aa:	055a      	lsls	r2, r3, #21
 800c7ac:	d407      	bmi.n	800c7be <_printf_float+0x1e6>
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	47b8      	blx	r7
 800c7b8:	3001      	adds	r0, #1
 800c7ba:	d12b      	bne.n	800c814 <_printf_float+0x23c>
 800c7bc:	e767      	b.n	800c68e <_printf_float+0xb6>
 800c7be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c7c2:	f240 80dd 	bls.w	800c980 <_printf_float+0x3a8>
 800c7c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f7f4 f983 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d033      	beq.n	800c83e <_printf_float+0x266>
 800c7d6:	4a37      	ldr	r2, [pc, #220]	@ (800c8b4 <_printf_float+0x2dc>)
 800c7d8:	2301      	movs	r3, #1
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4628      	mov	r0, r5
 800c7de:	47b8      	blx	r7
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f43f af54 	beq.w	800c68e <_printf_float+0xb6>
 800c7e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c7ea:	4543      	cmp	r3, r8
 800c7ec:	db02      	blt.n	800c7f4 <_printf_float+0x21c>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	07d8      	lsls	r0, r3, #31
 800c7f2:	d50f      	bpl.n	800c814 <_printf_float+0x23c>
 800c7f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7f8:	4631      	mov	r1, r6
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	47b8      	blx	r7
 800c7fe:	3001      	adds	r0, #1
 800c800:	f43f af45 	beq.w	800c68e <_printf_float+0xb6>
 800c804:	f04f 0900 	mov.w	r9, #0
 800c808:	f108 38ff 	add.w	r8, r8, #4294967295
 800c80c:	f104 0a1a 	add.w	sl, r4, #26
 800c810:	45c8      	cmp	r8, r9
 800c812:	dc09      	bgt.n	800c828 <_printf_float+0x250>
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	079b      	lsls	r3, r3, #30
 800c818:	f100 8103 	bmi.w	800ca22 <_printf_float+0x44a>
 800c81c:	68e0      	ldr	r0, [r4, #12]
 800c81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c820:	4298      	cmp	r0, r3
 800c822:	bfb8      	it	lt
 800c824:	4618      	movlt	r0, r3
 800c826:	e734      	b.n	800c692 <_printf_float+0xba>
 800c828:	2301      	movs	r3, #1
 800c82a:	4652      	mov	r2, sl
 800c82c:	4631      	mov	r1, r6
 800c82e:	4628      	mov	r0, r5
 800c830:	47b8      	blx	r7
 800c832:	3001      	adds	r0, #1
 800c834:	f43f af2b 	beq.w	800c68e <_printf_float+0xb6>
 800c838:	f109 0901 	add.w	r9, r9, #1
 800c83c:	e7e8      	b.n	800c810 <_printf_float+0x238>
 800c83e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	dc39      	bgt.n	800c8b8 <_printf_float+0x2e0>
 800c844:	4a1b      	ldr	r2, [pc, #108]	@ (800c8b4 <_printf_float+0x2dc>)
 800c846:	2301      	movs	r3, #1
 800c848:	4631      	mov	r1, r6
 800c84a:	4628      	mov	r0, r5
 800c84c:	47b8      	blx	r7
 800c84e:	3001      	adds	r0, #1
 800c850:	f43f af1d 	beq.w	800c68e <_printf_float+0xb6>
 800c854:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c858:	ea59 0303 	orrs.w	r3, r9, r3
 800c85c:	d102      	bne.n	800c864 <_printf_float+0x28c>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	07d9      	lsls	r1, r3, #31
 800c862:	d5d7      	bpl.n	800c814 <_printf_float+0x23c>
 800c864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c868:	4631      	mov	r1, r6
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b8      	blx	r7
 800c86e:	3001      	adds	r0, #1
 800c870:	f43f af0d 	beq.w	800c68e <_printf_float+0xb6>
 800c874:	f04f 0a00 	mov.w	sl, #0
 800c878:	f104 0b1a 	add.w	fp, r4, #26
 800c87c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c87e:	425b      	negs	r3, r3
 800c880:	4553      	cmp	r3, sl
 800c882:	dc01      	bgt.n	800c888 <_printf_float+0x2b0>
 800c884:	464b      	mov	r3, r9
 800c886:	e793      	b.n	800c7b0 <_printf_float+0x1d8>
 800c888:	2301      	movs	r3, #1
 800c88a:	465a      	mov	r2, fp
 800c88c:	4631      	mov	r1, r6
 800c88e:	4628      	mov	r0, r5
 800c890:	47b8      	blx	r7
 800c892:	3001      	adds	r0, #1
 800c894:	f43f aefb 	beq.w	800c68e <_printf_float+0xb6>
 800c898:	f10a 0a01 	add.w	sl, sl, #1
 800c89c:	e7ee      	b.n	800c87c <_printf_float+0x2a4>
 800c89e:	bf00      	nop
 800c8a0:	7fefffff 	.word	0x7fefffff
 800c8a4:	0800f210 	.word	0x0800f210
 800c8a8:	0800f214 	.word	0x0800f214
 800c8ac:	0800f218 	.word	0x0800f218
 800c8b0:	0800f21c 	.word	0x0800f21c
 800c8b4:	0800f220 	.word	0x0800f220
 800c8b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c8be:	4553      	cmp	r3, sl
 800c8c0:	bfa8      	it	ge
 800c8c2:	4653      	movge	r3, sl
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	4699      	mov	r9, r3
 800c8c8:	dc36      	bgt.n	800c938 <_printf_float+0x360>
 800c8ca:	f04f 0b00 	mov.w	fp, #0
 800c8ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8d2:	f104 021a 	add.w	r2, r4, #26
 800c8d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c8d8:	9306      	str	r3, [sp, #24]
 800c8da:	eba3 0309 	sub.w	r3, r3, r9
 800c8de:	455b      	cmp	r3, fp
 800c8e0:	dc31      	bgt.n	800c946 <_printf_float+0x36e>
 800c8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e4:	459a      	cmp	sl, r3
 800c8e6:	dc3a      	bgt.n	800c95e <_printf_float+0x386>
 800c8e8:	6823      	ldr	r3, [r4, #0]
 800c8ea:	07da      	lsls	r2, r3, #31
 800c8ec:	d437      	bmi.n	800c95e <_printf_float+0x386>
 800c8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8f0:	ebaa 0903 	sub.w	r9, sl, r3
 800c8f4:	9b06      	ldr	r3, [sp, #24]
 800c8f6:	ebaa 0303 	sub.w	r3, sl, r3
 800c8fa:	4599      	cmp	r9, r3
 800c8fc:	bfa8      	it	ge
 800c8fe:	4699      	movge	r9, r3
 800c900:	f1b9 0f00 	cmp.w	r9, #0
 800c904:	dc33      	bgt.n	800c96e <_printf_float+0x396>
 800c906:	f04f 0800 	mov.w	r8, #0
 800c90a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c90e:	f104 0b1a 	add.w	fp, r4, #26
 800c912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c914:	ebaa 0303 	sub.w	r3, sl, r3
 800c918:	eba3 0309 	sub.w	r3, r3, r9
 800c91c:	4543      	cmp	r3, r8
 800c91e:	f77f af79 	ble.w	800c814 <_printf_float+0x23c>
 800c922:	2301      	movs	r3, #1
 800c924:	465a      	mov	r2, fp
 800c926:	4631      	mov	r1, r6
 800c928:	4628      	mov	r0, r5
 800c92a:	47b8      	blx	r7
 800c92c:	3001      	adds	r0, #1
 800c92e:	f43f aeae 	beq.w	800c68e <_printf_float+0xb6>
 800c932:	f108 0801 	add.w	r8, r8, #1
 800c936:	e7ec      	b.n	800c912 <_printf_float+0x33a>
 800c938:	4642      	mov	r2, r8
 800c93a:	4631      	mov	r1, r6
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b8      	blx	r7
 800c940:	3001      	adds	r0, #1
 800c942:	d1c2      	bne.n	800c8ca <_printf_float+0x2f2>
 800c944:	e6a3      	b.n	800c68e <_printf_float+0xb6>
 800c946:	2301      	movs	r3, #1
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	9206      	str	r2, [sp, #24]
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f ae9c 	beq.w	800c68e <_printf_float+0xb6>
 800c956:	9a06      	ldr	r2, [sp, #24]
 800c958:	f10b 0b01 	add.w	fp, fp, #1
 800c95c:	e7bb      	b.n	800c8d6 <_printf_float+0x2fe>
 800c95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c962:	4631      	mov	r1, r6
 800c964:	4628      	mov	r0, r5
 800c966:	47b8      	blx	r7
 800c968:	3001      	adds	r0, #1
 800c96a:	d1c0      	bne.n	800c8ee <_printf_float+0x316>
 800c96c:	e68f      	b.n	800c68e <_printf_float+0xb6>
 800c96e:	9a06      	ldr	r2, [sp, #24]
 800c970:	464b      	mov	r3, r9
 800c972:	4442      	add	r2, r8
 800c974:	4631      	mov	r1, r6
 800c976:	4628      	mov	r0, r5
 800c978:	47b8      	blx	r7
 800c97a:	3001      	adds	r0, #1
 800c97c:	d1c3      	bne.n	800c906 <_printf_float+0x32e>
 800c97e:	e686      	b.n	800c68e <_printf_float+0xb6>
 800c980:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c984:	f1ba 0f01 	cmp.w	sl, #1
 800c988:	dc01      	bgt.n	800c98e <_printf_float+0x3b6>
 800c98a:	07db      	lsls	r3, r3, #31
 800c98c:	d536      	bpl.n	800c9fc <_printf_float+0x424>
 800c98e:	2301      	movs	r3, #1
 800c990:	4642      	mov	r2, r8
 800c992:	4631      	mov	r1, r6
 800c994:	4628      	mov	r0, r5
 800c996:	47b8      	blx	r7
 800c998:	3001      	adds	r0, #1
 800c99a:	f43f ae78 	beq.w	800c68e <_printf_float+0xb6>
 800c99e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	47b8      	blx	r7
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	f43f ae70 	beq.w	800c68e <_printf_float+0xb6>
 800c9ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9ba:	f7f4 f88d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9be:	b9c0      	cbnz	r0, 800c9f2 <_printf_float+0x41a>
 800c9c0:	4653      	mov	r3, sl
 800c9c2:	f108 0201 	add.w	r2, r8, #1
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	4628      	mov	r0, r5
 800c9ca:	47b8      	blx	r7
 800c9cc:	3001      	adds	r0, #1
 800c9ce:	d10c      	bne.n	800c9ea <_printf_float+0x412>
 800c9d0:	e65d      	b.n	800c68e <_printf_float+0xb6>
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	465a      	mov	r2, fp
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	4628      	mov	r0, r5
 800c9da:	47b8      	blx	r7
 800c9dc:	3001      	adds	r0, #1
 800c9de:	f43f ae56 	beq.w	800c68e <_printf_float+0xb6>
 800c9e2:	f108 0801 	add.w	r8, r8, #1
 800c9e6:	45d0      	cmp	r8, sl
 800c9e8:	dbf3      	blt.n	800c9d2 <_printf_float+0x3fa>
 800c9ea:	464b      	mov	r3, r9
 800c9ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c9f0:	e6df      	b.n	800c7b2 <_printf_float+0x1da>
 800c9f2:	f04f 0800 	mov.w	r8, #0
 800c9f6:	f104 0b1a 	add.w	fp, r4, #26
 800c9fa:	e7f4      	b.n	800c9e6 <_printf_float+0x40e>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	4642      	mov	r2, r8
 800ca00:	e7e1      	b.n	800c9c6 <_printf_float+0x3ee>
 800ca02:	2301      	movs	r3, #1
 800ca04:	464a      	mov	r2, r9
 800ca06:	4631      	mov	r1, r6
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b8      	blx	r7
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f43f ae3e 	beq.w	800c68e <_printf_float+0xb6>
 800ca12:	f108 0801 	add.w	r8, r8, #1
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca1a:	1a5b      	subs	r3, r3, r1
 800ca1c:	4543      	cmp	r3, r8
 800ca1e:	dcf0      	bgt.n	800ca02 <_printf_float+0x42a>
 800ca20:	e6fc      	b.n	800c81c <_printf_float+0x244>
 800ca22:	f04f 0800 	mov.w	r8, #0
 800ca26:	f104 0919 	add.w	r9, r4, #25
 800ca2a:	e7f4      	b.n	800ca16 <_printf_float+0x43e>

0800ca2c <_printf_common>:
 800ca2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca30:	4616      	mov	r6, r2
 800ca32:	4698      	mov	r8, r3
 800ca34:	688a      	ldr	r2, [r1, #8]
 800ca36:	690b      	ldr	r3, [r1, #16]
 800ca38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	bfb8      	it	lt
 800ca40:	4613      	movlt	r3, r2
 800ca42:	6033      	str	r3, [r6, #0]
 800ca44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ca48:	4607      	mov	r7, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	b10a      	cbz	r2, 800ca52 <_printf_common+0x26>
 800ca4e:	3301      	adds	r3, #1
 800ca50:	6033      	str	r3, [r6, #0]
 800ca52:	6823      	ldr	r3, [r4, #0]
 800ca54:	0699      	lsls	r1, r3, #26
 800ca56:	bf42      	ittt	mi
 800ca58:	6833      	ldrmi	r3, [r6, #0]
 800ca5a:	3302      	addmi	r3, #2
 800ca5c:	6033      	strmi	r3, [r6, #0]
 800ca5e:	6825      	ldr	r5, [r4, #0]
 800ca60:	f015 0506 	ands.w	r5, r5, #6
 800ca64:	d106      	bne.n	800ca74 <_printf_common+0x48>
 800ca66:	f104 0a19 	add.w	sl, r4, #25
 800ca6a:	68e3      	ldr	r3, [r4, #12]
 800ca6c:	6832      	ldr	r2, [r6, #0]
 800ca6e:	1a9b      	subs	r3, r3, r2
 800ca70:	42ab      	cmp	r3, r5
 800ca72:	dc26      	bgt.n	800cac2 <_printf_common+0x96>
 800ca74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	3b00      	subs	r3, #0
 800ca7c:	bf18      	it	ne
 800ca7e:	2301      	movne	r3, #1
 800ca80:	0692      	lsls	r2, r2, #26
 800ca82:	d42b      	bmi.n	800cadc <_printf_common+0xb0>
 800ca84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ca88:	4641      	mov	r1, r8
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	47c8      	blx	r9
 800ca8e:	3001      	adds	r0, #1
 800ca90:	d01e      	beq.n	800cad0 <_printf_common+0xa4>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	6922      	ldr	r2, [r4, #16]
 800ca96:	f003 0306 	and.w	r3, r3, #6
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	bf02      	ittt	eq
 800ca9e:	68e5      	ldreq	r5, [r4, #12]
 800caa0:	6833      	ldreq	r3, [r6, #0]
 800caa2:	1aed      	subeq	r5, r5, r3
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	bf0c      	ite	eq
 800caa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caac:	2500      	movne	r5, #0
 800caae:	4293      	cmp	r3, r2
 800cab0:	bfc4      	itt	gt
 800cab2:	1a9b      	subgt	r3, r3, r2
 800cab4:	18ed      	addgt	r5, r5, r3
 800cab6:	2600      	movs	r6, #0
 800cab8:	341a      	adds	r4, #26
 800caba:	42b5      	cmp	r5, r6
 800cabc:	d11a      	bne.n	800caf4 <_printf_common+0xc8>
 800cabe:	2000      	movs	r0, #0
 800cac0:	e008      	b.n	800cad4 <_printf_common+0xa8>
 800cac2:	2301      	movs	r3, #1
 800cac4:	4652      	mov	r2, sl
 800cac6:	4641      	mov	r1, r8
 800cac8:	4638      	mov	r0, r7
 800caca:	47c8      	blx	r9
 800cacc:	3001      	adds	r0, #1
 800cace:	d103      	bne.n	800cad8 <_printf_common+0xac>
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad8:	3501      	adds	r5, #1
 800cada:	e7c6      	b.n	800ca6a <_printf_common+0x3e>
 800cadc:	18e1      	adds	r1, r4, r3
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	2030      	movs	r0, #48	@ 0x30
 800cae2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cae6:	4422      	add	r2, r4
 800cae8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800caec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800caf0:	3302      	adds	r3, #2
 800caf2:	e7c7      	b.n	800ca84 <_printf_common+0x58>
 800caf4:	2301      	movs	r3, #1
 800caf6:	4622      	mov	r2, r4
 800caf8:	4641      	mov	r1, r8
 800cafa:	4638      	mov	r0, r7
 800cafc:	47c8      	blx	r9
 800cafe:	3001      	adds	r0, #1
 800cb00:	d0e6      	beq.n	800cad0 <_printf_common+0xa4>
 800cb02:	3601      	adds	r6, #1
 800cb04:	e7d9      	b.n	800caba <_printf_common+0x8e>
	...

0800cb08 <_printf_i>:
 800cb08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb0c:	7e0f      	ldrb	r7, [r1, #24]
 800cb0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cb10:	2f78      	cmp	r7, #120	@ 0x78
 800cb12:	4691      	mov	r9, r2
 800cb14:	4680      	mov	r8, r0
 800cb16:	460c      	mov	r4, r1
 800cb18:	469a      	mov	sl, r3
 800cb1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cb1e:	d807      	bhi.n	800cb30 <_printf_i+0x28>
 800cb20:	2f62      	cmp	r7, #98	@ 0x62
 800cb22:	d80a      	bhi.n	800cb3a <_printf_i+0x32>
 800cb24:	2f00      	cmp	r7, #0
 800cb26:	f000 80d2 	beq.w	800ccce <_printf_i+0x1c6>
 800cb2a:	2f58      	cmp	r7, #88	@ 0x58
 800cb2c:	f000 80b9 	beq.w	800cca2 <_printf_i+0x19a>
 800cb30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cb34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cb38:	e03a      	b.n	800cbb0 <_printf_i+0xa8>
 800cb3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cb3e:	2b15      	cmp	r3, #21
 800cb40:	d8f6      	bhi.n	800cb30 <_printf_i+0x28>
 800cb42:	a101      	add	r1, pc, #4	@ (adr r1, 800cb48 <_printf_i+0x40>)
 800cb44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb48:	0800cba1 	.word	0x0800cba1
 800cb4c:	0800cbb5 	.word	0x0800cbb5
 800cb50:	0800cb31 	.word	0x0800cb31
 800cb54:	0800cb31 	.word	0x0800cb31
 800cb58:	0800cb31 	.word	0x0800cb31
 800cb5c:	0800cb31 	.word	0x0800cb31
 800cb60:	0800cbb5 	.word	0x0800cbb5
 800cb64:	0800cb31 	.word	0x0800cb31
 800cb68:	0800cb31 	.word	0x0800cb31
 800cb6c:	0800cb31 	.word	0x0800cb31
 800cb70:	0800cb31 	.word	0x0800cb31
 800cb74:	0800ccb5 	.word	0x0800ccb5
 800cb78:	0800cbdf 	.word	0x0800cbdf
 800cb7c:	0800cc6f 	.word	0x0800cc6f
 800cb80:	0800cb31 	.word	0x0800cb31
 800cb84:	0800cb31 	.word	0x0800cb31
 800cb88:	0800ccd7 	.word	0x0800ccd7
 800cb8c:	0800cb31 	.word	0x0800cb31
 800cb90:	0800cbdf 	.word	0x0800cbdf
 800cb94:	0800cb31 	.word	0x0800cb31
 800cb98:	0800cb31 	.word	0x0800cb31
 800cb9c:	0800cc77 	.word	0x0800cc77
 800cba0:	6833      	ldr	r3, [r6, #0]
 800cba2:	1d1a      	adds	r2, r3, #4
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	6032      	str	r2, [r6, #0]
 800cba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cbac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e09d      	b.n	800ccf0 <_printf_i+0x1e8>
 800cbb4:	6833      	ldr	r3, [r6, #0]
 800cbb6:	6820      	ldr	r0, [r4, #0]
 800cbb8:	1d19      	adds	r1, r3, #4
 800cbba:	6031      	str	r1, [r6, #0]
 800cbbc:	0606      	lsls	r6, r0, #24
 800cbbe:	d501      	bpl.n	800cbc4 <_printf_i+0xbc>
 800cbc0:	681d      	ldr	r5, [r3, #0]
 800cbc2:	e003      	b.n	800cbcc <_printf_i+0xc4>
 800cbc4:	0645      	lsls	r5, r0, #25
 800cbc6:	d5fb      	bpl.n	800cbc0 <_printf_i+0xb8>
 800cbc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cbcc:	2d00      	cmp	r5, #0
 800cbce:	da03      	bge.n	800cbd8 <_printf_i+0xd0>
 800cbd0:	232d      	movs	r3, #45	@ 0x2d
 800cbd2:	426d      	negs	r5, r5
 800cbd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbd8:	4859      	ldr	r0, [pc, #356]	@ (800cd40 <_printf_i+0x238>)
 800cbda:	230a      	movs	r3, #10
 800cbdc:	e011      	b.n	800cc02 <_printf_i+0xfa>
 800cbde:	6821      	ldr	r1, [r4, #0]
 800cbe0:	6833      	ldr	r3, [r6, #0]
 800cbe2:	0608      	lsls	r0, r1, #24
 800cbe4:	f853 5b04 	ldr.w	r5, [r3], #4
 800cbe8:	d402      	bmi.n	800cbf0 <_printf_i+0xe8>
 800cbea:	0649      	lsls	r1, r1, #25
 800cbec:	bf48      	it	mi
 800cbee:	b2ad      	uxthmi	r5, r5
 800cbf0:	2f6f      	cmp	r7, #111	@ 0x6f
 800cbf2:	4853      	ldr	r0, [pc, #332]	@ (800cd40 <_printf_i+0x238>)
 800cbf4:	6033      	str	r3, [r6, #0]
 800cbf6:	bf14      	ite	ne
 800cbf8:	230a      	movne	r3, #10
 800cbfa:	2308      	moveq	r3, #8
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cc02:	6866      	ldr	r6, [r4, #4]
 800cc04:	60a6      	str	r6, [r4, #8]
 800cc06:	2e00      	cmp	r6, #0
 800cc08:	bfa2      	ittt	ge
 800cc0a:	6821      	ldrge	r1, [r4, #0]
 800cc0c:	f021 0104 	bicge.w	r1, r1, #4
 800cc10:	6021      	strge	r1, [r4, #0]
 800cc12:	b90d      	cbnz	r5, 800cc18 <_printf_i+0x110>
 800cc14:	2e00      	cmp	r6, #0
 800cc16:	d04b      	beq.n	800ccb0 <_printf_i+0x1a8>
 800cc18:	4616      	mov	r6, r2
 800cc1a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc1e:	fb03 5711 	mls	r7, r3, r1, r5
 800cc22:	5dc7      	ldrb	r7, [r0, r7]
 800cc24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc28:	462f      	mov	r7, r5
 800cc2a:	42bb      	cmp	r3, r7
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	d9f4      	bls.n	800cc1a <_printf_i+0x112>
 800cc30:	2b08      	cmp	r3, #8
 800cc32:	d10b      	bne.n	800cc4c <_printf_i+0x144>
 800cc34:	6823      	ldr	r3, [r4, #0]
 800cc36:	07df      	lsls	r7, r3, #31
 800cc38:	d508      	bpl.n	800cc4c <_printf_i+0x144>
 800cc3a:	6923      	ldr	r3, [r4, #16]
 800cc3c:	6861      	ldr	r1, [r4, #4]
 800cc3e:	4299      	cmp	r1, r3
 800cc40:	bfde      	ittt	le
 800cc42:	2330      	movle	r3, #48	@ 0x30
 800cc44:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc48:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc4c:	1b92      	subs	r2, r2, r6
 800cc4e:	6122      	str	r2, [r4, #16]
 800cc50:	f8cd a000 	str.w	sl, [sp]
 800cc54:	464b      	mov	r3, r9
 800cc56:	aa03      	add	r2, sp, #12
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	f7ff fee6 	bl	800ca2c <_printf_common>
 800cc60:	3001      	adds	r0, #1
 800cc62:	d14a      	bne.n	800ccfa <_printf_i+0x1f2>
 800cc64:	f04f 30ff 	mov.w	r0, #4294967295
 800cc68:	b004      	add	sp, #16
 800cc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	f043 0320 	orr.w	r3, r3, #32
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	4833      	ldr	r0, [pc, #204]	@ (800cd44 <_printf_i+0x23c>)
 800cc78:	2778      	movs	r7, #120	@ 0x78
 800cc7a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	6831      	ldr	r1, [r6, #0]
 800cc82:	061f      	lsls	r7, r3, #24
 800cc84:	f851 5b04 	ldr.w	r5, [r1], #4
 800cc88:	d402      	bmi.n	800cc90 <_printf_i+0x188>
 800cc8a:	065f      	lsls	r7, r3, #25
 800cc8c:	bf48      	it	mi
 800cc8e:	b2ad      	uxthmi	r5, r5
 800cc90:	6031      	str	r1, [r6, #0]
 800cc92:	07d9      	lsls	r1, r3, #31
 800cc94:	bf44      	itt	mi
 800cc96:	f043 0320 	orrmi.w	r3, r3, #32
 800cc9a:	6023      	strmi	r3, [r4, #0]
 800cc9c:	b11d      	cbz	r5, 800cca6 <_printf_i+0x19e>
 800cc9e:	2310      	movs	r3, #16
 800cca0:	e7ac      	b.n	800cbfc <_printf_i+0xf4>
 800cca2:	4827      	ldr	r0, [pc, #156]	@ (800cd40 <_printf_i+0x238>)
 800cca4:	e7e9      	b.n	800cc7a <_printf_i+0x172>
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	f023 0320 	bic.w	r3, r3, #32
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	e7f6      	b.n	800cc9e <_printf_i+0x196>
 800ccb0:	4616      	mov	r6, r2
 800ccb2:	e7bd      	b.n	800cc30 <_printf_i+0x128>
 800ccb4:	6833      	ldr	r3, [r6, #0]
 800ccb6:	6825      	ldr	r5, [r4, #0]
 800ccb8:	6961      	ldr	r1, [r4, #20]
 800ccba:	1d18      	adds	r0, r3, #4
 800ccbc:	6030      	str	r0, [r6, #0]
 800ccbe:	062e      	lsls	r6, r5, #24
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	d501      	bpl.n	800ccc8 <_printf_i+0x1c0>
 800ccc4:	6019      	str	r1, [r3, #0]
 800ccc6:	e002      	b.n	800ccce <_printf_i+0x1c6>
 800ccc8:	0668      	lsls	r0, r5, #25
 800ccca:	d5fb      	bpl.n	800ccc4 <_printf_i+0x1bc>
 800cccc:	8019      	strh	r1, [r3, #0]
 800ccce:	2300      	movs	r3, #0
 800ccd0:	6123      	str	r3, [r4, #16]
 800ccd2:	4616      	mov	r6, r2
 800ccd4:	e7bc      	b.n	800cc50 <_printf_i+0x148>
 800ccd6:	6833      	ldr	r3, [r6, #0]
 800ccd8:	1d1a      	adds	r2, r3, #4
 800ccda:	6032      	str	r2, [r6, #0]
 800ccdc:	681e      	ldr	r6, [r3, #0]
 800ccde:	6862      	ldr	r2, [r4, #4]
 800cce0:	2100      	movs	r1, #0
 800cce2:	4630      	mov	r0, r6
 800cce4:	f7f3 fa7c 	bl	80001e0 <memchr>
 800cce8:	b108      	cbz	r0, 800ccee <_printf_i+0x1e6>
 800ccea:	1b80      	subs	r0, r0, r6
 800ccec:	6060      	str	r0, [r4, #4]
 800ccee:	6863      	ldr	r3, [r4, #4]
 800ccf0:	6123      	str	r3, [r4, #16]
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccf8:	e7aa      	b.n	800cc50 <_printf_i+0x148>
 800ccfa:	6923      	ldr	r3, [r4, #16]
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	4649      	mov	r1, r9
 800cd00:	4640      	mov	r0, r8
 800cd02:	47d0      	blx	sl
 800cd04:	3001      	adds	r0, #1
 800cd06:	d0ad      	beq.n	800cc64 <_printf_i+0x15c>
 800cd08:	6823      	ldr	r3, [r4, #0]
 800cd0a:	079b      	lsls	r3, r3, #30
 800cd0c:	d413      	bmi.n	800cd36 <_printf_i+0x22e>
 800cd0e:	68e0      	ldr	r0, [r4, #12]
 800cd10:	9b03      	ldr	r3, [sp, #12]
 800cd12:	4298      	cmp	r0, r3
 800cd14:	bfb8      	it	lt
 800cd16:	4618      	movlt	r0, r3
 800cd18:	e7a6      	b.n	800cc68 <_printf_i+0x160>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	4632      	mov	r2, r6
 800cd1e:	4649      	mov	r1, r9
 800cd20:	4640      	mov	r0, r8
 800cd22:	47d0      	blx	sl
 800cd24:	3001      	adds	r0, #1
 800cd26:	d09d      	beq.n	800cc64 <_printf_i+0x15c>
 800cd28:	3501      	adds	r5, #1
 800cd2a:	68e3      	ldr	r3, [r4, #12]
 800cd2c:	9903      	ldr	r1, [sp, #12]
 800cd2e:	1a5b      	subs	r3, r3, r1
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	dcf2      	bgt.n	800cd1a <_printf_i+0x212>
 800cd34:	e7eb      	b.n	800cd0e <_printf_i+0x206>
 800cd36:	2500      	movs	r5, #0
 800cd38:	f104 0619 	add.w	r6, r4, #25
 800cd3c:	e7f5      	b.n	800cd2a <_printf_i+0x222>
 800cd3e:	bf00      	nop
 800cd40:	0800f222 	.word	0x0800f222
 800cd44:	0800f233 	.word	0x0800f233

0800cd48 <std>:
 800cd48:	2300      	movs	r3, #0
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd56:	6083      	str	r3, [r0, #8]
 800cd58:	8181      	strh	r1, [r0, #12]
 800cd5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd5c:	81c2      	strh	r2, [r0, #14]
 800cd5e:	6183      	str	r3, [r0, #24]
 800cd60:	4619      	mov	r1, r3
 800cd62:	2208      	movs	r2, #8
 800cd64:	305c      	adds	r0, #92	@ 0x5c
 800cd66:	f000 f914 	bl	800cf92 <memset>
 800cd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cda0 <std+0x58>)
 800cd6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cda4 <std+0x5c>)
 800cd70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd72:	4b0d      	ldr	r3, [pc, #52]	@ (800cda8 <std+0x60>)
 800cd74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd76:	4b0d      	ldr	r3, [pc, #52]	@ (800cdac <std+0x64>)
 800cd78:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdb0 <std+0x68>)
 800cd7c:	6224      	str	r4, [r4, #32]
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	d006      	beq.n	800cd90 <std+0x48>
 800cd82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd86:	4294      	cmp	r4, r2
 800cd88:	d002      	beq.n	800cd90 <std+0x48>
 800cd8a:	33d0      	adds	r3, #208	@ 0xd0
 800cd8c:	429c      	cmp	r4, r3
 800cd8e:	d105      	bne.n	800cd9c <std+0x54>
 800cd90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd98:	f000 b978 	b.w	800d08c <__retarget_lock_init_recursive>
 800cd9c:	bd10      	pop	{r4, pc}
 800cd9e:	bf00      	nop
 800cda0:	0800cf0d 	.word	0x0800cf0d
 800cda4:	0800cf2f 	.word	0x0800cf2f
 800cda8:	0800cf67 	.word	0x0800cf67
 800cdac:	0800cf8b 	.word	0x0800cf8b
 800cdb0:	200026b8 	.word	0x200026b8

0800cdb4 <stdio_exit_handler>:
 800cdb4:	4a02      	ldr	r2, [pc, #8]	@ (800cdc0 <stdio_exit_handler+0xc>)
 800cdb6:	4903      	ldr	r1, [pc, #12]	@ (800cdc4 <stdio_exit_handler+0x10>)
 800cdb8:	4803      	ldr	r0, [pc, #12]	@ (800cdc8 <stdio_exit_handler+0x14>)
 800cdba:	f000 b869 	b.w	800ce90 <_fwalk_sglue>
 800cdbe:	bf00      	nop
 800cdc0:	20000324 	.word	0x20000324
 800cdc4:	0800ea05 	.word	0x0800ea05
 800cdc8:	20000334 	.word	0x20000334

0800cdcc <cleanup_stdio>:
 800cdcc:	6841      	ldr	r1, [r0, #4]
 800cdce:	4b0c      	ldr	r3, [pc, #48]	@ (800ce00 <cleanup_stdio+0x34>)
 800cdd0:	4299      	cmp	r1, r3
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	d001      	beq.n	800cddc <cleanup_stdio+0x10>
 800cdd8:	f001 fe14 	bl	800ea04 <_fflush_r>
 800cddc:	68a1      	ldr	r1, [r4, #8]
 800cdde:	4b09      	ldr	r3, [pc, #36]	@ (800ce04 <cleanup_stdio+0x38>)
 800cde0:	4299      	cmp	r1, r3
 800cde2:	d002      	beq.n	800cdea <cleanup_stdio+0x1e>
 800cde4:	4620      	mov	r0, r4
 800cde6:	f001 fe0d 	bl	800ea04 <_fflush_r>
 800cdea:	68e1      	ldr	r1, [r4, #12]
 800cdec:	4b06      	ldr	r3, [pc, #24]	@ (800ce08 <cleanup_stdio+0x3c>)
 800cdee:	4299      	cmp	r1, r3
 800cdf0:	d004      	beq.n	800cdfc <cleanup_stdio+0x30>
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdf8:	f001 be04 	b.w	800ea04 <_fflush_r>
 800cdfc:	bd10      	pop	{r4, pc}
 800cdfe:	bf00      	nop
 800ce00:	200026b8 	.word	0x200026b8
 800ce04:	20002720 	.word	0x20002720
 800ce08:	20002788 	.word	0x20002788

0800ce0c <global_stdio_init.part.0>:
 800ce0c:	b510      	push	{r4, lr}
 800ce0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ce3c <global_stdio_init.part.0+0x30>)
 800ce10:	4c0b      	ldr	r4, [pc, #44]	@ (800ce40 <global_stdio_init.part.0+0x34>)
 800ce12:	4a0c      	ldr	r2, [pc, #48]	@ (800ce44 <global_stdio_init.part.0+0x38>)
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	4620      	mov	r0, r4
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2104      	movs	r1, #4
 800ce1c:	f7ff ff94 	bl	800cd48 <std>
 800ce20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce24:	2201      	movs	r2, #1
 800ce26:	2109      	movs	r1, #9
 800ce28:	f7ff ff8e 	bl	800cd48 <std>
 800ce2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce30:	2202      	movs	r2, #2
 800ce32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce36:	2112      	movs	r1, #18
 800ce38:	f7ff bf86 	b.w	800cd48 <std>
 800ce3c:	200027f0 	.word	0x200027f0
 800ce40:	200026b8 	.word	0x200026b8
 800ce44:	0800cdb5 	.word	0x0800cdb5

0800ce48 <__sfp_lock_acquire>:
 800ce48:	4801      	ldr	r0, [pc, #4]	@ (800ce50 <__sfp_lock_acquire+0x8>)
 800ce4a:	f000 b920 	b.w	800d08e <__retarget_lock_acquire_recursive>
 800ce4e:	bf00      	nop
 800ce50:	200027f9 	.word	0x200027f9

0800ce54 <__sfp_lock_release>:
 800ce54:	4801      	ldr	r0, [pc, #4]	@ (800ce5c <__sfp_lock_release+0x8>)
 800ce56:	f000 b91b 	b.w	800d090 <__retarget_lock_release_recursive>
 800ce5a:	bf00      	nop
 800ce5c:	200027f9 	.word	0x200027f9

0800ce60 <__sinit>:
 800ce60:	b510      	push	{r4, lr}
 800ce62:	4604      	mov	r4, r0
 800ce64:	f7ff fff0 	bl	800ce48 <__sfp_lock_acquire>
 800ce68:	6a23      	ldr	r3, [r4, #32]
 800ce6a:	b11b      	cbz	r3, 800ce74 <__sinit+0x14>
 800ce6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce70:	f7ff bff0 	b.w	800ce54 <__sfp_lock_release>
 800ce74:	4b04      	ldr	r3, [pc, #16]	@ (800ce88 <__sinit+0x28>)
 800ce76:	6223      	str	r3, [r4, #32]
 800ce78:	4b04      	ldr	r3, [pc, #16]	@ (800ce8c <__sinit+0x2c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d1f5      	bne.n	800ce6c <__sinit+0xc>
 800ce80:	f7ff ffc4 	bl	800ce0c <global_stdio_init.part.0>
 800ce84:	e7f2      	b.n	800ce6c <__sinit+0xc>
 800ce86:	bf00      	nop
 800ce88:	0800cdcd 	.word	0x0800cdcd
 800ce8c:	200027f0 	.word	0x200027f0

0800ce90 <_fwalk_sglue>:
 800ce90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	4607      	mov	r7, r0
 800ce96:	4688      	mov	r8, r1
 800ce98:	4614      	mov	r4, r2
 800ce9a:	2600      	movs	r6, #0
 800ce9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cea0:	f1b9 0901 	subs.w	r9, r9, #1
 800cea4:	d505      	bpl.n	800ceb2 <_fwalk_sglue+0x22>
 800cea6:	6824      	ldr	r4, [r4, #0]
 800cea8:	2c00      	cmp	r4, #0
 800ceaa:	d1f7      	bne.n	800ce9c <_fwalk_sglue+0xc>
 800ceac:	4630      	mov	r0, r6
 800ceae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ceb2:	89ab      	ldrh	r3, [r5, #12]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d907      	bls.n	800cec8 <_fwalk_sglue+0x38>
 800ceb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cebc:	3301      	adds	r3, #1
 800cebe:	d003      	beq.n	800cec8 <_fwalk_sglue+0x38>
 800cec0:	4629      	mov	r1, r5
 800cec2:	4638      	mov	r0, r7
 800cec4:	47c0      	blx	r8
 800cec6:	4306      	orrs	r6, r0
 800cec8:	3568      	adds	r5, #104	@ 0x68
 800ceca:	e7e9      	b.n	800cea0 <_fwalk_sglue+0x10>

0800cecc <siprintf>:
 800cecc:	b40e      	push	{r1, r2, r3}
 800cece:	b500      	push	{lr}
 800ced0:	b09c      	sub	sp, #112	@ 0x70
 800ced2:	ab1d      	add	r3, sp, #116	@ 0x74
 800ced4:	9002      	str	r0, [sp, #8]
 800ced6:	9006      	str	r0, [sp, #24]
 800ced8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cedc:	4809      	ldr	r0, [pc, #36]	@ (800cf04 <siprintf+0x38>)
 800cede:	9107      	str	r1, [sp, #28]
 800cee0:	9104      	str	r1, [sp, #16]
 800cee2:	4909      	ldr	r1, [pc, #36]	@ (800cf08 <siprintf+0x3c>)
 800cee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cee8:	9105      	str	r1, [sp, #20]
 800ceea:	6800      	ldr	r0, [r0, #0]
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	a902      	add	r1, sp, #8
 800cef0:	f001 fc08 	bl	800e704 <_svfiprintf_r>
 800cef4:	9b02      	ldr	r3, [sp, #8]
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
 800cefa:	b01c      	add	sp, #112	@ 0x70
 800cefc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf00:	b003      	add	sp, #12
 800cf02:	4770      	bx	lr
 800cf04:	20000330 	.word	0x20000330
 800cf08:	ffff0208 	.word	0xffff0208

0800cf0c <__sread>:
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	460c      	mov	r4, r1
 800cf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf14:	f000 f86c 	bl	800cff0 <_read_r>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	bfab      	itete	ge
 800cf1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf1e:	89a3      	ldrhlt	r3, [r4, #12]
 800cf20:	181b      	addge	r3, r3, r0
 800cf22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf26:	bfac      	ite	ge
 800cf28:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf2a:	81a3      	strhlt	r3, [r4, #12]
 800cf2c:	bd10      	pop	{r4, pc}

0800cf2e <__swrite>:
 800cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf32:	461f      	mov	r7, r3
 800cf34:	898b      	ldrh	r3, [r1, #12]
 800cf36:	05db      	lsls	r3, r3, #23
 800cf38:	4605      	mov	r5, r0
 800cf3a:	460c      	mov	r4, r1
 800cf3c:	4616      	mov	r6, r2
 800cf3e:	d505      	bpl.n	800cf4c <__swrite+0x1e>
 800cf40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf44:	2302      	movs	r3, #2
 800cf46:	2200      	movs	r2, #0
 800cf48:	f000 f840 	bl	800cfcc <_lseek_r>
 800cf4c:	89a3      	ldrh	r3, [r4, #12]
 800cf4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf56:	81a3      	strh	r3, [r4, #12]
 800cf58:	4632      	mov	r2, r6
 800cf5a:	463b      	mov	r3, r7
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf62:	f000 b857 	b.w	800d014 <_write_r>

0800cf66 <__sseek>:
 800cf66:	b510      	push	{r4, lr}
 800cf68:	460c      	mov	r4, r1
 800cf6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf6e:	f000 f82d 	bl	800cfcc <_lseek_r>
 800cf72:	1c43      	adds	r3, r0, #1
 800cf74:	89a3      	ldrh	r3, [r4, #12]
 800cf76:	bf15      	itete	ne
 800cf78:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf82:	81a3      	strheq	r3, [r4, #12]
 800cf84:	bf18      	it	ne
 800cf86:	81a3      	strhne	r3, [r4, #12]
 800cf88:	bd10      	pop	{r4, pc}

0800cf8a <__sclose>:
 800cf8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf8e:	f000 b80d 	b.w	800cfac <_close_r>

0800cf92 <memset>:
 800cf92:	4402      	add	r2, r0
 800cf94:	4603      	mov	r3, r0
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d100      	bne.n	800cf9c <memset+0xa>
 800cf9a:	4770      	bx	lr
 800cf9c:	f803 1b01 	strb.w	r1, [r3], #1
 800cfa0:	e7f9      	b.n	800cf96 <memset+0x4>
	...

0800cfa4 <_localeconv_r>:
 800cfa4:	4800      	ldr	r0, [pc, #0]	@ (800cfa8 <_localeconv_r+0x4>)
 800cfa6:	4770      	bx	lr
 800cfa8:	20000470 	.word	0x20000470

0800cfac <_close_r>:
 800cfac:	b538      	push	{r3, r4, r5, lr}
 800cfae:	4d06      	ldr	r5, [pc, #24]	@ (800cfc8 <_close_r+0x1c>)
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	4604      	mov	r4, r0
 800cfb4:	4608      	mov	r0, r1
 800cfb6:	602b      	str	r3, [r5, #0]
 800cfb8:	f7f6 fa68 	bl	800348c <_close>
 800cfbc:	1c43      	adds	r3, r0, #1
 800cfbe:	d102      	bne.n	800cfc6 <_close_r+0x1a>
 800cfc0:	682b      	ldr	r3, [r5, #0]
 800cfc2:	b103      	cbz	r3, 800cfc6 <_close_r+0x1a>
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	bd38      	pop	{r3, r4, r5, pc}
 800cfc8:	200027f4 	.word	0x200027f4

0800cfcc <_lseek_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d07      	ldr	r5, [pc, #28]	@ (800cfec <_lseek_r+0x20>)
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	4608      	mov	r0, r1
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	602a      	str	r2, [r5, #0]
 800cfda:	461a      	mov	r2, r3
 800cfdc:	f7f6 fa7d 	bl	80034da <_lseek>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_lseek_r+0x1e>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_lseek_r+0x1e>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	200027f4 	.word	0x200027f4

0800cff0 <_read_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d07      	ldr	r5, [pc, #28]	@ (800d010 <_read_r+0x20>)
 800cff4:	4604      	mov	r4, r0
 800cff6:	4608      	mov	r0, r1
 800cff8:	4611      	mov	r1, r2
 800cffa:	2200      	movs	r2, #0
 800cffc:	602a      	str	r2, [r5, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	f7f6 fa0b 	bl	800341a <_read>
 800d004:	1c43      	adds	r3, r0, #1
 800d006:	d102      	bne.n	800d00e <_read_r+0x1e>
 800d008:	682b      	ldr	r3, [r5, #0]
 800d00a:	b103      	cbz	r3, 800d00e <_read_r+0x1e>
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	bd38      	pop	{r3, r4, r5, pc}
 800d010:	200027f4 	.word	0x200027f4

0800d014 <_write_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4d07      	ldr	r5, [pc, #28]	@ (800d034 <_write_r+0x20>)
 800d018:	4604      	mov	r4, r0
 800d01a:	4608      	mov	r0, r1
 800d01c:	4611      	mov	r1, r2
 800d01e:	2200      	movs	r2, #0
 800d020:	602a      	str	r2, [r5, #0]
 800d022:	461a      	mov	r2, r3
 800d024:	f7f6 fa16 	bl	8003454 <_write>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d102      	bne.n	800d032 <_write_r+0x1e>
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	b103      	cbz	r3, 800d032 <_write_r+0x1e>
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	200027f4 	.word	0x200027f4

0800d038 <__errno>:
 800d038:	4b01      	ldr	r3, [pc, #4]	@ (800d040 <__errno+0x8>)
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	20000330 	.word	0x20000330

0800d044 <__libc_init_array>:
 800d044:	b570      	push	{r4, r5, r6, lr}
 800d046:	4d0d      	ldr	r5, [pc, #52]	@ (800d07c <__libc_init_array+0x38>)
 800d048:	4c0d      	ldr	r4, [pc, #52]	@ (800d080 <__libc_init_array+0x3c>)
 800d04a:	1b64      	subs	r4, r4, r5
 800d04c:	10a4      	asrs	r4, r4, #2
 800d04e:	2600      	movs	r6, #0
 800d050:	42a6      	cmp	r6, r4
 800d052:	d109      	bne.n	800d068 <__libc_init_array+0x24>
 800d054:	4d0b      	ldr	r5, [pc, #44]	@ (800d084 <__libc_init_array+0x40>)
 800d056:	4c0c      	ldr	r4, [pc, #48]	@ (800d088 <__libc_init_array+0x44>)
 800d058:	f002 f886 	bl	800f168 <_init>
 800d05c:	1b64      	subs	r4, r4, r5
 800d05e:	10a4      	asrs	r4, r4, #2
 800d060:	2600      	movs	r6, #0
 800d062:	42a6      	cmp	r6, r4
 800d064:	d105      	bne.n	800d072 <__libc_init_array+0x2e>
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	f855 3b04 	ldr.w	r3, [r5], #4
 800d06c:	4798      	blx	r3
 800d06e:	3601      	adds	r6, #1
 800d070:	e7ee      	b.n	800d050 <__libc_init_array+0xc>
 800d072:	f855 3b04 	ldr.w	r3, [r5], #4
 800d076:	4798      	blx	r3
 800d078:	3601      	adds	r6, #1
 800d07a:	e7f2      	b.n	800d062 <__libc_init_array+0x1e>
 800d07c:	0800f588 	.word	0x0800f588
 800d080:	0800f588 	.word	0x0800f588
 800d084:	0800f588 	.word	0x0800f588
 800d088:	0800f58c 	.word	0x0800f58c

0800d08c <__retarget_lock_init_recursive>:
 800d08c:	4770      	bx	lr

0800d08e <__retarget_lock_acquire_recursive>:
 800d08e:	4770      	bx	lr

0800d090 <__retarget_lock_release_recursive>:
 800d090:	4770      	bx	lr

0800d092 <memcpy>:
 800d092:	440a      	add	r2, r1
 800d094:	4291      	cmp	r1, r2
 800d096:	f100 33ff 	add.w	r3, r0, #4294967295
 800d09a:	d100      	bne.n	800d09e <memcpy+0xc>
 800d09c:	4770      	bx	lr
 800d09e:	b510      	push	{r4, lr}
 800d0a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0a8:	4291      	cmp	r1, r2
 800d0aa:	d1f9      	bne.n	800d0a0 <memcpy+0xe>
 800d0ac:	bd10      	pop	{r4, pc}

0800d0ae <quorem>:
 800d0ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b2:	6903      	ldr	r3, [r0, #16]
 800d0b4:	690c      	ldr	r4, [r1, #16]
 800d0b6:	42a3      	cmp	r3, r4
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	db7e      	blt.n	800d1ba <quorem+0x10c>
 800d0bc:	3c01      	subs	r4, #1
 800d0be:	f101 0814 	add.w	r8, r1, #20
 800d0c2:	00a3      	lsls	r3, r4, #2
 800d0c4:	f100 0514 	add.w	r5, r0, #20
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d0d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d0e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d0e4:	d32e      	bcc.n	800d144 <quorem+0x96>
 800d0e6:	f04f 0a00 	mov.w	sl, #0
 800d0ea:	46c4      	mov	ip, r8
 800d0ec:	46ae      	mov	lr, r5
 800d0ee:	46d3      	mov	fp, sl
 800d0f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0f4:	b298      	uxth	r0, r3
 800d0f6:	fb06 a000 	mla	r0, r6, r0, sl
 800d0fa:	0c02      	lsrs	r2, r0, #16
 800d0fc:	0c1b      	lsrs	r3, r3, #16
 800d0fe:	fb06 2303 	mla	r3, r6, r3, r2
 800d102:	f8de 2000 	ldr.w	r2, [lr]
 800d106:	b280      	uxth	r0, r0
 800d108:	b292      	uxth	r2, r2
 800d10a:	1a12      	subs	r2, r2, r0
 800d10c:	445a      	add	r2, fp
 800d10e:	f8de 0000 	ldr.w	r0, [lr]
 800d112:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d116:	b29b      	uxth	r3, r3
 800d118:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d11c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d120:	b292      	uxth	r2, r2
 800d122:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d126:	45e1      	cmp	r9, ip
 800d128:	f84e 2b04 	str.w	r2, [lr], #4
 800d12c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d130:	d2de      	bcs.n	800d0f0 <quorem+0x42>
 800d132:	9b00      	ldr	r3, [sp, #0]
 800d134:	58eb      	ldr	r3, [r5, r3]
 800d136:	b92b      	cbnz	r3, 800d144 <quorem+0x96>
 800d138:	9b01      	ldr	r3, [sp, #4]
 800d13a:	3b04      	subs	r3, #4
 800d13c:	429d      	cmp	r5, r3
 800d13e:	461a      	mov	r2, r3
 800d140:	d32f      	bcc.n	800d1a2 <quorem+0xf4>
 800d142:	613c      	str	r4, [r7, #16]
 800d144:	4638      	mov	r0, r7
 800d146:	f001 f979 	bl	800e43c <__mcmp>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	db25      	blt.n	800d19a <quorem+0xec>
 800d14e:	4629      	mov	r1, r5
 800d150:	2000      	movs	r0, #0
 800d152:	f858 2b04 	ldr.w	r2, [r8], #4
 800d156:	f8d1 c000 	ldr.w	ip, [r1]
 800d15a:	fa1f fe82 	uxth.w	lr, r2
 800d15e:	fa1f f38c 	uxth.w	r3, ip
 800d162:	eba3 030e 	sub.w	r3, r3, lr
 800d166:	4403      	add	r3, r0
 800d168:	0c12      	lsrs	r2, r2, #16
 800d16a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d16e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d172:	b29b      	uxth	r3, r3
 800d174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d178:	45c1      	cmp	r9, r8
 800d17a:	f841 3b04 	str.w	r3, [r1], #4
 800d17e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d182:	d2e6      	bcs.n	800d152 <quorem+0xa4>
 800d184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d18c:	b922      	cbnz	r2, 800d198 <quorem+0xea>
 800d18e:	3b04      	subs	r3, #4
 800d190:	429d      	cmp	r5, r3
 800d192:	461a      	mov	r2, r3
 800d194:	d30b      	bcc.n	800d1ae <quorem+0x100>
 800d196:	613c      	str	r4, [r7, #16]
 800d198:	3601      	adds	r6, #1
 800d19a:	4630      	mov	r0, r6
 800d19c:	b003      	add	sp, #12
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a2:	6812      	ldr	r2, [r2, #0]
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d1cb      	bne.n	800d142 <quorem+0x94>
 800d1aa:	3c01      	subs	r4, #1
 800d1ac:	e7c6      	b.n	800d13c <quorem+0x8e>
 800d1ae:	6812      	ldr	r2, [r2, #0]
 800d1b0:	3b04      	subs	r3, #4
 800d1b2:	2a00      	cmp	r2, #0
 800d1b4:	d1ef      	bne.n	800d196 <quorem+0xe8>
 800d1b6:	3c01      	subs	r4, #1
 800d1b8:	e7ea      	b.n	800d190 <quorem+0xe2>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	e7ee      	b.n	800d19c <quorem+0xee>
	...

0800d1c0 <_dtoa_r>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	69c7      	ldr	r7, [r0, #28]
 800d1c6:	b099      	sub	sp, #100	@ 0x64
 800d1c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d1cc:	ec55 4b10 	vmov	r4, r5, d0
 800d1d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d1d2:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1d4:	4683      	mov	fp, r0
 800d1d6:	920e      	str	r2, [sp, #56]	@ 0x38
 800d1d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1da:	b97f      	cbnz	r7, 800d1fc <_dtoa_r+0x3c>
 800d1dc:	2010      	movs	r0, #16
 800d1de:	f000 fdfd 	bl	800dddc <malloc>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	f8cb 001c 	str.w	r0, [fp, #28]
 800d1e8:	b920      	cbnz	r0, 800d1f4 <_dtoa_r+0x34>
 800d1ea:	4ba7      	ldr	r3, [pc, #668]	@ (800d488 <_dtoa_r+0x2c8>)
 800d1ec:	21ef      	movs	r1, #239	@ 0xef
 800d1ee:	48a7      	ldr	r0, [pc, #668]	@ (800d48c <_dtoa_r+0x2cc>)
 800d1f0:	f001 fc5a 	bl	800eaa8 <__assert_func>
 800d1f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1f8:	6007      	str	r7, [r0, #0]
 800d1fa:	60c7      	str	r7, [r0, #12]
 800d1fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d200:	6819      	ldr	r1, [r3, #0]
 800d202:	b159      	cbz	r1, 800d21c <_dtoa_r+0x5c>
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	604a      	str	r2, [r1, #4]
 800d208:	2301      	movs	r3, #1
 800d20a:	4093      	lsls	r3, r2
 800d20c:	608b      	str	r3, [r1, #8]
 800d20e:	4658      	mov	r0, fp
 800d210:	f000 feda 	bl	800dfc8 <_Bfree>
 800d214:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d218:	2200      	movs	r2, #0
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	1e2b      	subs	r3, r5, #0
 800d21e:	bfb9      	ittee	lt
 800d220:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d224:	9303      	strlt	r3, [sp, #12]
 800d226:	2300      	movge	r3, #0
 800d228:	6033      	strge	r3, [r6, #0]
 800d22a:	9f03      	ldr	r7, [sp, #12]
 800d22c:	4b98      	ldr	r3, [pc, #608]	@ (800d490 <_dtoa_r+0x2d0>)
 800d22e:	bfbc      	itt	lt
 800d230:	2201      	movlt	r2, #1
 800d232:	6032      	strlt	r2, [r6, #0]
 800d234:	43bb      	bics	r3, r7
 800d236:	d112      	bne.n	800d25e <_dtoa_r+0x9e>
 800d238:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d23a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d23e:	6013      	str	r3, [r2, #0]
 800d240:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d244:	4323      	orrs	r3, r4
 800d246:	f000 854d 	beq.w	800dce4 <_dtoa_r+0xb24>
 800d24a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d24c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d4a4 <_dtoa_r+0x2e4>
 800d250:	2b00      	cmp	r3, #0
 800d252:	f000 854f 	beq.w	800dcf4 <_dtoa_r+0xb34>
 800d256:	f10a 0303 	add.w	r3, sl, #3
 800d25a:	f000 bd49 	b.w	800dcf0 <_dtoa_r+0xb30>
 800d25e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d262:	2200      	movs	r2, #0
 800d264:	ec51 0b17 	vmov	r0, r1, d7
 800d268:	2300      	movs	r3, #0
 800d26a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d26e:	f7f3 fc33 	bl	8000ad8 <__aeabi_dcmpeq>
 800d272:	4680      	mov	r8, r0
 800d274:	b158      	cbz	r0, 800d28e <_dtoa_r+0xce>
 800d276:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d278:	2301      	movs	r3, #1
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d27e:	b113      	cbz	r3, 800d286 <_dtoa_r+0xc6>
 800d280:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d282:	4b84      	ldr	r3, [pc, #528]	@ (800d494 <_dtoa_r+0x2d4>)
 800d284:	6013      	str	r3, [r2, #0]
 800d286:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d4a8 <_dtoa_r+0x2e8>
 800d28a:	f000 bd33 	b.w	800dcf4 <_dtoa_r+0xb34>
 800d28e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d292:	aa16      	add	r2, sp, #88	@ 0x58
 800d294:	a917      	add	r1, sp, #92	@ 0x5c
 800d296:	4658      	mov	r0, fp
 800d298:	f001 f980 	bl	800e59c <__d2b>
 800d29c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d2a0:	4681      	mov	r9, r0
 800d2a2:	2e00      	cmp	r6, #0
 800d2a4:	d077      	beq.n	800d396 <_dtoa_r+0x1d6>
 800d2a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d2a8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d2ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d2b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d2bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	4b74      	ldr	r3, [pc, #464]	@ (800d498 <_dtoa_r+0x2d8>)
 800d2c6:	f7f2 ffe7 	bl	8000298 <__aeabi_dsub>
 800d2ca:	a369      	add	r3, pc, #420	@ (adr r3, 800d470 <_dtoa_r+0x2b0>)
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	f7f3 f99a 	bl	8000608 <__aeabi_dmul>
 800d2d4:	a368      	add	r3, pc, #416	@ (adr r3, 800d478 <_dtoa_r+0x2b8>)
 800d2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2da:	f7f2 ffdf 	bl	800029c <__adddf3>
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	f7f3 f926 	bl	8000534 <__aeabi_i2d>
 800d2e8:	a365      	add	r3, pc, #404	@ (adr r3, 800d480 <_dtoa_r+0x2c0>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f3 f98b 	bl	8000608 <__aeabi_dmul>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4620      	mov	r0, r4
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	f7f2 ffcf 	bl	800029c <__adddf3>
 800d2fe:	4604      	mov	r4, r0
 800d300:	460d      	mov	r5, r1
 800d302:	f7f3 fc31 	bl	8000b68 <__aeabi_d2iz>
 800d306:	2200      	movs	r2, #0
 800d308:	4607      	mov	r7, r0
 800d30a:	2300      	movs	r3, #0
 800d30c:	4620      	mov	r0, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	f7f3 fbec 	bl	8000aec <__aeabi_dcmplt>
 800d314:	b140      	cbz	r0, 800d328 <_dtoa_r+0x168>
 800d316:	4638      	mov	r0, r7
 800d318:	f7f3 f90c 	bl	8000534 <__aeabi_i2d>
 800d31c:	4622      	mov	r2, r4
 800d31e:	462b      	mov	r3, r5
 800d320:	f7f3 fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 800d324:	b900      	cbnz	r0, 800d328 <_dtoa_r+0x168>
 800d326:	3f01      	subs	r7, #1
 800d328:	2f16      	cmp	r7, #22
 800d32a:	d851      	bhi.n	800d3d0 <_dtoa_r+0x210>
 800d32c:	4b5b      	ldr	r3, [pc, #364]	@ (800d49c <_dtoa_r+0x2dc>)
 800d32e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d336:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d33a:	f7f3 fbd7 	bl	8000aec <__aeabi_dcmplt>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d048      	beq.n	800d3d4 <_dtoa_r+0x214>
 800d342:	3f01      	subs	r7, #1
 800d344:	2300      	movs	r3, #0
 800d346:	9312      	str	r3, [sp, #72]	@ 0x48
 800d348:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d34a:	1b9b      	subs	r3, r3, r6
 800d34c:	1e5a      	subs	r2, r3, #1
 800d34e:	bf44      	itt	mi
 800d350:	f1c3 0801 	rsbmi	r8, r3, #1
 800d354:	2300      	movmi	r3, #0
 800d356:	9208      	str	r2, [sp, #32]
 800d358:	bf54      	ite	pl
 800d35a:	f04f 0800 	movpl.w	r8, #0
 800d35e:	9308      	strmi	r3, [sp, #32]
 800d360:	2f00      	cmp	r7, #0
 800d362:	db39      	blt.n	800d3d8 <_dtoa_r+0x218>
 800d364:	9b08      	ldr	r3, [sp, #32]
 800d366:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d368:	443b      	add	r3, r7
 800d36a:	9308      	str	r3, [sp, #32]
 800d36c:	2300      	movs	r3, #0
 800d36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d370:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d372:	2b09      	cmp	r3, #9
 800d374:	d864      	bhi.n	800d440 <_dtoa_r+0x280>
 800d376:	2b05      	cmp	r3, #5
 800d378:	bfc4      	itt	gt
 800d37a:	3b04      	subgt	r3, #4
 800d37c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d37e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d380:	f1a3 0302 	sub.w	r3, r3, #2
 800d384:	bfcc      	ite	gt
 800d386:	2400      	movgt	r4, #0
 800d388:	2401      	movle	r4, #1
 800d38a:	2b03      	cmp	r3, #3
 800d38c:	d863      	bhi.n	800d456 <_dtoa_r+0x296>
 800d38e:	e8df f003 	tbb	[pc, r3]
 800d392:	372a      	.short	0x372a
 800d394:	5535      	.short	0x5535
 800d396:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d39a:	441e      	add	r6, r3
 800d39c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d3a0:	2b20      	cmp	r3, #32
 800d3a2:	bfc1      	itttt	gt
 800d3a4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d3a8:	409f      	lslgt	r7, r3
 800d3aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d3ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d3b2:	bfd6      	itet	le
 800d3b4:	f1c3 0320 	rsble	r3, r3, #32
 800d3b8:	ea47 0003 	orrgt.w	r0, r7, r3
 800d3bc:	fa04 f003 	lslle.w	r0, r4, r3
 800d3c0:	f7f3 f8a8 	bl	8000514 <__aeabi_ui2d>
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d3ca:	3e01      	subs	r6, #1
 800d3cc:	9214      	str	r2, [sp, #80]	@ 0x50
 800d3ce:	e777      	b.n	800d2c0 <_dtoa_r+0x100>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e7b8      	b.n	800d346 <_dtoa_r+0x186>
 800d3d4:	9012      	str	r0, [sp, #72]	@ 0x48
 800d3d6:	e7b7      	b.n	800d348 <_dtoa_r+0x188>
 800d3d8:	427b      	negs	r3, r7
 800d3da:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3dc:	2300      	movs	r3, #0
 800d3de:	eba8 0807 	sub.w	r8, r8, r7
 800d3e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d3e4:	e7c4      	b.n	800d370 <_dtoa_r+0x1b0>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	dc35      	bgt.n	800d45c <_dtoa_r+0x29c>
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	9307      	str	r3, [sp, #28]
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3fa:	e00b      	b.n	800d414 <_dtoa_r+0x254>
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e7f3      	b.n	800d3e8 <_dtoa_r+0x228>
 800d400:	2300      	movs	r3, #0
 800d402:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d404:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d406:	18fb      	adds	r3, r7, r3
 800d408:	9300      	str	r3, [sp, #0]
 800d40a:	3301      	adds	r3, #1
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	9307      	str	r3, [sp, #28]
 800d410:	bfb8      	it	lt
 800d412:	2301      	movlt	r3, #1
 800d414:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d418:	2100      	movs	r1, #0
 800d41a:	2204      	movs	r2, #4
 800d41c:	f102 0514 	add.w	r5, r2, #20
 800d420:	429d      	cmp	r5, r3
 800d422:	d91f      	bls.n	800d464 <_dtoa_r+0x2a4>
 800d424:	6041      	str	r1, [r0, #4]
 800d426:	4658      	mov	r0, fp
 800d428:	f000 fd8e 	bl	800df48 <_Balloc>
 800d42c:	4682      	mov	sl, r0
 800d42e:	2800      	cmp	r0, #0
 800d430:	d13c      	bne.n	800d4ac <_dtoa_r+0x2ec>
 800d432:	4b1b      	ldr	r3, [pc, #108]	@ (800d4a0 <_dtoa_r+0x2e0>)
 800d434:	4602      	mov	r2, r0
 800d436:	f240 11af 	movw	r1, #431	@ 0x1af
 800d43a:	e6d8      	b.n	800d1ee <_dtoa_r+0x2e>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e7e0      	b.n	800d402 <_dtoa_r+0x242>
 800d440:	2401      	movs	r4, #1
 800d442:	2300      	movs	r3, #0
 800d444:	9309      	str	r3, [sp, #36]	@ 0x24
 800d446:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d448:	f04f 33ff 	mov.w	r3, #4294967295
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	9307      	str	r3, [sp, #28]
 800d450:	2200      	movs	r2, #0
 800d452:	2312      	movs	r3, #18
 800d454:	e7d0      	b.n	800d3f8 <_dtoa_r+0x238>
 800d456:	2301      	movs	r3, #1
 800d458:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d45a:	e7f5      	b.n	800d448 <_dtoa_r+0x288>
 800d45c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	9307      	str	r3, [sp, #28]
 800d462:	e7d7      	b.n	800d414 <_dtoa_r+0x254>
 800d464:	3101      	adds	r1, #1
 800d466:	0052      	lsls	r2, r2, #1
 800d468:	e7d8      	b.n	800d41c <_dtoa_r+0x25c>
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	636f4361 	.word	0x636f4361
 800d474:	3fd287a7 	.word	0x3fd287a7
 800d478:	8b60c8b3 	.word	0x8b60c8b3
 800d47c:	3fc68a28 	.word	0x3fc68a28
 800d480:	509f79fb 	.word	0x509f79fb
 800d484:	3fd34413 	.word	0x3fd34413
 800d488:	0800f251 	.word	0x0800f251
 800d48c:	0800f268 	.word	0x0800f268
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	0800f221 	.word	0x0800f221
 800d498:	3ff80000 	.word	0x3ff80000
 800d49c:	0800f360 	.word	0x0800f360
 800d4a0:	0800f2c0 	.word	0x0800f2c0
 800d4a4:	0800f24d 	.word	0x0800f24d
 800d4a8:	0800f220 	.word	0x0800f220
 800d4ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4b0:	6018      	str	r0, [r3, #0]
 800d4b2:	9b07      	ldr	r3, [sp, #28]
 800d4b4:	2b0e      	cmp	r3, #14
 800d4b6:	f200 80a4 	bhi.w	800d602 <_dtoa_r+0x442>
 800d4ba:	2c00      	cmp	r4, #0
 800d4bc:	f000 80a1 	beq.w	800d602 <_dtoa_r+0x442>
 800d4c0:	2f00      	cmp	r7, #0
 800d4c2:	dd33      	ble.n	800d52c <_dtoa_r+0x36c>
 800d4c4:	4bad      	ldr	r3, [pc, #692]	@ (800d77c <_dtoa_r+0x5bc>)
 800d4c6:	f007 020f 	and.w	r2, r7, #15
 800d4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ce:	ed93 7b00 	vldr	d7, [r3]
 800d4d2:	05f8      	lsls	r0, r7, #23
 800d4d4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d4d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d4dc:	d516      	bpl.n	800d50c <_dtoa_r+0x34c>
 800d4de:	4ba8      	ldr	r3, [pc, #672]	@ (800d780 <_dtoa_r+0x5c0>)
 800d4e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4e8:	f7f3 f9b8 	bl	800085c <__aeabi_ddiv>
 800d4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4f0:	f004 040f 	and.w	r4, r4, #15
 800d4f4:	2603      	movs	r6, #3
 800d4f6:	4da2      	ldr	r5, [pc, #648]	@ (800d780 <_dtoa_r+0x5c0>)
 800d4f8:	b954      	cbnz	r4, 800d510 <_dtoa_r+0x350>
 800d4fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d502:	f7f3 f9ab 	bl	800085c <__aeabi_ddiv>
 800d506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d50a:	e028      	b.n	800d55e <_dtoa_r+0x39e>
 800d50c:	2602      	movs	r6, #2
 800d50e:	e7f2      	b.n	800d4f6 <_dtoa_r+0x336>
 800d510:	07e1      	lsls	r1, r4, #31
 800d512:	d508      	bpl.n	800d526 <_dtoa_r+0x366>
 800d514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d518:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d51c:	f7f3 f874 	bl	8000608 <__aeabi_dmul>
 800d520:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d524:	3601      	adds	r6, #1
 800d526:	1064      	asrs	r4, r4, #1
 800d528:	3508      	adds	r5, #8
 800d52a:	e7e5      	b.n	800d4f8 <_dtoa_r+0x338>
 800d52c:	f000 80d2 	beq.w	800d6d4 <_dtoa_r+0x514>
 800d530:	427c      	negs	r4, r7
 800d532:	4b92      	ldr	r3, [pc, #584]	@ (800d77c <_dtoa_r+0x5bc>)
 800d534:	4d92      	ldr	r5, [pc, #584]	@ (800d780 <_dtoa_r+0x5c0>)
 800d536:	f004 020f 	and.w	r2, r4, #15
 800d53a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d54e:	1124      	asrs	r4, r4, #4
 800d550:	2300      	movs	r3, #0
 800d552:	2602      	movs	r6, #2
 800d554:	2c00      	cmp	r4, #0
 800d556:	f040 80b2 	bne.w	800d6be <_dtoa_r+0x4fe>
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1d3      	bne.n	800d506 <_dtoa_r+0x346>
 800d55e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d560:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 80b7 	beq.w	800d6d8 <_dtoa_r+0x518>
 800d56a:	4b86      	ldr	r3, [pc, #536]	@ (800d784 <_dtoa_r+0x5c4>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	4620      	mov	r0, r4
 800d570:	4629      	mov	r1, r5
 800d572:	f7f3 fabb 	bl	8000aec <__aeabi_dcmplt>
 800d576:	2800      	cmp	r0, #0
 800d578:	f000 80ae 	beq.w	800d6d8 <_dtoa_r+0x518>
 800d57c:	9b07      	ldr	r3, [sp, #28]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 80aa 	beq.w	800d6d8 <_dtoa_r+0x518>
 800d584:	9b00      	ldr	r3, [sp, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	dd37      	ble.n	800d5fa <_dtoa_r+0x43a>
 800d58a:	1e7b      	subs	r3, r7, #1
 800d58c:	9304      	str	r3, [sp, #16]
 800d58e:	4620      	mov	r0, r4
 800d590:	4b7d      	ldr	r3, [pc, #500]	@ (800d788 <_dtoa_r+0x5c8>)
 800d592:	2200      	movs	r2, #0
 800d594:	4629      	mov	r1, r5
 800d596:	f7f3 f837 	bl	8000608 <__aeabi_dmul>
 800d59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d59e:	9c00      	ldr	r4, [sp, #0]
 800d5a0:	3601      	adds	r6, #1
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7f2 ffc6 	bl	8000534 <__aeabi_i2d>
 800d5a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d5ac:	f7f3 f82c 	bl	8000608 <__aeabi_dmul>
 800d5b0:	4b76      	ldr	r3, [pc, #472]	@ (800d78c <_dtoa_r+0x5cc>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f7f2 fe72 	bl	800029c <__adddf3>
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d5be:	2c00      	cmp	r4, #0
 800d5c0:	f040 808d 	bne.w	800d6de <_dtoa_r+0x51e>
 800d5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5c8:	4b71      	ldr	r3, [pc, #452]	@ (800d790 <_dtoa_r+0x5d0>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f7f2 fe64 	bl	8000298 <__aeabi_dsub>
 800d5d0:	4602      	mov	r2, r0
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4633      	mov	r3, r6
 800d5dc:	f7f3 faa4 	bl	8000b28 <__aeabi_dcmpgt>
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	f040 828b 	bne.w	800dafc <_dtoa_r+0x93c>
 800d5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5ea:	462a      	mov	r2, r5
 800d5ec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5f0:	f7f3 fa7c 	bl	8000aec <__aeabi_dcmplt>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	f040 8128 	bne.w	800d84a <_dtoa_r+0x68a>
 800d5fa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5fe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d602:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d604:	2b00      	cmp	r3, #0
 800d606:	f2c0 815a 	blt.w	800d8be <_dtoa_r+0x6fe>
 800d60a:	2f0e      	cmp	r7, #14
 800d60c:	f300 8157 	bgt.w	800d8be <_dtoa_r+0x6fe>
 800d610:	4b5a      	ldr	r3, [pc, #360]	@ (800d77c <_dtoa_r+0x5bc>)
 800d612:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d616:	ed93 7b00 	vldr	d7, [r3]
 800d61a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	ed8d 7b00 	vstr	d7, [sp]
 800d622:	da03      	bge.n	800d62c <_dtoa_r+0x46c>
 800d624:	9b07      	ldr	r3, [sp, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f340 8101 	ble.w	800d82e <_dtoa_r+0x66e>
 800d62c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d630:	4656      	mov	r6, sl
 800d632:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d636:	4620      	mov	r0, r4
 800d638:	4629      	mov	r1, r5
 800d63a:	f7f3 f90f 	bl	800085c <__aeabi_ddiv>
 800d63e:	f7f3 fa93 	bl	8000b68 <__aeabi_d2iz>
 800d642:	4680      	mov	r8, r0
 800d644:	f7f2 ff76 	bl	8000534 <__aeabi_i2d>
 800d648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d64c:	f7f2 ffdc 	bl	8000608 <__aeabi_dmul>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	4620      	mov	r0, r4
 800d656:	4629      	mov	r1, r5
 800d658:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d65c:	f7f2 fe1c 	bl	8000298 <__aeabi_dsub>
 800d660:	f806 4b01 	strb.w	r4, [r6], #1
 800d664:	9d07      	ldr	r5, [sp, #28]
 800d666:	eba6 040a 	sub.w	r4, r6, sl
 800d66a:	42a5      	cmp	r5, r4
 800d66c:	4602      	mov	r2, r0
 800d66e:	460b      	mov	r3, r1
 800d670:	f040 8117 	bne.w	800d8a2 <_dtoa_r+0x6e2>
 800d674:	f7f2 fe12 	bl	800029c <__adddf3>
 800d678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d67c:	4604      	mov	r4, r0
 800d67e:	460d      	mov	r5, r1
 800d680:	f7f3 fa52 	bl	8000b28 <__aeabi_dcmpgt>
 800d684:	2800      	cmp	r0, #0
 800d686:	f040 80f9 	bne.w	800d87c <_dtoa_r+0x6bc>
 800d68a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d68e:	4620      	mov	r0, r4
 800d690:	4629      	mov	r1, r5
 800d692:	f7f3 fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 800d696:	b118      	cbz	r0, 800d6a0 <_dtoa_r+0x4e0>
 800d698:	f018 0f01 	tst.w	r8, #1
 800d69c:	f040 80ee 	bne.w	800d87c <_dtoa_r+0x6bc>
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4658      	mov	r0, fp
 800d6a4:	f000 fc90 	bl	800dfc8 <_Bfree>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	7033      	strb	r3, [r6, #0]
 800d6ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d6ae:	3701      	adds	r7, #1
 800d6b0:	601f      	str	r7, [r3, #0]
 800d6b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 831d 	beq.w	800dcf4 <_dtoa_r+0xb34>
 800d6ba:	601e      	str	r6, [r3, #0]
 800d6bc:	e31a      	b.n	800dcf4 <_dtoa_r+0xb34>
 800d6be:	07e2      	lsls	r2, r4, #31
 800d6c0:	d505      	bpl.n	800d6ce <_dtoa_r+0x50e>
 800d6c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6c6:	f7f2 ff9f 	bl	8000608 <__aeabi_dmul>
 800d6ca:	3601      	adds	r6, #1
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	1064      	asrs	r4, r4, #1
 800d6d0:	3508      	adds	r5, #8
 800d6d2:	e73f      	b.n	800d554 <_dtoa_r+0x394>
 800d6d4:	2602      	movs	r6, #2
 800d6d6:	e742      	b.n	800d55e <_dtoa_r+0x39e>
 800d6d8:	9c07      	ldr	r4, [sp, #28]
 800d6da:	9704      	str	r7, [sp, #16]
 800d6dc:	e761      	b.n	800d5a2 <_dtoa_r+0x3e2>
 800d6de:	4b27      	ldr	r3, [pc, #156]	@ (800d77c <_dtoa_r+0x5bc>)
 800d6e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d6e6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d6ea:	4454      	add	r4, sl
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d053      	beq.n	800d798 <_dtoa_r+0x5d8>
 800d6f0:	4928      	ldr	r1, [pc, #160]	@ (800d794 <_dtoa_r+0x5d4>)
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	f7f3 f8b2 	bl	800085c <__aeabi_ddiv>
 800d6f8:	4633      	mov	r3, r6
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	f7f2 fdcc 	bl	8000298 <__aeabi_dsub>
 800d700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d704:	4656      	mov	r6, sl
 800d706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d70a:	f7f3 fa2d 	bl	8000b68 <__aeabi_d2iz>
 800d70e:	4605      	mov	r5, r0
 800d710:	f7f2 ff10 	bl	8000534 <__aeabi_i2d>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71c:	f7f2 fdbc 	bl	8000298 <__aeabi_dsub>
 800d720:	3530      	adds	r5, #48	@ 0x30
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d72a:	f806 5b01 	strb.w	r5, [r6], #1
 800d72e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d732:	f7f3 f9db 	bl	8000aec <__aeabi_dcmplt>
 800d736:	2800      	cmp	r0, #0
 800d738:	d171      	bne.n	800d81e <_dtoa_r+0x65e>
 800d73a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d73e:	4911      	ldr	r1, [pc, #68]	@ (800d784 <_dtoa_r+0x5c4>)
 800d740:	2000      	movs	r0, #0
 800d742:	f7f2 fda9 	bl	8000298 <__aeabi_dsub>
 800d746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d74a:	f7f3 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800d74e:	2800      	cmp	r0, #0
 800d750:	f040 8095 	bne.w	800d87e <_dtoa_r+0x6be>
 800d754:	42a6      	cmp	r6, r4
 800d756:	f43f af50 	beq.w	800d5fa <_dtoa_r+0x43a>
 800d75a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d75e:	4b0a      	ldr	r3, [pc, #40]	@ (800d788 <_dtoa_r+0x5c8>)
 800d760:	2200      	movs	r2, #0
 800d762:	f7f2 ff51 	bl	8000608 <__aeabi_dmul>
 800d766:	4b08      	ldr	r3, [pc, #32]	@ (800d788 <_dtoa_r+0x5c8>)
 800d768:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d76c:	2200      	movs	r2, #0
 800d76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d772:	f7f2 ff49 	bl	8000608 <__aeabi_dmul>
 800d776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d77a:	e7c4      	b.n	800d706 <_dtoa_r+0x546>
 800d77c:	0800f360 	.word	0x0800f360
 800d780:	0800f338 	.word	0x0800f338
 800d784:	3ff00000 	.word	0x3ff00000
 800d788:	40240000 	.word	0x40240000
 800d78c:	401c0000 	.word	0x401c0000
 800d790:	40140000 	.word	0x40140000
 800d794:	3fe00000 	.word	0x3fe00000
 800d798:	4631      	mov	r1, r6
 800d79a:	4628      	mov	r0, r5
 800d79c:	f7f2 ff34 	bl	8000608 <__aeabi_dmul>
 800d7a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d7a4:	9415      	str	r4, [sp, #84]	@ 0x54
 800d7a6:	4656      	mov	r6, sl
 800d7a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ac:	f7f3 f9dc 	bl	8000b68 <__aeabi_d2iz>
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	f7f2 febf 	bl	8000534 <__aeabi_i2d>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7be:	f7f2 fd6b 	bl	8000298 <__aeabi_dsub>
 800d7c2:	3530      	adds	r5, #48	@ 0x30
 800d7c4:	f806 5b01 	strb.w	r5, [r6], #1
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	42a6      	cmp	r6, r4
 800d7ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7d2:	f04f 0200 	mov.w	r2, #0
 800d7d6:	d124      	bne.n	800d822 <_dtoa_r+0x662>
 800d7d8:	4bac      	ldr	r3, [pc, #688]	@ (800da8c <_dtoa_r+0x8cc>)
 800d7da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d7de:	f7f2 fd5d 	bl	800029c <__adddf3>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ea:	f7f3 f99d 	bl	8000b28 <__aeabi_dcmpgt>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	d145      	bne.n	800d87e <_dtoa_r+0x6be>
 800d7f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7f6:	49a5      	ldr	r1, [pc, #660]	@ (800da8c <_dtoa_r+0x8cc>)
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	f7f2 fd4d 	bl	8000298 <__aeabi_dsub>
 800d7fe:	4602      	mov	r2, r0
 800d800:	460b      	mov	r3, r1
 800d802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d806:	f7f3 f971 	bl	8000aec <__aeabi_dcmplt>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	f43f aef5 	beq.w	800d5fa <_dtoa_r+0x43a>
 800d810:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d812:	1e73      	subs	r3, r6, #1
 800d814:	9315      	str	r3, [sp, #84]	@ 0x54
 800d816:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d81a:	2b30      	cmp	r3, #48	@ 0x30
 800d81c:	d0f8      	beq.n	800d810 <_dtoa_r+0x650>
 800d81e:	9f04      	ldr	r7, [sp, #16]
 800d820:	e73e      	b.n	800d6a0 <_dtoa_r+0x4e0>
 800d822:	4b9b      	ldr	r3, [pc, #620]	@ (800da90 <_dtoa_r+0x8d0>)
 800d824:	f7f2 fef0 	bl	8000608 <__aeabi_dmul>
 800d828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d82c:	e7bc      	b.n	800d7a8 <_dtoa_r+0x5e8>
 800d82e:	d10c      	bne.n	800d84a <_dtoa_r+0x68a>
 800d830:	4b98      	ldr	r3, [pc, #608]	@ (800da94 <_dtoa_r+0x8d4>)
 800d832:	2200      	movs	r2, #0
 800d834:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d838:	f7f2 fee6 	bl	8000608 <__aeabi_dmul>
 800d83c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d840:	f7f3 f968 	bl	8000b14 <__aeabi_dcmpge>
 800d844:	2800      	cmp	r0, #0
 800d846:	f000 8157 	beq.w	800daf8 <_dtoa_r+0x938>
 800d84a:	2400      	movs	r4, #0
 800d84c:	4625      	mov	r5, r4
 800d84e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d850:	43db      	mvns	r3, r3
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	4656      	mov	r6, sl
 800d856:	2700      	movs	r7, #0
 800d858:	4621      	mov	r1, r4
 800d85a:	4658      	mov	r0, fp
 800d85c:	f000 fbb4 	bl	800dfc8 <_Bfree>
 800d860:	2d00      	cmp	r5, #0
 800d862:	d0dc      	beq.n	800d81e <_dtoa_r+0x65e>
 800d864:	b12f      	cbz	r7, 800d872 <_dtoa_r+0x6b2>
 800d866:	42af      	cmp	r7, r5
 800d868:	d003      	beq.n	800d872 <_dtoa_r+0x6b2>
 800d86a:	4639      	mov	r1, r7
 800d86c:	4658      	mov	r0, fp
 800d86e:	f000 fbab 	bl	800dfc8 <_Bfree>
 800d872:	4629      	mov	r1, r5
 800d874:	4658      	mov	r0, fp
 800d876:	f000 fba7 	bl	800dfc8 <_Bfree>
 800d87a:	e7d0      	b.n	800d81e <_dtoa_r+0x65e>
 800d87c:	9704      	str	r7, [sp, #16]
 800d87e:	4633      	mov	r3, r6
 800d880:	461e      	mov	r6, r3
 800d882:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d886:	2a39      	cmp	r2, #57	@ 0x39
 800d888:	d107      	bne.n	800d89a <_dtoa_r+0x6da>
 800d88a:	459a      	cmp	sl, r3
 800d88c:	d1f8      	bne.n	800d880 <_dtoa_r+0x6c0>
 800d88e:	9a04      	ldr	r2, [sp, #16]
 800d890:	3201      	adds	r2, #1
 800d892:	9204      	str	r2, [sp, #16]
 800d894:	2230      	movs	r2, #48	@ 0x30
 800d896:	f88a 2000 	strb.w	r2, [sl]
 800d89a:	781a      	ldrb	r2, [r3, #0]
 800d89c:	3201      	adds	r2, #1
 800d89e:	701a      	strb	r2, [r3, #0]
 800d8a0:	e7bd      	b.n	800d81e <_dtoa_r+0x65e>
 800d8a2:	4b7b      	ldr	r3, [pc, #492]	@ (800da90 <_dtoa_r+0x8d0>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f7f2 feaf 	bl	8000608 <__aeabi_dmul>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	460d      	mov	r5, r1
 800d8b2:	f7f3 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	f43f aebb 	beq.w	800d632 <_dtoa_r+0x472>
 800d8bc:	e6f0      	b.n	800d6a0 <_dtoa_r+0x4e0>
 800d8be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8c0:	2a00      	cmp	r2, #0
 800d8c2:	f000 80db 	beq.w	800da7c <_dtoa_r+0x8bc>
 800d8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8c8:	2a01      	cmp	r2, #1
 800d8ca:	f300 80bf 	bgt.w	800da4c <_dtoa_r+0x88c>
 800d8ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	f000 80b7 	beq.w	800da44 <_dtoa_r+0x884>
 800d8d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d8da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d8dc:	4646      	mov	r6, r8
 800d8de:	9a08      	ldr	r2, [sp, #32]
 800d8e0:	2101      	movs	r1, #1
 800d8e2:	441a      	add	r2, r3
 800d8e4:	4658      	mov	r0, fp
 800d8e6:	4498      	add	r8, r3
 800d8e8:	9208      	str	r2, [sp, #32]
 800d8ea:	f000 fc21 	bl	800e130 <__i2b>
 800d8ee:	4605      	mov	r5, r0
 800d8f0:	b15e      	cbz	r6, 800d90a <_dtoa_r+0x74a>
 800d8f2:	9b08      	ldr	r3, [sp, #32]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	dd08      	ble.n	800d90a <_dtoa_r+0x74a>
 800d8f8:	42b3      	cmp	r3, r6
 800d8fa:	9a08      	ldr	r2, [sp, #32]
 800d8fc:	bfa8      	it	ge
 800d8fe:	4633      	movge	r3, r6
 800d900:	eba8 0803 	sub.w	r8, r8, r3
 800d904:	1af6      	subs	r6, r6, r3
 800d906:	1ad3      	subs	r3, r2, r3
 800d908:	9308      	str	r3, [sp, #32]
 800d90a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d90c:	b1f3      	cbz	r3, 800d94c <_dtoa_r+0x78c>
 800d90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 80b7 	beq.w	800da84 <_dtoa_r+0x8c4>
 800d916:	b18c      	cbz	r4, 800d93c <_dtoa_r+0x77c>
 800d918:	4629      	mov	r1, r5
 800d91a:	4622      	mov	r2, r4
 800d91c:	4658      	mov	r0, fp
 800d91e:	f000 fcc7 	bl	800e2b0 <__pow5mult>
 800d922:	464a      	mov	r2, r9
 800d924:	4601      	mov	r1, r0
 800d926:	4605      	mov	r5, r0
 800d928:	4658      	mov	r0, fp
 800d92a:	f000 fc17 	bl	800e15c <__multiply>
 800d92e:	4649      	mov	r1, r9
 800d930:	9004      	str	r0, [sp, #16]
 800d932:	4658      	mov	r0, fp
 800d934:	f000 fb48 	bl	800dfc8 <_Bfree>
 800d938:	9b04      	ldr	r3, [sp, #16]
 800d93a:	4699      	mov	r9, r3
 800d93c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d93e:	1b1a      	subs	r2, r3, r4
 800d940:	d004      	beq.n	800d94c <_dtoa_r+0x78c>
 800d942:	4649      	mov	r1, r9
 800d944:	4658      	mov	r0, fp
 800d946:	f000 fcb3 	bl	800e2b0 <__pow5mult>
 800d94a:	4681      	mov	r9, r0
 800d94c:	2101      	movs	r1, #1
 800d94e:	4658      	mov	r0, fp
 800d950:	f000 fbee 	bl	800e130 <__i2b>
 800d954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d956:	4604      	mov	r4, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f000 81cf 	beq.w	800dcfc <_dtoa_r+0xb3c>
 800d95e:	461a      	mov	r2, r3
 800d960:	4601      	mov	r1, r0
 800d962:	4658      	mov	r0, fp
 800d964:	f000 fca4 	bl	800e2b0 <__pow5mult>
 800d968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	4604      	mov	r4, r0
 800d96e:	f300 8095 	bgt.w	800da9c <_dtoa_r+0x8dc>
 800d972:	9b02      	ldr	r3, [sp, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 8087 	bne.w	800da88 <_dtoa_r+0x8c8>
 800d97a:	9b03      	ldr	r3, [sp, #12]
 800d97c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 8089 	bne.w	800da98 <_dtoa_r+0x8d8>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d98c:	0d1b      	lsrs	r3, r3, #20
 800d98e:	051b      	lsls	r3, r3, #20
 800d990:	b12b      	cbz	r3, 800d99e <_dtoa_r+0x7de>
 800d992:	9b08      	ldr	r3, [sp, #32]
 800d994:	3301      	adds	r3, #1
 800d996:	9308      	str	r3, [sp, #32]
 800d998:	f108 0801 	add.w	r8, r8, #1
 800d99c:	2301      	movs	r3, #1
 800d99e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d9a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 81b0 	beq.w	800dd08 <_dtoa_r+0xb48>
 800d9a8:	6923      	ldr	r3, [r4, #16]
 800d9aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d9ae:	6918      	ldr	r0, [r3, #16]
 800d9b0:	f000 fb72 	bl	800e098 <__hi0bits>
 800d9b4:	f1c0 0020 	rsb	r0, r0, #32
 800d9b8:	9b08      	ldr	r3, [sp, #32]
 800d9ba:	4418      	add	r0, r3
 800d9bc:	f010 001f 	ands.w	r0, r0, #31
 800d9c0:	d077      	beq.n	800dab2 <_dtoa_r+0x8f2>
 800d9c2:	f1c0 0320 	rsb	r3, r0, #32
 800d9c6:	2b04      	cmp	r3, #4
 800d9c8:	dd6b      	ble.n	800daa2 <_dtoa_r+0x8e2>
 800d9ca:	9b08      	ldr	r3, [sp, #32]
 800d9cc:	f1c0 001c 	rsb	r0, r0, #28
 800d9d0:	4403      	add	r3, r0
 800d9d2:	4480      	add	r8, r0
 800d9d4:	4406      	add	r6, r0
 800d9d6:	9308      	str	r3, [sp, #32]
 800d9d8:	f1b8 0f00 	cmp.w	r8, #0
 800d9dc:	dd05      	ble.n	800d9ea <_dtoa_r+0x82a>
 800d9de:	4649      	mov	r1, r9
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	4658      	mov	r0, fp
 800d9e4:	f000 fcbe 	bl	800e364 <__lshift>
 800d9e8:	4681      	mov	r9, r0
 800d9ea:	9b08      	ldr	r3, [sp, #32]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	dd05      	ble.n	800d9fc <_dtoa_r+0x83c>
 800d9f0:	4621      	mov	r1, r4
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	4658      	mov	r0, fp
 800d9f6:	f000 fcb5 	bl	800e364 <__lshift>
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d059      	beq.n	800dab6 <_dtoa_r+0x8f6>
 800da02:	4621      	mov	r1, r4
 800da04:	4648      	mov	r0, r9
 800da06:	f000 fd19 	bl	800e43c <__mcmp>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	da53      	bge.n	800dab6 <_dtoa_r+0x8f6>
 800da0e:	1e7b      	subs	r3, r7, #1
 800da10:	9304      	str	r3, [sp, #16]
 800da12:	4649      	mov	r1, r9
 800da14:	2300      	movs	r3, #0
 800da16:	220a      	movs	r2, #10
 800da18:	4658      	mov	r0, fp
 800da1a:	f000 faf7 	bl	800e00c <__multadd>
 800da1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800da20:	4681      	mov	r9, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 8172 	beq.w	800dd0c <_dtoa_r+0xb4c>
 800da28:	2300      	movs	r3, #0
 800da2a:	4629      	mov	r1, r5
 800da2c:	220a      	movs	r2, #10
 800da2e:	4658      	mov	r0, fp
 800da30:	f000 faec 	bl	800e00c <__multadd>
 800da34:	9b00      	ldr	r3, [sp, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	4605      	mov	r5, r0
 800da3a:	dc67      	bgt.n	800db0c <_dtoa_r+0x94c>
 800da3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da3e:	2b02      	cmp	r3, #2
 800da40:	dc41      	bgt.n	800dac6 <_dtoa_r+0x906>
 800da42:	e063      	b.n	800db0c <_dtoa_r+0x94c>
 800da44:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800da46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800da4a:	e746      	b.n	800d8da <_dtoa_r+0x71a>
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	1e5c      	subs	r4, r3, #1
 800da50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da52:	42a3      	cmp	r3, r4
 800da54:	bfbf      	itttt	lt
 800da56:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da58:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da5a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da5c:	1ae3      	sublt	r3, r4, r3
 800da5e:	bfb4      	ite	lt
 800da60:	18d2      	addlt	r2, r2, r3
 800da62:	1b1c      	subge	r4, r3, r4
 800da64:	9b07      	ldr	r3, [sp, #28]
 800da66:	bfbc      	itt	lt
 800da68:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da6a:	2400      	movlt	r4, #0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	bfb5      	itete	lt
 800da70:	eba8 0603 	sublt.w	r6, r8, r3
 800da74:	9b07      	ldrge	r3, [sp, #28]
 800da76:	2300      	movlt	r3, #0
 800da78:	4646      	movge	r6, r8
 800da7a:	e730      	b.n	800d8de <_dtoa_r+0x71e>
 800da7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da7e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da80:	4646      	mov	r6, r8
 800da82:	e735      	b.n	800d8f0 <_dtoa_r+0x730>
 800da84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da86:	e75c      	b.n	800d942 <_dtoa_r+0x782>
 800da88:	2300      	movs	r3, #0
 800da8a:	e788      	b.n	800d99e <_dtoa_r+0x7de>
 800da8c:	3fe00000 	.word	0x3fe00000
 800da90:	40240000 	.word	0x40240000
 800da94:	40140000 	.word	0x40140000
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	e780      	b.n	800d99e <_dtoa_r+0x7de>
 800da9c:	2300      	movs	r3, #0
 800da9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800daa0:	e782      	b.n	800d9a8 <_dtoa_r+0x7e8>
 800daa2:	d099      	beq.n	800d9d8 <_dtoa_r+0x818>
 800daa4:	9a08      	ldr	r2, [sp, #32]
 800daa6:	331c      	adds	r3, #28
 800daa8:	441a      	add	r2, r3
 800daaa:	4498      	add	r8, r3
 800daac:	441e      	add	r6, r3
 800daae:	9208      	str	r2, [sp, #32]
 800dab0:	e792      	b.n	800d9d8 <_dtoa_r+0x818>
 800dab2:	4603      	mov	r3, r0
 800dab4:	e7f6      	b.n	800daa4 <_dtoa_r+0x8e4>
 800dab6:	9b07      	ldr	r3, [sp, #28]
 800dab8:	9704      	str	r7, [sp, #16]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	dc20      	bgt.n	800db00 <_dtoa_r+0x940>
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	dd1e      	ble.n	800db04 <_dtoa_r+0x944>
 800dac6:	9b00      	ldr	r3, [sp, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f47f aec0 	bne.w	800d84e <_dtoa_r+0x68e>
 800dace:	4621      	mov	r1, r4
 800dad0:	2205      	movs	r2, #5
 800dad2:	4658      	mov	r0, fp
 800dad4:	f000 fa9a 	bl	800e00c <__multadd>
 800dad8:	4601      	mov	r1, r0
 800dada:	4604      	mov	r4, r0
 800dadc:	4648      	mov	r0, r9
 800dade:	f000 fcad 	bl	800e43c <__mcmp>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	f77f aeb3 	ble.w	800d84e <_dtoa_r+0x68e>
 800dae8:	4656      	mov	r6, sl
 800daea:	2331      	movs	r3, #49	@ 0x31
 800daec:	f806 3b01 	strb.w	r3, [r6], #1
 800daf0:	9b04      	ldr	r3, [sp, #16]
 800daf2:	3301      	adds	r3, #1
 800daf4:	9304      	str	r3, [sp, #16]
 800daf6:	e6ae      	b.n	800d856 <_dtoa_r+0x696>
 800daf8:	9c07      	ldr	r4, [sp, #28]
 800dafa:	9704      	str	r7, [sp, #16]
 800dafc:	4625      	mov	r5, r4
 800dafe:	e7f3      	b.n	800dae8 <_dtoa_r+0x928>
 800db00:	9b07      	ldr	r3, [sp, #28]
 800db02:	9300      	str	r3, [sp, #0]
 800db04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db06:	2b00      	cmp	r3, #0
 800db08:	f000 8104 	beq.w	800dd14 <_dtoa_r+0xb54>
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	dd05      	ble.n	800db1c <_dtoa_r+0x95c>
 800db10:	4629      	mov	r1, r5
 800db12:	4632      	mov	r2, r6
 800db14:	4658      	mov	r0, fp
 800db16:	f000 fc25 	bl	800e364 <__lshift>
 800db1a:	4605      	mov	r5, r0
 800db1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d05a      	beq.n	800dbd8 <_dtoa_r+0xa18>
 800db22:	6869      	ldr	r1, [r5, #4]
 800db24:	4658      	mov	r0, fp
 800db26:	f000 fa0f 	bl	800df48 <_Balloc>
 800db2a:	4606      	mov	r6, r0
 800db2c:	b928      	cbnz	r0, 800db3a <_dtoa_r+0x97a>
 800db2e:	4b84      	ldr	r3, [pc, #528]	@ (800dd40 <_dtoa_r+0xb80>)
 800db30:	4602      	mov	r2, r0
 800db32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800db36:	f7ff bb5a 	b.w	800d1ee <_dtoa_r+0x2e>
 800db3a:	692a      	ldr	r2, [r5, #16]
 800db3c:	3202      	adds	r2, #2
 800db3e:	0092      	lsls	r2, r2, #2
 800db40:	f105 010c 	add.w	r1, r5, #12
 800db44:	300c      	adds	r0, #12
 800db46:	f7ff faa4 	bl	800d092 <memcpy>
 800db4a:	2201      	movs	r2, #1
 800db4c:	4631      	mov	r1, r6
 800db4e:	4658      	mov	r0, fp
 800db50:	f000 fc08 	bl	800e364 <__lshift>
 800db54:	f10a 0301 	add.w	r3, sl, #1
 800db58:	9307      	str	r3, [sp, #28]
 800db5a:	9b00      	ldr	r3, [sp, #0]
 800db5c:	4453      	add	r3, sl
 800db5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db60:	9b02      	ldr	r3, [sp, #8]
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	462f      	mov	r7, r5
 800db68:	930a      	str	r3, [sp, #40]	@ 0x28
 800db6a:	4605      	mov	r5, r0
 800db6c:	9b07      	ldr	r3, [sp, #28]
 800db6e:	4621      	mov	r1, r4
 800db70:	3b01      	subs	r3, #1
 800db72:	4648      	mov	r0, r9
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	f7ff fa9a 	bl	800d0ae <quorem>
 800db7a:	4639      	mov	r1, r7
 800db7c:	9002      	str	r0, [sp, #8]
 800db7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db82:	4648      	mov	r0, r9
 800db84:	f000 fc5a 	bl	800e43c <__mcmp>
 800db88:	462a      	mov	r2, r5
 800db8a:	9008      	str	r0, [sp, #32]
 800db8c:	4621      	mov	r1, r4
 800db8e:	4658      	mov	r0, fp
 800db90:	f000 fc70 	bl	800e474 <__mdiff>
 800db94:	68c2      	ldr	r2, [r0, #12]
 800db96:	4606      	mov	r6, r0
 800db98:	bb02      	cbnz	r2, 800dbdc <_dtoa_r+0xa1c>
 800db9a:	4601      	mov	r1, r0
 800db9c:	4648      	mov	r0, r9
 800db9e:	f000 fc4d 	bl	800e43c <__mcmp>
 800dba2:	4602      	mov	r2, r0
 800dba4:	4631      	mov	r1, r6
 800dba6:	4658      	mov	r0, fp
 800dba8:	920e      	str	r2, [sp, #56]	@ 0x38
 800dbaa:	f000 fa0d 	bl	800dfc8 <_Bfree>
 800dbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dbb2:	9e07      	ldr	r6, [sp, #28]
 800dbb4:	ea43 0102 	orr.w	r1, r3, r2
 800dbb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbba:	4319      	orrs	r1, r3
 800dbbc:	d110      	bne.n	800dbe0 <_dtoa_r+0xa20>
 800dbbe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbc2:	d029      	beq.n	800dc18 <_dtoa_r+0xa58>
 800dbc4:	9b08      	ldr	r3, [sp, #32]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	dd02      	ble.n	800dbd0 <_dtoa_r+0xa10>
 800dbca:	9b02      	ldr	r3, [sp, #8]
 800dbcc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dbd0:	9b00      	ldr	r3, [sp, #0]
 800dbd2:	f883 8000 	strb.w	r8, [r3]
 800dbd6:	e63f      	b.n	800d858 <_dtoa_r+0x698>
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e7bb      	b.n	800db54 <_dtoa_r+0x994>
 800dbdc:	2201      	movs	r2, #1
 800dbde:	e7e1      	b.n	800dba4 <_dtoa_r+0x9e4>
 800dbe0:	9b08      	ldr	r3, [sp, #32]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	db04      	blt.n	800dbf0 <_dtoa_r+0xa30>
 800dbe6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dbe8:	430b      	orrs	r3, r1
 800dbea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dbec:	430b      	orrs	r3, r1
 800dbee:	d120      	bne.n	800dc32 <_dtoa_r+0xa72>
 800dbf0:	2a00      	cmp	r2, #0
 800dbf2:	dded      	ble.n	800dbd0 <_dtoa_r+0xa10>
 800dbf4:	4649      	mov	r1, r9
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	4658      	mov	r0, fp
 800dbfa:	f000 fbb3 	bl	800e364 <__lshift>
 800dbfe:	4621      	mov	r1, r4
 800dc00:	4681      	mov	r9, r0
 800dc02:	f000 fc1b 	bl	800e43c <__mcmp>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	dc03      	bgt.n	800dc12 <_dtoa_r+0xa52>
 800dc0a:	d1e1      	bne.n	800dbd0 <_dtoa_r+0xa10>
 800dc0c:	f018 0f01 	tst.w	r8, #1
 800dc10:	d0de      	beq.n	800dbd0 <_dtoa_r+0xa10>
 800dc12:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc16:	d1d8      	bne.n	800dbca <_dtoa_r+0xa0a>
 800dc18:	9a00      	ldr	r2, [sp, #0]
 800dc1a:	2339      	movs	r3, #57	@ 0x39
 800dc1c:	7013      	strb	r3, [r2, #0]
 800dc1e:	4633      	mov	r3, r6
 800dc20:	461e      	mov	r6, r3
 800dc22:	3b01      	subs	r3, #1
 800dc24:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dc28:	2a39      	cmp	r2, #57	@ 0x39
 800dc2a:	d052      	beq.n	800dcd2 <_dtoa_r+0xb12>
 800dc2c:	3201      	adds	r2, #1
 800dc2e:	701a      	strb	r2, [r3, #0]
 800dc30:	e612      	b.n	800d858 <_dtoa_r+0x698>
 800dc32:	2a00      	cmp	r2, #0
 800dc34:	dd07      	ble.n	800dc46 <_dtoa_r+0xa86>
 800dc36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dc3a:	d0ed      	beq.n	800dc18 <_dtoa_r+0xa58>
 800dc3c:	9a00      	ldr	r2, [sp, #0]
 800dc3e:	f108 0301 	add.w	r3, r8, #1
 800dc42:	7013      	strb	r3, [r2, #0]
 800dc44:	e608      	b.n	800d858 <_dtoa_r+0x698>
 800dc46:	9b07      	ldr	r3, [sp, #28]
 800dc48:	9a07      	ldr	r2, [sp, #28]
 800dc4a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dc4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d028      	beq.n	800dca6 <_dtoa_r+0xae6>
 800dc54:	4649      	mov	r1, r9
 800dc56:	2300      	movs	r3, #0
 800dc58:	220a      	movs	r2, #10
 800dc5a:	4658      	mov	r0, fp
 800dc5c:	f000 f9d6 	bl	800e00c <__multadd>
 800dc60:	42af      	cmp	r7, r5
 800dc62:	4681      	mov	r9, r0
 800dc64:	f04f 0300 	mov.w	r3, #0
 800dc68:	f04f 020a 	mov.w	r2, #10
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	4658      	mov	r0, fp
 800dc70:	d107      	bne.n	800dc82 <_dtoa_r+0xac2>
 800dc72:	f000 f9cb 	bl	800e00c <__multadd>
 800dc76:	4607      	mov	r7, r0
 800dc78:	4605      	mov	r5, r0
 800dc7a:	9b07      	ldr	r3, [sp, #28]
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	9307      	str	r3, [sp, #28]
 800dc80:	e774      	b.n	800db6c <_dtoa_r+0x9ac>
 800dc82:	f000 f9c3 	bl	800e00c <__multadd>
 800dc86:	4629      	mov	r1, r5
 800dc88:	4607      	mov	r7, r0
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	220a      	movs	r2, #10
 800dc8e:	4658      	mov	r0, fp
 800dc90:	f000 f9bc 	bl	800e00c <__multadd>
 800dc94:	4605      	mov	r5, r0
 800dc96:	e7f0      	b.n	800dc7a <_dtoa_r+0xaba>
 800dc98:	9b00      	ldr	r3, [sp, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	bfcc      	ite	gt
 800dc9e:	461e      	movgt	r6, r3
 800dca0:	2601      	movle	r6, #1
 800dca2:	4456      	add	r6, sl
 800dca4:	2700      	movs	r7, #0
 800dca6:	4649      	mov	r1, r9
 800dca8:	2201      	movs	r2, #1
 800dcaa:	4658      	mov	r0, fp
 800dcac:	f000 fb5a 	bl	800e364 <__lshift>
 800dcb0:	4621      	mov	r1, r4
 800dcb2:	4681      	mov	r9, r0
 800dcb4:	f000 fbc2 	bl	800e43c <__mcmp>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	dcb0      	bgt.n	800dc1e <_dtoa_r+0xa5e>
 800dcbc:	d102      	bne.n	800dcc4 <_dtoa_r+0xb04>
 800dcbe:	f018 0f01 	tst.w	r8, #1
 800dcc2:	d1ac      	bne.n	800dc1e <_dtoa_r+0xa5e>
 800dcc4:	4633      	mov	r3, r6
 800dcc6:	461e      	mov	r6, r3
 800dcc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dccc:	2a30      	cmp	r2, #48	@ 0x30
 800dcce:	d0fa      	beq.n	800dcc6 <_dtoa_r+0xb06>
 800dcd0:	e5c2      	b.n	800d858 <_dtoa_r+0x698>
 800dcd2:	459a      	cmp	sl, r3
 800dcd4:	d1a4      	bne.n	800dc20 <_dtoa_r+0xa60>
 800dcd6:	9b04      	ldr	r3, [sp, #16]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	2331      	movs	r3, #49	@ 0x31
 800dcde:	f88a 3000 	strb.w	r3, [sl]
 800dce2:	e5b9      	b.n	800d858 <_dtoa_r+0x698>
 800dce4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dce6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dd44 <_dtoa_r+0xb84>
 800dcea:	b11b      	cbz	r3, 800dcf4 <_dtoa_r+0xb34>
 800dcec:	f10a 0308 	add.w	r3, sl, #8
 800dcf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	4650      	mov	r0, sl
 800dcf6:	b019      	add	sp, #100	@ 0x64
 800dcf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcfe:	2b01      	cmp	r3, #1
 800dd00:	f77f ae37 	ble.w	800d972 <_dtoa_r+0x7b2>
 800dd04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd06:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd08:	2001      	movs	r0, #1
 800dd0a:	e655      	b.n	800d9b8 <_dtoa_r+0x7f8>
 800dd0c:	9b00      	ldr	r3, [sp, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f77f aed6 	ble.w	800dac0 <_dtoa_r+0x900>
 800dd14:	4656      	mov	r6, sl
 800dd16:	4621      	mov	r1, r4
 800dd18:	4648      	mov	r0, r9
 800dd1a:	f7ff f9c8 	bl	800d0ae <quorem>
 800dd1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd22:	f806 8b01 	strb.w	r8, [r6], #1
 800dd26:	9b00      	ldr	r3, [sp, #0]
 800dd28:	eba6 020a 	sub.w	r2, r6, sl
 800dd2c:	4293      	cmp	r3, r2
 800dd2e:	ddb3      	ble.n	800dc98 <_dtoa_r+0xad8>
 800dd30:	4649      	mov	r1, r9
 800dd32:	2300      	movs	r3, #0
 800dd34:	220a      	movs	r2, #10
 800dd36:	4658      	mov	r0, fp
 800dd38:	f000 f968 	bl	800e00c <__multadd>
 800dd3c:	4681      	mov	r9, r0
 800dd3e:	e7ea      	b.n	800dd16 <_dtoa_r+0xb56>
 800dd40:	0800f2c0 	.word	0x0800f2c0
 800dd44:	0800f244 	.word	0x0800f244

0800dd48 <_free_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4605      	mov	r5, r0
 800dd4c:	2900      	cmp	r1, #0
 800dd4e:	d041      	beq.n	800ddd4 <_free_r+0x8c>
 800dd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd54:	1f0c      	subs	r4, r1, #4
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	bfb8      	it	lt
 800dd5a:	18e4      	addlt	r4, r4, r3
 800dd5c:	f000 f8e8 	bl	800df30 <__malloc_lock>
 800dd60:	4a1d      	ldr	r2, [pc, #116]	@ (800ddd8 <_free_r+0x90>)
 800dd62:	6813      	ldr	r3, [r2, #0]
 800dd64:	b933      	cbnz	r3, 800dd74 <_free_r+0x2c>
 800dd66:	6063      	str	r3, [r4, #4]
 800dd68:	6014      	str	r4, [r2, #0]
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd70:	f000 b8e4 	b.w	800df3c <__malloc_unlock>
 800dd74:	42a3      	cmp	r3, r4
 800dd76:	d908      	bls.n	800dd8a <_free_r+0x42>
 800dd78:	6820      	ldr	r0, [r4, #0]
 800dd7a:	1821      	adds	r1, r4, r0
 800dd7c:	428b      	cmp	r3, r1
 800dd7e:	bf01      	itttt	eq
 800dd80:	6819      	ldreq	r1, [r3, #0]
 800dd82:	685b      	ldreq	r3, [r3, #4]
 800dd84:	1809      	addeq	r1, r1, r0
 800dd86:	6021      	streq	r1, [r4, #0]
 800dd88:	e7ed      	b.n	800dd66 <_free_r+0x1e>
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	b10b      	cbz	r3, 800dd94 <_free_r+0x4c>
 800dd90:	42a3      	cmp	r3, r4
 800dd92:	d9fa      	bls.n	800dd8a <_free_r+0x42>
 800dd94:	6811      	ldr	r1, [r2, #0]
 800dd96:	1850      	adds	r0, r2, r1
 800dd98:	42a0      	cmp	r0, r4
 800dd9a:	d10b      	bne.n	800ddb4 <_free_r+0x6c>
 800dd9c:	6820      	ldr	r0, [r4, #0]
 800dd9e:	4401      	add	r1, r0
 800dda0:	1850      	adds	r0, r2, r1
 800dda2:	4283      	cmp	r3, r0
 800dda4:	6011      	str	r1, [r2, #0]
 800dda6:	d1e0      	bne.n	800dd6a <_free_r+0x22>
 800dda8:	6818      	ldr	r0, [r3, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	6053      	str	r3, [r2, #4]
 800ddae:	4408      	add	r0, r1
 800ddb0:	6010      	str	r0, [r2, #0]
 800ddb2:	e7da      	b.n	800dd6a <_free_r+0x22>
 800ddb4:	d902      	bls.n	800ddbc <_free_r+0x74>
 800ddb6:	230c      	movs	r3, #12
 800ddb8:	602b      	str	r3, [r5, #0]
 800ddba:	e7d6      	b.n	800dd6a <_free_r+0x22>
 800ddbc:	6820      	ldr	r0, [r4, #0]
 800ddbe:	1821      	adds	r1, r4, r0
 800ddc0:	428b      	cmp	r3, r1
 800ddc2:	bf04      	itt	eq
 800ddc4:	6819      	ldreq	r1, [r3, #0]
 800ddc6:	685b      	ldreq	r3, [r3, #4]
 800ddc8:	6063      	str	r3, [r4, #4]
 800ddca:	bf04      	itt	eq
 800ddcc:	1809      	addeq	r1, r1, r0
 800ddce:	6021      	streq	r1, [r4, #0]
 800ddd0:	6054      	str	r4, [r2, #4]
 800ddd2:	e7ca      	b.n	800dd6a <_free_r+0x22>
 800ddd4:	bd38      	pop	{r3, r4, r5, pc}
 800ddd6:	bf00      	nop
 800ddd8:	20002800 	.word	0x20002800

0800dddc <malloc>:
 800dddc:	4b02      	ldr	r3, [pc, #8]	@ (800dde8 <malloc+0xc>)
 800ddde:	4601      	mov	r1, r0
 800dde0:	6818      	ldr	r0, [r3, #0]
 800dde2:	f000 b825 	b.w	800de30 <_malloc_r>
 800dde6:	bf00      	nop
 800dde8:	20000330 	.word	0x20000330

0800ddec <sbrk_aligned>:
 800ddec:	b570      	push	{r4, r5, r6, lr}
 800ddee:	4e0f      	ldr	r6, [pc, #60]	@ (800de2c <sbrk_aligned+0x40>)
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	6831      	ldr	r1, [r6, #0]
 800ddf4:	4605      	mov	r5, r0
 800ddf6:	b911      	cbnz	r1, 800ddfe <sbrk_aligned+0x12>
 800ddf8:	f000 fe46 	bl	800ea88 <_sbrk_r>
 800ddfc:	6030      	str	r0, [r6, #0]
 800ddfe:	4621      	mov	r1, r4
 800de00:	4628      	mov	r0, r5
 800de02:	f000 fe41 	bl	800ea88 <_sbrk_r>
 800de06:	1c43      	adds	r3, r0, #1
 800de08:	d103      	bne.n	800de12 <sbrk_aligned+0x26>
 800de0a:	f04f 34ff 	mov.w	r4, #4294967295
 800de0e:	4620      	mov	r0, r4
 800de10:	bd70      	pop	{r4, r5, r6, pc}
 800de12:	1cc4      	adds	r4, r0, #3
 800de14:	f024 0403 	bic.w	r4, r4, #3
 800de18:	42a0      	cmp	r0, r4
 800de1a:	d0f8      	beq.n	800de0e <sbrk_aligned+0x22>
 800de1c:	1a21      	subs	r1, r4, r0
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 fe32 	bl	800ea88 <_sbrk_r>
 800de24:	3001      	adds	r0, #1
 800de26:	d1f2      	bne.n	800de0e <sbrk_aligned+0x22>
 800de28:	e7ef      	b.n	800de0a <sbrk_aligned+0x1e>
 800de2a:	bf00      	nop
 800de2c:	200027fc 	.word	0x200027fc

0800de30 <_malloc_r>:
 800de30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de34:	1ccd      	adds	r5, r1, #3
 800de36:	f025 0503 	bic.w	r5, r5, #3
 800de3a:	3508      	adds	r5, #8
 800de3c:	2d0c      	cmp	r5, #12
 800de3e:	bf38      	it	cc
 800de40:	250c      	movcc	r5, #12
 800de42:	2d00      	cmp	r5, #0
 800de44:	4606      	mov	r6, r0
 800de46:	db01      	blt.n	800de4c <_malloc_r+0x1c>
 800de48:	42a9      	cmp	r1, r5
 800de4a:	d904      	bls.n	800de56 <_malloc_r+0x26>
 800de4c:	230c      	movs	r3, #12
 800de4e:	6033      	str	r3, [r6, #0]
 800de50:	2000      	movs	r0, #0
 800de52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df2c <_malloc_r+0xfc>
 800de5a:	f000 f869 	bl	800df30 <__malloc_lock>
 800de5e:	f8d8 3000 	ldr.w	r3, [r8]
 800de62:	461c      	mov	r4, r3
 800de64:	bb44      	cbnz	r4, 800deb8 <_malloc_r+0x88>
 800de66:	4629      	mov	r1, r5
 800de68:	4630      	mov	r0, r6
 800de6a:	f7ff ffbf 	bl	800ddec <sbrk_aligned>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	4604      	mov	r4, r0
 800de72:	d158      	bne.n	800df26 <_malloc_r+0xf6>
 800de74:	f8d8 4000 	ldr.w	r4, [r8]
 800de78:	4627      	mov	r7, r4
 800de7a:	2f00      	cmp	r7, #0
 800de7c:	d143      	bne.n	800df06 <_malloc_r+0xd6>
 800de7e:	2c00      	cmp	r4, #0
 800de80:	d04b      	beq.n	800df1a <_malloc_r+0xea>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	4639      	mov	r1, r7
 800de86:	4630      	mov	r0, r6
 800de88:	eb04 0903 	add.w	r9, r4, r3
 800de8c:	f000 fdfc 	bl	800ea88 <_sbrk_r>
 800de90:	4581      	cmp	r9, r0
 800de92:	d142      	bne.n	800df1a <_malloc_r+0xea>
 800de94:	6821      	ldr	r1, [r4, #0]
 800de96:	1a6d      	subs	r5, r5, r1
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff ffa6 	bl	800ddec <sbrk_aligned>
 800dea0:	3001      	adds	r0, #1
 800dea2:	d03a      	beq.n	800df1a <_malloc_r+0xea>
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	442b      	add	r3, r5
 800dea8:	6023      	str	r3, [r4, #0]
 800deaa:	f8d8 3000 	ldr.w	r3, [r8]
 800deae:	685a      	ldr	r2, [r3, #4]
 800deb0:	bb62      	cbnz	r2, 800df0c <_malloc_r+0xdc>
 800deb2:	f8c8 7000 	str.w	r7, [r8]
 800deb6:	e00f      	b.n	800ded8 <_malloc_r+0xa8>
 800deb8:	6822      	ldr	r2, [r4, #0]
 800deba:	1b52      	subs	r2, r2, r5
 800debc:	d420      	bmi.n	800df00 <_malloc_r+0xd0>
 800debe:	2a0b      	cmp	r2, #11
 800dec0:	d917      	bls.n	800def2 <_malloc_r+0xc2>
 800dec2:	1961      	adds	r1, r4, r5
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	6025      	str	r5, [r4, #0]
 800dec8:	bf18      	it	ne
 800deca:	6059      	strne	r1, [r3, #4]
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	bf08      	it	eq
 800ded0:	f8c8 1000 	streq.w	r1, [r8]
 800ded4:	5162      	str	r2, [r4, r5]
 800ded6:	604b      	str	r3, [r1, #4]
 800ded8:	4630      	mov	r0, r6
 800deda:	f000 f82f 	bl	800df3c <__malloc_unlock>
 800dede:	f104 000b 	add.w	r0, r4, #11
 800dee2:	1d23      	adds	r3, r4, #4
 800dee4:	f020 0007 	bic.w	r0, r0, #7
 800dee8:	1ac2      	subs	r2, r0, r3
 800deea:	bf1c      	itt	ne
 800deec:	1a1b      	subne	r3, r3, r0
 800deee:	50a3      	strne	r3, [r4, r2]
 800def0:	e7af      	b.n	800de52 <_malloc_r+0x22>
 800def2:	6862      	ldr	r2, [r4, #4]
 800def4:	42a3      	cmp	r3, r4
 800def6:	bf0c      	ite	eq
 800def8:	f8c8 2000 	streq.w	r2, [r8]
 800defc:	605a      	strne	r2, [r3, #4]
 800defe:	e7eb      	b.n	800ded8 <_malloc_r+0xa8>
 800df00:	4623      	mov	r3, r4
 800df02:	6864      	ldr	r4, [r4, #4]
 800df04:	e7ae      	b.n	800de64 <_malloc_r+0x34>
 800df06:	463c      	mov	r4, r7
 800df08:	687f      	ldr	r7, [r7, #4]
 800df0a:	e7b6      	b.n	800de7a <_malloc_r+0x4a>
 800df0c:	461a      	mov	r2, r3
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	42a3      	cmp	r3, r4
 800df12:	d1fb      	bne.n	800df0c <_malloc_r+0xdc>
 800df14:	2300      	movs	r3, #0
 800df16:	6053      	str	r3, [r2, #4]
 800df18:	e7de      	b.n	800ded8 <_malloc_r+0xa8>
 800df1a:	230c      	movs	r3, #12
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	4630      	mov	r0, r6
 800df20:	f000 f80c 	bl	800df3c <__malloc_unlock>
 800df24:	e794      	b.n	800de50 <_malloc_r+0x20>
 800df26:	6005      	str	r5, [r0, #0]
 800df28:	e7d6      	b.n	800ded8 <_malloc_r+0xa8>
 800df2a:	bf00      	nop
 800df2c:	20002800 	.word	0x20002800

0800df30 <__malloc_lock>:
 800df30:	4801      	ldr	r0, [pc, #4]	@ (800df38 <__malloc_lock+0x8>)
 800df32:	f7ff b8ac 	b.w	800d08e <__retarget_lock_acquire_recursive>
 800df36:	bf00      	nop
 800df38:	200027f8 	.word	0x200027f8

0800df3c <__malloc_unlock>:
 800df3c:	4801      	ldr	r0, [pc, #4]	@ (800df44 <__malloc_unlock+0x8>)
 800df3e:	f7ff b8a7 	b.w	800d090 <__retarget_lock_release_recursive>
 800df42:	bf00      	nop
 800df44:	200027f8 	.word	0x200027f8

0800df48 <_Balloc>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	69c6      	ldr	r6, [r0, #28]
 800df4c:	4604      	mov	r4, r0
 800df4e:	460d      	mov	r5, r1
 800df50:	b976      	cbnz	r6, 800df70 <_Balloc+0x28>
 800df52:	2010      	movs	r0, #16
 800df54:	f7ff ff42 	bl	800dddc <malloc>
 800df58:	4602      	mov	r2, r0
 800df5a:	61e0      	str	r0, [r4, #28]
 800df5c:	b920      	cbnz	r0, 800df68 <_Balloc+0x20>
 800df5e:	4b18      	ldr	r3, [pc, #96]	@ (800dfc0 <_Balloc+0x78>)
 800df60:	4818      	ldr	r0, [pc, #96]	@ (800dfc4 <_Balloc+0x7c>)
 800df62:	216b      	movs	r1, #107	@ 0x6b
 800df64:	f000 fda0 	bl	800eaa8 <__assert_func>
 800df68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df6c:	6006      	str	r6, [r0, #0]
 800df6e:	60c6      	str	r6, [r0, #12]
 800df70:	69e6      	ldr	r6, [r4, #28]
 800df72:	68f3      	ldr	r3, [r6, #12]
 800df74:	b183      	cbz	r3, 800df98 <_Balloc+0x50>
 800df76:	69e3      	ldr	r3, [r4, #28]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df7e:	b9b8      	cbnz	r0, 800dfb0 <_Balloc+0x68>
 800df80:	2101      	movs	r1, #1
 800df82:	fa01 f605 	lsl.w	r6, r1, r5
 800df86:	1d72      	adds	r2, r6, #5
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	4620      	mov	r0, r4
 800df8c:	f000 fdaa 	bl	800eae4 <_calloc_r>
 800df90:	b160      	cbz	r0, 800dfac <_Balloc+0x64>
 800df92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df96:	e00e      	b.n	800dfb6 <_Balloc+0x6e>
 800df98:	2221      	movs	r2, #33	@ 0x21
 800df9a:	2104      	movs	r1, #4
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fda1 	bl	800eae4 <_calloc_r>
 800dfa2:	69e3      	ldr	r3, [r4, #28]
 800dfa4:	60f0      	str	r0, [r6, #12]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d1e4      	bne.n	800df76 <_Balloc+0x2e>
 800dfac:	2000      	movs	r0, #0
 800dfae:	bd70      	pop	{r4, r5, r6, pc}
 800dfb0:	6802      	ldr	r2, [r0, #0]
 800dfb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfbc:	e7f7      	b.n	800dfae <_Balloc+0x66>
 800dfbe:	bf00      	nop
 800dfc0:	0800f251 	.word	0x0800f251
 800dfc4:	0800f2d1 	.word	0x0800f2d1

0800dfc8 <_Bfree>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	69c6      	ldr	r6, [r0, #28]
 800dfcc:	4605      	mov	r5, r0
 800dfce:	460c      	mov	r4, r1
 800dfd0:	b976      	cbnz	r6, 800dff0 <_Bfree+0x28>
 800dfd2:	2010      	movs	r0, #16
 800dfd4:	f7ff ff02 	bl	800dddc <malloc>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	61e8      	str	r0, [r5, #28]
 800dfdc:	b920      	cbnz	r0, 800dfe8 <_Bfree+0x20>
 800dfde:	4b09      	ldr	r3, [pc, #36]	@ (800e004 <_Bfree+0x3c>)
 800dfe0:	4809      	ldr	r0, [pc, #36]	@ (800e008 <_Bfree+0x40>)
 800dfe2:	218f      	movs	r1, #143	@ 0x8f
 800dfe4:	f000 fd60 	bl	800eaa8 <__assert_func>
 800dfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfec:	6006      	str	r6, [r0, #0]
 800dfee:	60c6      	str	r6, [r0, #12]
 800dff0:	b13c      	cbz	r4, 800e002 <_Bfree+0x3a>
 800dff2:	69eb      	ldr	r3, [r5, #28]
 800dff4:	6862      	ldr	r2, [r4, #4]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dffc:	6021      	str	r1, [r4, #0]
 800dffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e002:	bd70      	pop	{r4, r5, r6, pc}
 800e004:	0800f251 	.word	0x0800f251
 800e008:	0800f2d1 	.word	0x0800f2d1

0800e00c <__multadd>:
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	690d      	ldr	r5, [r1, #16]
 800e012:	4607      	mov	r7, r0
 800e014:	460c      	mov	r4, r1
 800e016:	461e      	mov	r6, r3
 800e018:	f101 0c14 	add.w	ip, r1, #20
 800e01c:	2000      	movs	r0, #0
 800e01e:	f8dc 3000 	ldr.w	r3, [ip]
 800e022:	b299      	uxth	r1, r3
 800e024:	fb02 6101 	mla	r1, r2, r1, r6
 800e028:	0c1e      	lsrs	r6, r3, #16
 800e02a:	0c0b      	lsrs	r3, r1, #16
 800e02c:	fb02 3306 	mla	r3, r2, r6, r3
 800e030:	b289      	uxth	r1, r1
 800e032:	3001      	adds	r0, #1
 800e034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e038:	4285      	cmp	r5, r0
 800e03a:	f84c 1b04 	str.w	r1, [ip], #4
 800e03e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e042:	dcec      	bgt.n	800e01e <__multadd+0x12>
 800e044:	b30e      	cbz	r6, 800e08a <__multadd+0x7e>
 800e046:	68a3      	ldr	r3, [r4, #8]
 800e048:	42ab      	cmp	r3, r5
 800e04a:	dc19      	bgt.n	800e080 <__multadd+0x74>
 800e04c:	6861      	ldr	r1, [r4, #4]
 800e04e:	4638      	mov	r0, r7
 800e050:	3101      	adds	r1, #1
 800e052:	f7ff ff79 	bl	800df48 <_Balloc>
 800e056:	4680      	mov	r8, r0
 800e058:	b928      	cbnz	r0, 800e066 <__multadd+0x5a>
 800e05a:	4602      	mov	r2, r0
 800e05c:	4b0c      	ldr	r3, [pc, #48]	@ (800e090 <__multadd+0x84>)
 800e05e:	480d      	ldr	r0, [pc, #52]	@ (800e094 <__multadd+0x88>)
 800e060:	21ba      	movs	r1, #186	@ 0xba
 800e062:	f000 fd21 	bl	800eaa8 <__assert_func>
 800e066:	6922      	ldr	r2, [r4, #16]
 800e068:	3202      	adds	r2, #2
 800e06a:	f104 010c 	add.w	r1, r4, #12
 800e06e:	0092      	lsls	r2, r2, #2
 800e070:	300c      	adds	r0, #12
 800e072:	f7ff f80e 	bl	800d092 <memcpy>
 800e076:	4621      	mov	r1, r4
 800e078:	4638      	mov	r0, r7
 800e07a:	f7ff ffa5 	bl	800dfc8 <_Bfree>
 800e07e:	4644      	mov	r4, r8
 800e080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e084:	3501      	adds	r5, #1
 800e086:	615e      	str	r6, [r3, #20]
 800e088:	6125      	str	r5, [r4, #16]
 800e08a:	4620      	mov	r0, r4
 800e08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e090:	0800f2c0 	.word	0x0800f2c0
 800e094:	0800f2d1 	.word	0x0800f2d1

0800e098 <__hi0bits>:
 800e098:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e09c:	4603      	mov	r3, r0
 800e09e:	bf36      	itet	cc
 800e0a0:	0403      	lslcc	r3, r0, #16
 800e0a2:	2000      	movcs	r0, #0
 800e0a4:	2010      	movcc	r0, #16
 800e0a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e0aa:	bf3c      	itt	cc
 800e0ac:	021b      	lslcc	r3, r3, #8
 800e0ae:	3008      	addcc	r0, #8
 800e0b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e0b4:	bf3c      	itt	cc
 800e0b6:	011b      	lslcc	r3, r3, #4
 800e0b8:	3004      	addcc	r0, #4
 800e0ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0be:	bf3c      	itt	cc
 800e0c0:	009b      	lslcc	r3, r3, #2
 800e0c2:	3002      	addcc	r0, #2
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	db05      	blt.n	800e0d4 <__hi0bits+0x3c>
 800e0c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e0cc:	f100 0001 	add.w	r0, r0, #1
 800e0d0:	bf08      	it	eq
 800e0d2:	2020      	moveq	r0, #32
 800e0d4:	4770      	bx	lr

0800e0d6 <__lo0bits>:
 800e0d6:	6803      	ldr	r3, [r0, #0]
 800e0d8:	4602      	mov	r2, r0
 800e0da:	f013 0007 	ands.w	r0, r3, #7
 800e0de:	d00b      	beq.n	800e0f8 <__lo0bits+0x22>
 800e0e0:	07d9      	lsls	r1, r3, #31
 800e0e2:	d421      	bmi.n	800e128 <__lo0bits+0x52>
 800e0e4:	0798      	lsls	r0, r3, #30
 800e0e6:	bf49      	itett	mi
 800e0e8:	085b      	lsrmi	r3, r3, #1
 800e0ea:	089b      	lsrpl	r3, r3, #2
 800e0ec:	2001      	movmi	r0, #1
 800e0ee:	6013      	strmi	r3, [r2, #0]
 800e0f0:	bf5c      	itt	pl
 800e0f2:	6013      	strpl	r3, [r2, #0]
 800e0f4:	2002      	movpl	r0, #2
 800e0f6:	4770      	bx	lr
 800e0f8:	b299      	uxth	r1, r3
 800e0fa:	b909      	cbnz	r1, 800e100 <__lo0bits+0x2a>
 800e0fc:	0c1b      	lsrs	r3, r3, #16
 800e0fe:	2010      	movs	r0, #16
 800e100:	b2d9      	uxtb	r1, r3
 800e102:	b909      	cbnz	r1, 800e108 <__lo0bits+0x32>
 800e104:	3008      	adds	r0, #8
 800e106:	0a1b      	lsrs	r3, r3, #8
 800e108:	0719      	lsls	r1, r3, #28
 800e10a:	bf04      	itt	eq
 800e10c:	091b      	lsreq	r3, r3, #4
 800e10e:	3004      	addeq	r0, #4
 800e110:	0799      	lsls	r1, r3, #30
 800e112:	bf04      	itt	eq
 800e114:	089b      	lsreq	r3, r3, #2
 800e116:	3002      	addeq	r0, #2
 800e118:	07d9      	lsls	r1, r3, #31
 800e11a:	d403      	bmi.n	800e124 <__lo0bits+0x4e>
 800e11c:	085b      	lsrs	r3, r3, #1
 800e11e:	f100 0001 	add.w	r0, r0, #1
 800e122:	d003      	beq.n	800e12c <__lo0bits+0x56>
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	4770      	bx	lr
 800e128:	2000      	movs	r0, #0
 800e12a:	4770      	bx	lr
 800e12c:	2020      	movs	r0, #32
 800e12e:	4770      	bx	lr

0800e130 <__i2b>:
 800e130:	b510      	push	{r4, lr}
 800e132:	460c      	mov	r4, r1
 800e134:	2101      	movs	r1, #1
 800e136:	f7ff ff07 	bl	800df48 <_Balloc>
 800e13a:	4602      	mov	r2, r0
 800e13c:	b928      	cbnz	r0, 800e14a <__i2b+0x1a>
 800e13e:	4b05      	ldr	r3, [pc, #20]	@ (800e154 <__i2b+0x24>)
 800e140:	4805      	ldr	r0, [pc, #20]	@ (800e158 <__i2b+0x28>)
 800e142:	f240 1145 	movw	r1, #325	@ 0x145
 800e146:	f000 fcaf 	bl	800eaa8 <__assert_func>
 800e14a:	2301      	movs	r3, #1
 800e14c:	6144      	str	r4, [r0, #20]
 800e14e:	6103      	str	r3, [r0, #16]
 800e150:	bd10      	pop	{r4, pc}
 800e152:	bf00      	nop
 800e154:	0800f2c0 	.word	0x0800f2c0
 800e158:	0800f2d1 	.word	0x0800f2d1

0800e15c <__multiply>:
 800e15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e160:	4614      	mov	r4, r2
 800e162:	690a      	ldr	r2, [r1, #16]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	429a      	cmp	r2, r3
 800e168:	bfa8      	it	ge
 800e16a:	4623      	movge	r3, r4
 800e16c:	460f      	mov	r7, r1
 800e16e:	bfa4      	itt	ge
 800e170:	460c      	movge	r4, r1
 800e172:	461f      	movge	r7, r3
 800e174:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e178:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e17c:	68a3      	ldr	r3, [r4, #8]
 800e17e:	6861      	ldr	r1, [r4, #4]
 800e180:	eb0a 0609 	add.w	r6, sl, r9
 800e184:	42b3      	cmp	r3, r6
 800e186:	b085      	sub	sp, #20
 800e188:	bfb8      	it	lt
 800e18a:	3101      	addlt	r1, #1
 800e18c:	f7ff fedc 	bl	800df48 <_Balloc>
 800e190:	b930      	cbnz	r0, 800e1a0 <__multiply+0x44>
 800e192:	4602      	mov	r2, r0
 800e194:	4b44      	ldr	r3, [pc, #272]	@ (800e2a8 <__multiply+0x14c>)
 800e196:	4845      	ldr	r0, [pc, #276]	@ (800e2ac <__multiply+0x150>)
 800e198:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e19c:	f000 fc84 	bl	800eaa8 <__assert_func>
 800e1a0:	f100 0514 	add.w	r5, r0, #20
 800e1a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1a8:	462b      	mov	r3, r5
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	4543      	cmp	r3, r8
 800e1ae:	d321      	bcc.n	800e1f4 <__multiply+0x98>
 800e1b0:	f107 0114 	add.w	r1, r7, #20
 800e1b4:	f104 0214 	add.w	r2, r4, #20
 800e1b8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e1bc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e1c0:	9302      	str	r3, [sp, #8]
 800e1c2:	1b13      	subs	r3, r2, r4
 800e1c4:	3b15      	subs	r3, #21
 800e1c6:	f023 0303 	bic.w	r3, r3, #3
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	f104 0715 	add.w	r7, r4, #21
 800e1d0:	42ba      	cmp	r2, r7
 800e1d2:	bf38      	it	cc
 800e1d4:	2304      	movcc	r3, #4
 800e1d6:	9301      	str	r3, [sp, #4]
 800e1d8:	9b02      	ldr	r3, [sp, #8]
 800e1da:	9103      	str	r1, [sp, #12]
 800e1dc:	428b      	cmp	r3, r1
 800e1de:	d80c      	bhi.n	800e1fa <__multiply+0x9e>
 800e1e0:	2e00      	cmp	r6, #0
 800e1e2:	dd03      	ble.n	800e1ec <__multiply+0x90>
 800e1e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d05b      	beq.n	800e2a4 <__multiply+0x148>
 800e1ec:	6106      	str	r6, [r0, #16]
 800e1ee:	b005      	add	sp, #20
 800e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f4:	f843 2b04 	str.w	r2, [r3], #4
 800e1f8:	e7d8      	b.n	800e1ac <__multiply+0x50>
 800e1fa:	f8b1 a000 	ldrh.w	sl, [r1]
 800e1fe:	f1ba 0f00 	cmp.w	sl, #0
 800e202:	d024      	beq.n	800e24e <__multiply+0xf2>
 800e204:	f104 0e14 	add.w	lr, r4, #20
 800e208:	46a9      	mov	r9, r5
 800e20a:	f04f 0c00 	mov.w	ip, #0
 800e20e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e212:	f8d9 3000 	ldr.w	r3, [r9]
 800e216:	fa1f fb87 	uxth.w	fp, r7
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e220:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e224:	f8d9 7000 	ldr.w	r7, [r9]
 800e228:	4463      	add	r3, ip
 800e22a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e22e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e232:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e236:	b29b      	uxth	r3, r3
 800e238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e23c:	4572      	cmp	r2, lr
 800e23e:	f849 3b04 	str.w	r3, [r9], #4
 800e242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e246:	d8e2      	bhi.n	800e20e <__multiply+0xb2>
 800e248:	9b01      	ldr	r3, [sp, #4]
 800e24a:	f845 c003 	str.w	ip, [r5, r3]
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e254:	3104      	adds	r1, #4
 800e256:	f1b9 0f00 	cmp.w	r9, #0
 800e25a:	d021      	beq.n	800e2a0 <__multiply+0x144>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	f104 0c14 	add.w	ip, r4, #20
 800e262:	46ae      	mov	lr, r5
 800e264:	f04f 0a00 	mov.w	sl, #0
 800e268:	f8bc b000 	ldrh.w	fp, [ip]
 800e26c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e270:	fb09 770b 	mla	r7, r9, fp, r7
 800e274:	4457      	add	r7, sl
 800e276:	b29b      	uxth	r3, r3
 800e278:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e27c:	f84e 3b04 	str.w	r3, [lr], #4
 800e280:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e284:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e288:	f8be 3000 	ldrh.w	r3, [lr]
 800e28c:	fb09 330a 	mla	r3, r9, sl, r3
 800e290:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e294:	4562      	cmp	r2, ip
 800e296:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e29a:	d8e5      	bhi.n	800e268 <__multiply+0x10c>
 800e29c:	9f01      	ldr	r7, [sp, #4]
 800e29e:	51eb      	str	r3, [r5, r7]
 800e2a0:	3504      	adds	r5, #4
 800e2a2:	e799      	b.n	800e1d8 <__multiply+0x7c>
 800e2a4:	3e01      	subs	r6, #1
 800e2a6:	e79b      	b.n	800e1e0 <__multiply+0x84>
 800e2a8:	0800f2c0 	.word	0x0800f2c0
 800e2ac:	0800f2d1 	.word	0x0800f2d1

0800e2b0 <__pow5mult>:
 800e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	4615      	mov	r5, r2
 800e2b6:	f012 0203 	ands.w	r2, r2, #3
 800e2ba:	4607      	mov	r7, r0
 800e2bc:	460e      	mov	r6, r1
 800e2be:	d007      	beq.n	800e2d0 <__pow5mult+0x20>
 800e2c0:	4c25      	ldr	r4, [pc, #148]	@ (800e358 <__pow5mult+0xa8>)
 800e2c2:	3a01      	subs	r2, #1
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2ca:	f7ff fe9f 	bl	800e00c <__multadd>
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	10ad      	asrs	r5, r5, #2
 800e2d2:	d03d      	beq.n	800e350 <__pow5mult+0xa0>
 800e2d4:	69fc      	ldr	r4, [r7, #28]
 800e2d6:	b97c      	cbnz	r4, 800e2f8 <__pow5mult+0x48>
 800e2d8:	2010      	movs	r0, #16
 800e2da:	f7ff fd7f 	bl	800dddc <malloc>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	61f8      	str	r0, [r7, #28]
 800e2e2:	b928      	cbnz	r0, 800e2f0 <__pow5mult+0x40>
 800e2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800e35c <__pow5mult+0xac>)
 800e2e6:	481e      	ldr	r0, [pc, #120]	@ (800e360 <__pow5mult+0xb0>)
 800e2e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e2ec:	f000 fbdc 	bl	800eaa8 <__assert_func>
 800e2f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2f4:	6004      	str	r4, [r0, #0]
 800e2f6:	60c4      	str	r4, [r0, #12]
 800e2f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e300:	b94c      	cbnz	r4, 800e316 <__pow5mult+0x66>
 800e302:	f240 2171 	movw	r1, #625	@ 0x271
 800e306:	4638      	mov	r0, r7
 800e308:	f7ff ff12 	bl	800e130 <__i2b>
 800e30c:	2300      	movs	r3, #0
 800e30e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e312:	4604      	mov	r4, r0
 800e314:	6003      	str	r3, [r0, #0]
 800e316:	f04f 0900 	mov.w	r9, #0
 800e31a:	07eb      	lsls	r3, r5, #31
 800e31c:	d50a      	bpl.n	800e334 <__pow5mult+0x84>
 800e31e:	4631      	mov	r1, r6
 800e320:	4622      	mov	r2, r4
 800e322:	4638      	mov	r0, r7
 800e324:	f7ff ff1a 	bl	800e15c <__multiply>
 800e328:	4631      	mov	r1, r6
 800e32a:	4680      	mov	r8, r0
 800e32c:	4638      	mov	r0, r7
 800e32e:	f7ff fe4b 	bl	800dfc8 <_Bfree>
 800e332:	4646      	mov	r6, r8
 800e334:	106d      	asrs	r5, r5, #1
 800e336:	d00b      	beq.n	800e350 <__pow5mult+0xa0>
 800e338:	6820      	ldr	r0, [r4, #0]
 800e33a:	b938      	cbnz	r0, 800e34c <__pow5mult+0x9c>
 800e33c:	4622      	mov	r2, r4
 800e33e:	4621      	mov	r1, r4
 800e340:	4638      	mov	r0, r7
 800e342:	f7ff ff0b 	bl	800e15c <__multiply>
 800e346:	6020      	str	r0, [r4, #0]
 800e348:	f8c0 9000 	str.w	r9, [r0]
 800e34c:	4604      	mov	r4, r0
 800e34e:	e7e4      	b.n	800e31a <__pow5mult+0x6a>
 800e350:	4630      	mov	r0, r6
 800e352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e356:	bf00      	nop
 800e358:	0800f32c 	.word	0x0800f32c
 800e35c:	0800f251 	.word	0x0800f251
 800e360:	0800f2d1 	.word	0x0800f2d1

0800e364 <__lshift>:
 800e364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e368:	460c      	mov	r4, r1
 800e36a:	6849      	ldr	r1, [r1, #4]
 800e36c:	6923      	ldr	r3, [r4, #16]
 800e36e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e372:	68a3      	ldr	r3, [r4, #8]
 800e374:	4607      	mov	r7, r0
 800e376:	4691      	mov	r9, r2
 800e378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e37c:	f108 0601 	add.w	r6, r8, #1
 800e380:	42b3      	cmp	r3, r6
 800e382:	db0b      	blt.n	800e39c <__lshift+0x38>
 800e384:	4638      	mov	r0, r7
 800e386:	f7ff fddf 	bl	800df48 <_Balloc>
 800e38a:	4605      	mov	r5, r0
 800e38c:	b948      	cbnz	r0, 800e3a2 <__lshift+0x3e>
 800e38e:	4602      	mov	r2, r0
 800e390:	4b28      	ldr	r3, [pc, #160]	@ (800e434 <__lshift+0xd0>)
 800e392:	4829      	ldr	r0, [pc, #164]	@ (800e438 <__lshift+0xd4>)
 800e394:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e398:	f000 fb86 	bl	800eaa8 <__assert_func>
 800e39c:	3101      	adds	r1, #1
 800e39e:	005b      	lsls	r3, r3, #1
 800e3a0:	e7ee      	b.n	800e380 <__lshift+0x1c>
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	f100 0114 	add.w	r1, r0, #20
 800e3a8:	f100 0210 	add.w	r2, r0, #16
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	4553      	cmp	r3, sl
 800e3b0:	db33      	blt.n	800e41a <__lshift+0xb6>
 800e3b2:	6920      	ldr	r0, [r4, #16]
 800e3b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3b8:	f104 0314 	add.w	r3, r4, #20
 800e3bc:	f019 091f 	ands.w	r9, r9, #31
 800e3c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3c8:	d02b      	beq.n	800e422 <__lshift+0xbe>
 800e3ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e3ce:	468a      	mov	sl, r1
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	6818      	ldr	r0, [r3, #0]
 800e3d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e3d8:	4310      	orrs	r0, r2
 800e3da:	f84a 0b04 	str.w	r0, [sl], #4
 800e3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e2:	459c      	cmp	ip, r3
 800e3e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3e8:	d8f3      	bhi.n	800e3d2 <__lshift+0x6e>
 800e3ea:	ebac 0304 	sub.w	r3, ip, r4
 800e3ee:	3b15      	subs	r3, #21
 800e3f0:	f023 0303 	bic.w	r3, r3, #3
 800e3f4:	3304      	adds	r3, #4
 800e3f6:	f104 0015 	add.w	r0, r4, #21
 800e3fa:	4584      	cmp	ip, r0
 800e3fc:	bf38      	it	cc
 800e3fe:	2304      	movcc	r3, #4
 800e400:	50ca      	str	r2, [r1, r3]
 800e402:	b10a      	cbz	r2, 800e408 <__lshift+0xa4>
 800e404:	f108 0602 	add.w	r6, r8, #2
 800e408:	3e01      	subs	r6, #1
 800e40a:	4638      	mov	r0, r7
 800e40c:	612e      	str	r6, [r5, #16]
 800e40e:	4621      	mov	r1, r4
 800e410:	f7ff fdda 	bl	800dfc8 <_Bfree>
 800e414:	4628      	mov	r0, r5
 800e416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e41a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e41e:	3301      	adds	r3, #1
 800e420:	e7c5      	b.n	800e3ae <__lshift+0x4a>
 800e422:	3904      	subs	r1, #4
 800e424:	f853 2b04 	ldr.w	r2, [r3], #4
 800e428:	f841 2f04 	str.w	r2, [r1, #4]!
 800e42c:	459c      	cmp	ip, r3
 800e42e:	d8f9      	bhi.n	800e424 <__lshift+0xc0>
 800e430:	e7ea      	b.n	800e408 <__lshift+0xa4>
 800e432:	bf00      	nop
 800e434:	0800f2c0 	.word	0x0800f2c0
 800e438:	0800f2d1 	.word	0x0800f2d1

0800e43c <__mcmp>:
 800e43c:	690a      	ldr	r2, [r1, #16]
 800e43e:	4603      	mov	r3, r0
 800e440:	6900      	ldr	r0, [r0, #16]
 800e442:	1a80      	subs	r0, r0, r2
 800e444:	b530      	push	{r4, r5, lr}
 800e446:	d10e      	bne.n	800e466 <__mcmp+0x2a>
 800e448:	3314      	adds	r3, #20
 800e44a:	3114      	adds	r1, #20
 800e44c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e450:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e454:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e458:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e45c:	4295      	cmp	r5, r2
 800e45e:	d003      	beq.n	800e468 <__mcmp+0x2c>
 800e460:	d205      	bcs.n	800e46e <__mcmp+0x32>
 800e462:	f04f 30ff 	mov.w	r0, #4294967295
 800e466:	bd30      	pop	{r4, r5, pc}
 800e468:	42a3      	cmp	r3, r4
 800e46a:	d3f3      	bcc.n	800e454 <__mcmp+0x18>
 800e46c:	e7fb      	b.n	800e466 <__mcmp+0x2a>
 800e46e:	2001      	movs	r0, #1
 800e470:	e7f9      	b.n	800e466 <__mcmp+0x2a>
	...

0800e474 <__mdiff>:
 800e474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e478:	4689      	mov	r9, r1
 800e47a:	4606      	mov	r6, r0
 800e47c:	4611      	mov	r1, r2
 800e47e:	4648      	mov	r0, r9
 800e480:	4614      	mov	r4, r2
 800e482:	f7ff ffdb 	bl	800e43c <__mcmp>
 800e486:	1e05      	subs	r5, r0, #0
 800e488:	d112      	bne.n	800e4b0 <__mdiff+0x3c>
 800e48a:	4629      	mov	r1, r5
 800e48c:	4630      	mov	r0, r6
 800e48e:	f7ff fd5b 	bl	800df48 <_Balloc>
 800e492:	4602      	mov	r2, r0
 800e494:	b928      	cbnz	r0, 800e4a2 <__mdiff+0x2e>
 800e496:	4b3f      	ldr	r3, [pc, #252]	@ (800e594 <__mdiff+0x120>)
 800e498:	f240 2137 	movw	r1, #567	@ 0x237
 800e49c:	483e      	ldr	r0, [pc, #248]	@ (800e598 <__mdiff+0x124>)
 800e49e:	f000 fb03 	bl	800eaa8 <__assert_func>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	b003      	add	sp, #12
 800e4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b0:	bfbc      	itt	lt
 800e4b2:	464b      	movlt	r3, r9
 800e4b4:	46a1      	movlt	r9, r4
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e4bc:	bfba      	itte	lt
 800e4be:	461c      	movlt	r4, r3
 800e4c0:	2501      	movlt	r5, #1
 800e4c2:	2500      	movge	r5, #0
 800e4c4:	f7ff fd40 	bl	800df48 <_Balloc>
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	b918      	cbnz	r0, 800e4d4 <__mdiff+0x60>
 800e4cc:	4b31      	ldr	r3, [pc, #196]	@ (800e594 <__mdiff+0x120>)
 800e4ce:	f240 2145 	movw	r1, #581	@ 0x245
 800e4d2:	e7e3      	b.n	800e49c <__mdiff+0x28>
 800e4d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e4d8:	6926      	ldr	r6, [r4, #16]
 800e4da:	60c5      	str	r5, [r0, #12]
 800e4dc:	f109 0310 	add.w	r3, r9, #16
 800e4e0:	f109 0514 	add.w	r5, r9, #20
 800e4e4:	f104 0e14 	add.w	lr, r4, #20
 800e4e8:	f100 0b14 	add.w	fp, r0, #20
 800e4ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e4f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	46d9      	mov	r9, fp
 800e4f8:	f04f 0c00 	mov.w	ip, #0
 800e4fc:	9b01      	ldr	r3, [sp, #4]
 800e4fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e502:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e506:	9301      	str	r3, [sp, #4]
 800e508:	fa1f f38a 	uxth.w	r3, sl
 800e50c:	4619      	mov	r1, r3
 800e50e:	b283      	uxth	r3, r0
 800e510:	1acb      	subs	r3, r1, r3
 800e512:	0c00      	lsrs	r0, r0, #16
 800e514:	4463      	add	r3, ip
 800e516:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e51a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e51e:	b29b      	uxth	r3, r3
 800e520:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e524:	4576      	cmp	r6, lr
 800e526:	f849 3b04 	str.w	r3, [r9], #4
 800e52a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e52e:	d8e5      	bhi.n	800e4fc <__mdiff+0x88>
 800e530:	1b33      	subs	r3, r6, r4
 800e532:	3b15      	subs	r3, #21
 800e534:	f023 0303 	bic.w	r3, r3, #3
 800e538:	3415      	adds	r4, #21
 800e53a:	3304      	adds	r3, #4
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	bf38      	it	cc
 800e540:	2304      	movcc	r3, #4
 800e542:	441d      	add	r5, r3
 800e544:	445b      	add	r3, fp
 800e546:	461e      	mov	r6, r3
 800e548:	462c      	mov	r4, r5
 800e54a:	4544      	cmp	r4, r8
 800e54c:	d30e      	bcc.n	800e56c <__mdiff+0xf8>
 800e54e:	f108 0103 	add.w	r1, r8, #3
 800e552:	1b49      	subs	r1, r1, r5
 800e554:	f021 0103 	bic.w	r1, r1, #3
 800e558:	3d03      	subs	r5, #3
 800e55a:	45a8      	cmp	r8, r5
 800e55c:	bf38      	it	cc
 800e55e:	2100      	movcc	r1, #0
 800e560:	440b      	add	r3, r1
 800e562:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e566:	b191      	cbz	r1, 800e58e <__mdiff+0x11a>
 800e568:	6117      	str	r7, [r2, #16]
 800e56a:	e79d      	b.n	800e4a8 <__mdiff+0x34>
 800e56c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e570:	46e6      	mov	lr, ip
 800e572:	0c08      	lsrs	r0, r1, #16
 800e574:	fa1c fc81 	uxtah	ip, ip, r1
 800e578:	4471      	add	r1, lr
 800e57a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e57e:	b289      	uxth	r1, r1
 800e580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e584:	f846 1b04 	str.w	r1, [r6], #4
 800e588:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e58c:	e7dd      	b.n	800e54a <__mdiff+0xd6>
 800e58e:	3f01      	subs	r7, #1
 800e590:	e7e7      	b.n	800e562 <__mdiff+0xee>
 800e592:	bf00      	nop
 800e594:	0800f2c0 	.word	0x0800f2c0
 800e598:	0800f2d1 	.word	0x0800f2d1

0800e59c <__d2b>:
 800e59c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5a0:	460f      	mov	r7, r1
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	ec59 8b10 	vmov	r8, r9, d0
 800e5a8:	4616      	mov	r6, r2
 800e5aa:	f7ff fccd 	bl	800df48 <_Balloc>
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	b930      	cbnz	r0, 800e5c0 <__d2b+0x24>
 800e5b2:	4602      	mov	r2, r0
 800e5b4:	4b23      	ldr	r3, [pc, #140]	@ (800e644 <__d2b+0xa8>)
 800e5b6:	4824      	ldr	r0, [pc, #144]	@ (800e648 <__d2b+0xac>)
 800e5b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5bc:	f000 fa74 	bl	800eaa8 <__assert_func>
 800e5c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5c8:	b10d      	cbz	r5, 800e5ce <__d2b+0x32>
 800e5ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	f1b8 0300 	subs.w	r3, r8, #0
 800e5d4:	d023      	beq.n	800e61e <__d2b+0x82>
 800e5d6:	4668      	mov	r0, sp
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	f7ff fd7c 	bl	800e0d6 <__lo0bits>
 800e5de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e5e2:	b1d0      	cbz	r0, 800e61a <__d2b+0x7e>
 800e5e4:	f1c0 0320 	rsb	r3, r0, #32
 800e5e8:	fa02 f303 	lsl.w	r3, r2, r3
 800e5ec:	430b      	orrs	r3, r1
 800e5ee:	40c2      	lsrs	r2, r0
 800e5f0:	6163      	str	r3, [r4, #20]
 800e5f2:	9201      	str	r2, [sp, #4]
 800e5f4:	9b01      	ldr	r3, [sp, #4]
 800e5f6:	61a3      	str	r3, [r4, #24]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	bf0c      	ite	eq
 800e5fc:	2201      	moveq	r2, #1
 800e5fe:	2202      	movne	r2, #2
 800e600:	6122      	str	r2, [r4, #16]
 800e602:	b1a5      	cbz	r5, 800e62e <__d2b+0x92>
 800e604:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e608:	4405      	add	r5, r0
 800e60a:	603d      	str	r5, [r7, #0]
 800e60c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e610:	6030      	str	r0, [r6, #0]
 800e612:	4620      	mov	r0, r4
 800e614:	b003      	add	sp, #12
 800e616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e61a:	6161      	str	r1, [r4, #20]
 800e61c:	e7ea      	b.n	800e5f4 <__d2b+0x58>
 800e61e:	a801      	add	r0, sp, #4
 800e620:	f7ff fd59 	bl	800e0d6 <__lo0bits>
 800e624:	9b01      	ldr	r3, [sp, #4]
 800e626:	6163      	str	r3, [r4, #20]
 800e628:	3020      	adds	r0, #32
 800e62a:	2201      	movs	r2, #1
 800e62c:	e7e8      	b.n	800e600 <__d2b+0x64>
 800e62e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e632:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e636:	6038      	str	r0, [r7, #0]
 800e638:	6918      	ldr	r0, [r3, #16]
 800e63a:	f7ff fd2d 	bl	800e098 <__hi0bits>
 800e63e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e642:	e7e5      	b.n	800e610 <__d2b+0x74>
 800e644:	0800f2c0 	.word	0x0800f2c0
 800e648:	0800f2d1 	.word	0x0800f2d1

0800e64c <__ssputs_r>:
 800e64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e650:	688e      	ldr	r6, [r1, #8]
 800e652:	461f      	mov	r7, r3
 800e654:	42be      	cmp	r6, r7
 800e656:	680b      	ldr	r3, [r1, #0]
 800e658:	4682      	mov	sl, r0
 800e65a:	460c      	mov	r4, r1
 800e65c:	4690      	mov	r8, r2
 800e65e:	d82d      	bhi.n	800e6bc <__ssputs_r+0x70>
 800e660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e664:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e668:	d026      	beq.n	800e6b8 <__ssputs_r+0x6c>
 800e66a:	6965      	ldr	r5, [r4, #20]
 800e66c:	6909      	ldr	r1, [r1, #16]
 800e66e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e672:	eba3 0901 	sub.w	r9, r3, r1
 800e676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e67a:	1c7b      	adds	r3, r7, #1
 800e67c:	444b      	add	r3, r9
 800e67e:	106d      	asrs	r5, r5, #1
 800e680:	429d      	cmp	r5, r3
 800e682:	bf38      	it	cc
 800e684:	461d      	movcc	r5, r3
 800e686:	0553      	lsls	r3, r2, #21
 800e688:	d527      	bpl.n	800e6da <__ssputs_r+0x8e>
 800e68a:	4629      	mov	r1, r5
 800e68c:	f7ff fbd0 	bl	800de30 <_malloc_r>
 800e690:	4606      	mov	r6, r0
 800e692:	b360      	cbz	r0, 800e6ee <__ssputs_r+0xa2>
 800e694:	6921      	ldr	r1, [r4, #16]
 800e696:	464a      	mov	r2, r9
 800e698:	f7fe fcfb 	bl	800d092 <memcpy>
 800e69c:	89a3      	ldrh	r3, [r4, #12]
 800e69e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6a6:	81a3      	strh	r3, [r4, #12]
 800e6a8:	6126      	str	r6, [r4, #16]
 800e6aa:	6165      	str	r5, [r4, #20]
 800e6ac:	444e      	add	r6, r9
 800e6ae:	eba5 0509 	sub.w	r5, r5, r9
 800e6b2:	6026      	str	r6, [r4, #0]
 800e6b4:	60a5      	str	r5, [r4, #8]
 800e6b6:	463e      	mov	r6, r7
 800e6b8:	42be      	cmp	r6, r7
 800e6ba:	d900      	bls.n	800e6be <__ssputs_r+0x72>
 800e6bc:	463e      	mov	r6, r7
 800e6be:	6820      	ldr	r0, [r4, #0]
 800e6c0:	4632      	mov	r2, r6
 800e6c2:	4641      	mov	r1, r8
 800e6c4:	f000 f9c6 	bl	800ea54 <memmove>
 800e6c8:	68a3      	ldr	r3, [r4, #8]
 800e6ca:	1b9b      	subs	r3, r3, r6
 800e6cc:	60a3      	str	r3, [r4, #8]
 800e6ce:	6823      	ldr	r3, [r4, #0]
 800e6d0:	4433      	add	r3, r6
 800e6d2:	6023      	str	r3, [r4, #0]
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6da:	462a      	mov	r2, r5
 800e6dc:	f000 fa28 	bl	800eb30 <_realloc_r>
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	2800      	cmp	r0, #0
 800e6e4:	d1e0      	bne.n	800e6a8 <__ssputs_r+0x5c>
 800e6e6:	6921      	ldr	r1, [r4, #16]
 800e6e8:	4650      	mov	r0, sl
 800e6ea:	f7ff fb2d 	bl	800dd48 <_free_r>
 800e6ee:	230c      	movs	r3, #12
 800e6f0:	f8ca 3000 	str.w	r3, [sl]
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e7e9      	b.n	800e6d6 <__ssputs_r+0x8a>
	...

0800e704 <_svfiprintf_r>:
 800e704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	4698      	mov	r8, r3
 800e70a:	898b      	ldrh	r3, [r1, #12]
 800e70c:	061b      	lsls	r3, r3, #24
 800e70e:	b09d      	sub	sp, #116	@ 0x74
 800e710:	4607      	mov	r7, r0
 800e712:	460d      	mov	r5, r1
 800e714:	4614      	mov	r4, r2
 800e716:	d510      	bpl.n	800e73a <_svfiprintf_r+0x36>
 800e718:	690b      	ldr	r3, [r1, #16]
 800e71a:	b973      	cbnz	r3, 800e73a <_svfiprintf_r+0x36>
 800e71c:	2140      	movs	r1, #64	@ 0x40
 800e71e:	f7ff fb87 	bl	800de30 <_malloc_r>
 800e722:	6028      	str	r0, [r5, #0]
 800e724:	6128      	str	r0, [r5, #16]
 800e726:	b930      	cbnz	r0, 800e736 <_svfiprintf_r+0x32>
 800e728:	230c      	movs	r3, #12
 800e72a:	603b      	str	r3, [r7, #0]
 800e72c:	f04f 30ff 	mov.w	r0, #4294967295
 800e730:	b01d      	add	sp, #116	@ 0x74
 800e732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e736:	2340      	movs	r3, #64	@ 0x40
 800e738:	616b      	str	r3, [r5, #20]
 800e73a:	2300      	movs	r3, #0
 800e73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e73e:	2320      	movs	r3, #32
 800e740:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e744:	f8cd 800c 	str.w	r8, [sp, #12]
 800e748:	2330      	movs	r3, #48	@ 0x30
 800e74a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8e8 <_svfiprintf_r+0x1e4>
 800e74e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e752:	f04f 0901 	mov.w	r9, #1
 800e756:	4623      	mov	r3, r4
 800e758:	469a      	mov	sl, r3
 800e75a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e75e:	b10a      	cbz	r2, 800e764 <_svfiprintf_r+0x60>
 800e760:	2a25      	cmp	r2, #37	@ 0x25
 800e762:	d1f9      	bne.n	800e758 <_svfiprintf_r+0x54>
 800e764:	ebba 0b04 	subs.w	fp, sl, r4
 800e768:	d00b      	beq.n	800e782 <_svfiprintf_r+0x7e>
 800e76a:	465b      	mov	r3, fp
 800e76c:	4622      	mov	r2, r4
 800e76e:	4629      	mov	r1, r5
 800e770:	4638      	mov	r0, r7
 800e772:	f7ff ff6b 	bl	800e64c <__ssputs_r>
 800e776:	3001      	adds	r0, #1
 800e778:	f000 80a7 	beq.w	800e8ca <_svfiprintf_r+0x1c6>
 800e77c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e77e:	445a      	add	r2, fp
 800e780:	9209      	str	r2, [sp, #36]	@ 0x24
 800e782:	f89a 3000 	ldrb.w	r3, [sl]
 800e786:	2b00      	cmp	r3, #0
 800e788:	f000 809f 	beq.w	800e8ca <_svfiprintf_r+0x1c6>
 800e78c:	2300      	movs	r3, #0
 800e78e:	f04f 32ff 	mov.w	r2, #4294967295
 800e792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e796:	f10a 0a01 	add.w	sl, sl, #1
 800e79a:	9304      	str	r3, [sp, #16]
 800e79c:	9307      	str	r3, [sp, #28]
 800e79e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e7a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7a4:	4654      	mov	r4, sl
 800e7a6:	2205      	movs	r2, #5
 800e7a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7ac:	484e      	ldr	r0, [pc, #312]	@ (800e8e8 <_svfiprintf_r+0x1e4>)
 800e7ae:	f7f1 fd17 	bl	80001e0 <memchr>
 800e7b2:	9a04      	ldr	r2, [sp, #16]
 800e7b4:	b9d8      	cbnz	r0, 800e7ee <_svfiprintf_r+0xea>
 800e7b6:	06d0      	lsls	r0, r2, #27
 800e7b8:	bf44      	itt	mi
 800e7ba:	2320      	movmi	r3, #32
 800e7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7c0:	0711      	lsls	r1, r2, #28
 800e7c2:	bf44      	itt	mi
 800e7c4:	232b      	movmi	r3, #43	@ 0x2b
 800e7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7d0:	d015      	beq.n	800e7fe <_svfiprintf_r+0xfa>
 800e7d2:	9a07      	ldr	r2, [sp, #28]
 800e7d4:	4654      	mov	r4, sl
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	f04f 0c0a 	mov.w	ip, #10
 800e7dc:	4621      	mov	r1, r4
 800e7de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7e2:	3b30      	subs	r3, #48	@ 0x30
 800e7e4:	2b09      	cmp	r3, #9
 800e7e6:	d94b      	bls.n	800e880 <_svfiprintf_r+0x17c>
 800e7e8:	b1b0      	cbz	r0, 800e818 <_svfiprintf_r+0x114>
 800e7ea:	9207      	str	r2, [sp, #28]
 800e7ec:	e014      	b.n	800e818 <_svfiprintf_r+0x114>
 800e7ee:	eba0 0308 	sub.w	r3, r0, r8
 800e7f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	9304      	str	r3, [sp, #16]
 800e7fa:	46a2      	mov	sl, r4
 800e7fc:	e7d2      	b.n	800e7a4 <_svfiprintf_r+0xa0>
 800e7fe:	9b03      	ldr	r3, [sp, #12]
 800e800:	1d19      	adds	r1, r3, #4
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	9103      	str	r1, [sp, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	bfbb      	ittet	lt
 800e80a:	425b      	neglt	r3, r3
 800e80c:	f042 0202 	orrlt.w	r2, r2, #2
 800e810:	9307      	strge	r3, [sp, #28]
 800e812:	9307      	strlt	r3, [sp, #28]
 800e814:	bfb8      	it	lt
 800e816:	9204      	strlt	r2, [sp, #16]
 800e818:	7823      	ldrb	r3, [r4, #0]
 800e81a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e81c:	d10a      	bne.n	800e834 <_svfiprintf_r+0x130>
 800e81e:	7863      	ldrb	r3, [r4, #1]
 800e820:	2b2a      	cmp	r3, #42	@ 0x2a
 800e822:	d132      	bne.n	800e88a <_svfiprintf_r+0x186>
 800e824:	9b03      	ldr	r3, [sp, #12]
 800e826:	1d1a      	adds	r2, r3, #4
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	9203      	str	r2, [sp, #12]
 800e82c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e830:	3402      	adds	r4, #2
 800e832:	9305      	str	r3, [sp, #20]
 800e834:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8f8 <_svfiprintf_r+0x1f4>
 800e838:	7821      	ldrb	r1, [r4, #0]
 800e83a:	2203      	movs	r2, #3
 800e83c:	4650      	mov	r0, sl
 800e83e:	f7f1 fccf 	bl	80001e0 <memchr>
 800e842:	b138      	cbz	r0, 800e854 <_svfiprintf_r+0x150>
 800e844:	9b04      	ldr	r3, [sp, #16]
 800e846:	eba0 000a 	sub.w	r0, r0, sl
 800e84a:	2240      	movs	r2, #64	@ 0x40
 800e84c:	4082      	lsls	r2, r0
 800e84e:	4313      	orrs	r3, r2
 800e850:	3401      	adds	r4, #1
 800e852:	9304      	str	r3, [sp, #16]
 800e854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e858:	4824      	ldr	r0, [pc, #144]	@ (800e8ec <_svfiprintf_r+0x1e8>)
 800e85a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e85e:	2206      	movs	r2, #6
 800e860:	f7f1 fcbe 	bl	80001e0 <memchr>
 800e864:	2800      	cmp	r0, #0
 800e866:	d036      	beq.n	800e8d6 <_svfiprintf_r+0x1d2>
 800e868:	4b21      	ldr	r3, [pc, #132]	@ (800e8f0 <_svfiprintf_r+0x1ec>)
 800e86a:	bb1b      	cbnz	r3, 800e8b4 <_svfiprintf_r+0x1b0>
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	3307      	adds	r3, #7
 800e870:	f023 0307 	bic.w	r3, r3, #7
 800e874:	3308      	adds	r3, #8
 800e876:	9303      	str	r3, [sp, #12]
 800e878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e87a:	4433      	add	r3, r6
 800e87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e87e:	e76a      	b.n	800e756 <_svfiprintf_r+0x52>
 800e880:	fb0c 3202 	mla	r2, ip, r2, r3
 800e884:	460c      	mov	r4, r1
 800e886:	2001      	movs	r0, #1
 800e888:	e7a8      	b.n	800e7dc <_svfiprintf_r+0xd8>
 800e88a:	2300      	movs	r3, #0
 800e88c:	3401      	adds	r4, #1
 800e88e:	9305      	str	r3, [sp, #20]
 800e890:	4619      	mov	r1, r3
 800e892:	f04f 0c0a 	mov.w	ip, #10
 800e896:	4620      	mov	r0, r4
 800e898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e89c:	3a30      	subs	r2, #48	@ 0x30
 800e89e:	2a09      	cmp	r2, #9
 800e8a0:	d903      	bls.n	800e8aa <_svfiprintf_r+0x1a6>
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d0c6      	beq.n	800e834 <_svfiprintf_r+0x130>
 800e8a6:	9105      	str	r1, [sp, #20]
 800e8a8:	e7c4      	b.n	800e834 <_svfiprintf_r+0x130>
 800e8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e7f0      	b.n	800e896 <_svfiprintf_r+0x192>
 800e8b4:	ab03      	add	r3, sp, #12
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e8f4 <_svfiprintf_r+0x1f0>)
 800e8bc:	a904      	add	r1, sp, #16
 800e8be:	4638      	mov	r0, r7
 800e8c0:	f7fd fe8a 	bl	800c5d8 <_printf_float>
 800e8c4:	1c42      	adds	r2, r0, #1
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	d1d6      	bne.n	800e878 <_svfiprintf_r+0x174>
 800e8ca:	89ab      	ldrh	r3, [r5, #12]
 800e8cc:	065b      	lsls	r3, r3, #25
 800e8ce:	f53f af2d 	bmi.w	800e72c <_svfiprintf_r+0x28>
 800e8d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8d4:	e72c      	b.n	800e730 <_svfiprintf_r+0x2c>
 800e8d6:	ab03      	add	r3, sp, #12
 800e8d8:	9300      	str	r3, [sp, #0]
 800e8da:	462a      	mov	r2, r5
 800e8dc:	4b05      	ldr	r3, [pc, #20]	@ (800e8f4 <_svfiprintf_r+0x1f0>)
 800e8de:	a904      	add	r1, sp, #16
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	f7fe f911 	bl	800cb08 <_printf_i>
 800e8e6:	e7ed      	b.n	800e8c4 <_svfiprintf_r+0x1c0>
 800e8e8:	0800f428 	.word	0x0800f428
 800e8ec:	0800f432 	.word	0x0800f432
 800e8f0:	0800c5d9 	.word	0x0800c5d9
 800e8f4:	0800e64d 	.word	0x0800e64d
 800e8f8:	0800f42e 	.word	0x0800f42e

0800e8fc <__sflush_r>:
 800e8fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e904:	0716      	lsls	r6, r2, #28
 800e906:	4605      	mov	r5, r0
 800e908:	460c      	mov	r4, r1
 800e90a:	d454      	bmi.n	800e9b6 <__sflush_r+0xba>
 800e90c:	684b      	ldr	r3, [r1, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	dc02      	bgt.n	800e918 <__sflush_r+0x1c>
 800e912:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e914:	2b00      	cmp	r3, #0
 800e916:	dd48      	ble.n	800e9aa <__sflush_r+0xae>
 800e918:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e91a:	2e00      	cmp	r6, #0
 800e91c:	d045      	beq.n	800e9aa <__sflush_r+0xae>
 800e91e:	2300      	movs	r3, #0
 800e920:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e924:	682f      	ldr	r7, [r5, #0]
 800e926:	6a21      	ldr	r1, [r4, #32]
 800e928:	602b      	str	r3, [r5, #0]
 800e92a:	d030      	beq.n	800e98e <__sflush_r+0x92>
 800e92c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e92e:	89a3      	ldrh	r3, [r4, #12]
 800e930:	0759      	lsls	r1, r3, #29
 800e932:	d505      	bpl.n	800e940 <__sflush_r+0x44>
 800e934:	6863      	ldr	r3, [r4, #4]
 800e936:	1ad2      	subs	r2, r2, r3
 800e938:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e93a:	b10b      	cbz	r3, 800e940 <__sflush_r+0x44>
 800e93c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	2300      	movs	r3, #0
 800e942:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e944:	6a21      	ldr	r1, [r4, #32]
 800e946:	4628      	mov	r0, r5
 800e948:	47b0      	blx	r6
 800e94a:	1c43      	adds	r3, r0, #1
 800e94c:	89a3      	ldrh	r3, [r4, #12]
 800e94e:	d106      	bne.n	800e95e <__sflush_r+0x62>
 800e950:	6829      	ldr	r1, [r5, #0]
 800e952:	291d      	cmp	r1, #29
 800e954:	d82b      	bhi.n	800e9ae <__sflush_r+0xb2>
 800e956:	4a2a      	ldr	r2, [pc, #168]	@ (800ea00 <__sflush_r+0x104>)
 800e958:	410a      	asrs	r2, r1
 800e95a:	07d6      	lsls	r6, r2, #31
 800e95c:	d427      	bmi.n	800e9ae <__sflush_r+0xb2>
 800e95e:	2200      	movs	r2, #0
 800e960:	6062      	str	r2, [r4, #4]
 800e962:	04d9      	lsls	r1, r3, #19
 800e964:	6922      	ldr	r2, [r4, #16]
 800e966:	6022      	str	r2, [r4, #0]
 800e968:	d504      	bpl.n	800e974 <__sflush_r+0x78>
 800e96a:	1c42      	adds	r2, r0, #1
 800e96c:	d101      	bne.n	800e972 <__sflush_r+0x76>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	b903      	cbnz	r3, 800e974 <__sflush_r+0x78>
 800e972:	6560      	str	r0, [r4, #84]	@ 0x54
 800e974:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e976:	602f      	str	r7, [r5, #0]
 800e978:	b1b9      	cbz	r1, 800e9aa <__sflush_r+0xae>
 800e97a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e97e:	4299      	cmp	r1, r3
 800e980:	d002      	beq.n	800e988 <__sflush_r+0x8c>
 800e982:	4628      	mov	r0, r5
 800e984:	f7ff f9e0 	bl	800dd48 <_free_r>
 800e988:	2300      	movs	r3, #0
 800e98a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e98c:	e00d      	b.n	800e9aa <__sflush_r+0xae>
 800e98e:	2301      	movs	r3, #1
 800e990:	4628      	mov	r0, r5
 800e992:	47b0      	blx	r6
 800e994:	4602      	mov	r2, r0
 800e996:	1c50      	adds	r0, r2, #1
 800e998:	d1c9      	bne.n	800e92e <__sflush_r+0x32>
 800e99a:	682b      	ldr	r3, [r5, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d0c6      	beq.n	800e92e <__sflush_r+0x32>
 800e9a0:	2b1d      	cmp	r3, #29
 800e9a2:	d001      	beq.n	800e9a8 <__sflush_r+0xac>
 800e9a4:	2b16      	cmp	r3, #22
 800e9a6:	d11e      	bne.n	800e9e6 <__sflush_r+0xea>
 800e9a8:	602f      	str	r7, [r5, #0]
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	e022      	b.n	800e9f4 <__sflush_r+0xf8>
 800e9ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9b2:	b21b      	sxth	r3, r3
 800e9b4:	e01b      	b.n	800e9ee <__sflush_r+0xf2>
 800e9b6:	690f      	ldr	r7, [r1, #16]
 800e9b8:	2f00      	cmp	r7, #0
 800e9ba:	d0f6      	beq.n	800e9aa <__sflush_r+0xae>
 800e9bc:	0793      	lsls	r3, r2, #30
 800e9be:	680e      	ldr	r6, [r1, #0]
 800e9c0:	bf08      	it	eq
 800e9c2:	694b      	ldreq	r3, [r1, #20]
 800e9c4:	600f      	str	r7, [r1, #0]
 800e9c6:	bf18      	it	ne
 800e9c8:	2300      	movne	r3, #0
 800e9ca:	eba6 0807 	sub.w	r8, r6, r7
 800e9ce:	608b      	str	r3, [r1, #8]
 800e9d0:	f1b8 0f00 	cmp.w	r8, #0
 800e9d4:	dde9      	ble.n	800e9aa <__sflush_r+0xae>
 800e9d6:	6a21      	ldr	r1, [r4, #32]
 800e9d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e9da:	4643      	mov	r3, r8
 800e9dc:	463a      	mov	r2, r7
 800e9de:	4628      	mov	r0, r5
 800e9e0:	47b0      	blx	r6
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	dc08      	bgt.n	800e9f8 <__sflush_r+0xfc>
 800e9e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ee:	81a3      	strh	r3, [r4, #12]
 800e9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f8:	4407      	add	r7, r0
 800e9fa:	eba8 0800 	sub.w	r8, r8, r0
 800e9fe:	e7e7      	b.n	800e9d0 <__sflush_r+0xd4>
 800ea00:	dfbffffe 	.word	0xdfbffffe

0800ea04 <_fflush_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	690b      	ldr	r3, [r1, #16]
 800ea08:	4605      	mov	r5, r0
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	b913      	cbnz	r3, 800ea14 <_fflush_r+0x10>
 800ea0e:	2500      	movs	r5, #0
 800ea10:	4628      	mov	r0, r5
 800ea12:	bd38      	pop	{r3, r4, r5, pc}
 800ea14:	b118      	cbz	r0, 800ea1e <_fflush_r+0x1a>
 800ea16:	6a03      	ldr	r3, [r0, #32]
 800ea18:	b90b      	cbnz	r3, 800ea1e <_fflush_r+0x1a>
 800ea1a:	f7fe fa21 	bl	800ce60 <__sinit>
 800ea1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d0f3      	beq.n	800ea0e <_fflush_r+0xa>
 800ea26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ea28:	07d0      	lsls	r0, r2, #31
 800ea2a:	d404      	bmi.n	800ea36 <_fflush_r+0x32>
 800ea2c:	0599      	lsls	r1, r3, #22
 800ea2e:	d402      	bmi.n	800ea36 <_fflush_r+0x32>
 800ea30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea32:	f7fe fb2c 	bl	800d08e <__retarget_lock_acquire_recursive>
 800ea36:	4628      	mov	r0, r5
 800ea38:	4621      	mov	r1, r4
 800ea3a:	f7ff ff5f 	bl	800e8fc <__sflush_r>
 800ea3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ea40:	07da      	lsls	r2, r3, #31
 800ea42:	4605      	mov	r5, r0
 800ea44:	d4e4      	bmi.n	800ea10 <_fflush_r+0xc>
 800ea46:	89a3      	ldrh	r3, [r4, #12]
 800ea48:	059b      	lsls	r3, r3, #22
 800ea4a:	d4e1      	bmi.n	800ea10 <_fflush_r+0xc>
 800ea4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ea4e:	f7fe fb1f 	bl	800d090 <__retarget_lock_release_recursive>
 800ea52:	e7dd      	b.n	800ea10 <_fflush_r+0xc>

0800ea54 <memmove>:
 800ea54:	4288      	cmp	r0, r1
 800ea56:	b510      	push	{r4, lr}
 800ea58:	eb01 0402 	add.w	r4, r1, r2
 800ea5c:	d902      	bls.n	800ea64 <memmove+0x10>
 800ea5e:	4284      	cmp	r4, r0
 800ea60:	4623      	mov	r3, r4
 800ea62:	d807      	bhi.n	800ea74 <memmove+0x20>
 800ea64:	1e43      	subs	r3, r0, #1
 800ea66:	42a1      	cmp	r1, r4
 800ea68:	d008      	beq.n	800ea7c <memmove+0x28>
 800ea6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea72:	e7f8      	b.n	800ea66 <memmove+0x12>
 800ea74:	4402      	add	r2, r0
 800ea76:	4601      	mov	r1, r0
 800ea78:	428a      	cmp	r2, r1
 800ea7a:	d100      	bne.n	800ea7e <memmove+0x2a>
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea86:	e7f7      	b.n	800ea78 <memmove+0x24>

0800ea88 <_sbrk_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d06      	ldr	r5, [pc, #24]	@ (800eaa4 <_sbrk_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	602b      	str	r3, [r5, #0]
 800ea94:	f7f4 fd2e 	bl	80034f4 <_sbrk>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_sbrk_r+0x1a>
 800ea9c:	682b      	ldr	r3, [r5, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_sbrk_r+0x1a>
 800eaa0:	6023      	str	r3, [r4, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	200027f4 	.word	0x200027f4

0800eaa8 <__assert_func>:
 800eaa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaaa:	4614      	mov	r4, r2
 800eaac:	461a      	mov	r2, r3
 800eaae:	4b09      	ldr	r3, [pc, #36]	@ (800ead4 <__assert_func+0x2c>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4605      	mov	r5, r0
 800eab4:	68d8      	ldr	r0, [r3, #12]
 800eab6:	b954      	cbnz	r4, 800eace <__assert_func+0x26>
 800eab8:	4b07      	ldr	r3, [pc, #28]	@ (800ead8 <__assert_func+0x30>)
 800eaba:	461c      	mov	r4, r3
 800eabc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eac0:	9100      	str	r1, [sp, #0]
 800eac2:	462b      	mov	r3, r5
 800eac4:	4905      	ldr	r1, [pc, #20]	@ (800eadc <__assert_func+0x34>)
 800eac6:	f000 f86f 	bl	800eba8 <fiprintf>
 800eaca:	f000 f87f 	bl	800ebcc <abort>
 800eace:	4b04      	ldr	r3, [pc, #16]	@ (800eae0 <__assert_func+0x38>)
 800ead0:	e7f4      	b.n	800eabc <__assert_func+0x14>
 800ead2:	bf00      	nop
 800ead4:	20000330 	.word	0x20000330
 800ead8:	0800f47e 	.word	0x0800f47e
 800eadc:	0800f450 	.word	0x0800f450
 800eae0:	0800f443 	.word	0x0800f443

0800eae4 <_calloc_r>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	fba1 5402 	umull	r5, r4, r1, r2
 800eaea:	b93c      	cbnz	r4, 800eafc <_calloc_r+0x18>
 800eaec:	4629      	mov	r1, r5
 800eaee:	f7ff f99f 	bl	800de30 <_malloc_r>
 800eaf2:	4606      	mov	r6, r0
 800eaf4:	b928      	cbnz	r0, 800eb02 <_calloc_r+0x1e>
 800eaf6:	2600      	movs	r6, #0
 800eaf8:	4630      	mov	r0, r6
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	220c      	movs	r2, #12
 800eafe:	6002      	str	r2, [r0, #0]
 800eb00:	e7f9      	b.n	800eaf6 <_calloc_r+0x12>
 800eb02:	462a      	mov	r2, r5
 800eb04:	4621      	mov	r1, r4
 800eb06:	f7fe fa44 	bl	800cf92 <memset>
 800eb0a:	e7f5      	b.n	800eaf8 <_calloc_r+0x14>

0800eb0c <__ascii_mbtowc>:
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	b901      	cbnz	r1, 800eb12 <__ascii_mbtowc+0x6>
 800eb10:	a901      	add	r1, sp, #4
 800eb12:	b142      	cbz	r2, 800eb26 <__ascii_mbtowc+0x1a>
 800eb14:	b14b      	cbz	r3, 800eb2a <__ascii_mbtowc+0x1e>
 800eb16:	7813      	ldrb	r3, [r2, #0]
 800eb18:	600b      	str	r3, [r1, #0]
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	1e10      	subs	r0, r2, #0
 800eb1e:	bf18      	it	ne
 800eb20:	2001      	movne	r0, #1
 800eb22:	b002      	add	sp, #8
 800eb24:	4770      	bx	lr
 800eb26:	4610      	mov	r0, r2
 800eb28:	e7fb      	b.n	800eb22 <__ascii_mbtowc+0x16>
 800eb2a:	f06f 0001 	mvn.w	r0, #1
 800eb2e:	e7f8      	b.n	800eb22 <__ascii_mbtowc+0x16>

0800eb30 <_realloc_r>:
 800eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb34:	4680      	mov	r8, r0
 800eb36:	4615      	mov	r5, r2
 800eb38:	460c      	mov	r4, r1
 800eb3a:	b921      	cbnz	r1, 800eb46 <_realloc_r+0x16>
 800eb3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb40:	4611      	mov	r1, r2
 800eb42:	f7ff b975 	b.w	800de30 <_malloc_r>
 800eb46:	b92a      	cbnz	r2, 800eb54 <_realloc_r+0x24>
 800eb48:	f7ff f8fe 	bl	800dd48 <_free_r>
 800eb4c:	2400      	movs	r4, #0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb54:	f000 f841 	bl	800ebda <_malloc_usable_size_r>
 800eb58:	4285      	cmp	r5, r0
 800eb5a:	4606      	mov	r6, r0
 800eb5c:	d802      	bhi.n	800eb64 <_realloc_r+0x34>
 800eb5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800eb62:	d8f4      	bhi.n	800eb4e <_realloc_r+0x1e>
 800eb64:	4629      	mov	r1, r5
 800eb66:	4640      	mov	r0, r8
 800eb68:	f7ff f962 	bl	800de30 <_malloc_r>
 800eb6c:	4607      	mov	r7, r0
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d0ec      	beq.n	800eb4c <_realloc_r+0x1c>
 800eb72:	42b5      	cmp	r5, r6
 800eb74:	462a      	mov	r2, r5
 800eb76:	4621      	mov	r1, r4
 800eb78:	bf28      	it	cs
 800eb7a:	4632      	movcs	r2, r6
 800eb7c:	f7fe fa89 	bl	800d092 <memcpy>
 800eb80:	4621      	mov	r1, r4
 800eb82:	4640      	mov	r0, r8
 800eb84:	f7ff f8e0 	bl	800dd48 <_free_r>
 800eb88:	463c      	mov	r4, r7
 800eb8a:	e7e0      	b.n	800eb4e <_realloc_r+0x1e>

0800eb8c <__ascii_wctomb>:
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	4608      	mov	r0, r1
 800eb90:	b141      	cbz	r1, 800eba4 <__ascii_wctomb+0x18>
 800eb92:	2aff      	cmp	r2, #255	@ 0xff
 800eb94:	d904      	bls.n	800eba0 <__ascii_wctomb+0x14>
 800eb96:	228a      	movs	r2, #138	@ 0x8a
 800eb98:	601a      	str	r2, [r3, #0]
 800eb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800eb9e:	4770      	bx	lr
 800eba0:	700a      	strb	r2, [r1, #0]
 800eba2:	2001      	movs	r0, #1
 800eba4:	4770      	bx	lr
	...

0800eba8 <fiprintf>:
 800eba8:	b40e      	push	{r1, r2, r3}
 800ebaa:	b503      	push	{r0, r1, lr}
 800ebac:	4601      	mov	r1, r0
 800ebae:	ab03      	add	r3, sp, #12
 800ebb0:	4805      	ldr	r0, [pc, #20]	@ (800ebc8 <fiprintf+0x20>)
 800ebb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb6:	6800      	ldr	r0, [r0, #0]
 800ebb8:	9301      	str	r3, [sp, #4]
 800ebba:	f000 f83f 	bl	800ec3c <_vfiprintf_r>
 800ebbe:	b002      	add	sp, #8
 800ebc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebc4:	b003      	add	sp, #12
 800ebc6:	4770      	bx	lr
 800ebc8:	20000330 	.word	0x20000330

0800ebcc <abort>:
 800ebcc:	b508      	push	{r3, lr}
 800ebce:	2006      	movs	r0, #6
 800ebd0:	f000 fa08 	bl	800efe4 <raise>
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	f7f4 fc15 	bl	8003404 <_exit>

0800ebda <_malloc_usable_size_r>:
 800ebda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebde:	1f18      	subs	r0, r3, #4
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	bfbc      	itt	lt
 800ebe4:	580b      	ldrlt	r3, [r1, r0]
 800ebe6:	18c0      	addlt	r0, r0, r3
 800ebe8:	4770      	bx	lr

0800ebea <__sfputc_r>:
 800ebea:	6893      	ldr	r3, [r2, #8]
 800ebec:	3b01      	subs	r3, #1
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	b410      	push	{r4}
 800ebf2:	6093      	str	r3, [r2, #8]
 800ebf4:	da08      	bge.n	800ec08 <__sfputc_r+0x1e>
 800ebf6:	6994      	ldr	r4, [r2, #24]
 800ebf8:	42a3      	cmp	r3, r4
 800ebfa:	db01      	blt.n	800ec00 <__sfputc_r+0x16>
 800ebfc:	290a      	cmp	r1, #10
 800ebfe:	d103      	bne.n	800ec08 <__sfputc_r+0x1e>
 800ec00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec04:	f000 b932 	b.w	800ee6c <__swbuf_r>
 800ec08:	6813      	ldr	r3, [r2, #0]
 800ec0a:	1c58      	adds	r0, r3, #1
 800ec0c:	6010      	str	r0, [r2, #0]
 800ec0e:	7019      	strb	r1, [r3, #0]
 800ec10:	4608      	mov	r0, r1
 800ec12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec16:	4770      	bx	lr

0800ec18 <__sfputs_r>:
 800ec18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1a:	4606      	mov	r6, r0
 800ec1c:	460f      	mov	r7, r1
 800ec1e:	4614      	mov	r4, r2
 800ec20:	18d5      	adds	r5, r2, r3
 800ec22:	42ac      	cmp	r4, r5
 800ec24:	d101      	bne.n	800ec2a <__sfputs_r+0x12>
 800ec26:	2000      	movs	r0, #0
 800ec28:	e007      	b.n	800ec3a <__sfputs_r+0x22>
 800ec2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec2e:	463a      	mov	r2, r7
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7ff ffda 	bl	800ebea <__sfputc_r>
 800ec36:	1c43      	adds	r3, r0, #1
 800ec38:	d1f3      	bne.n	800ec22 <__sfputs_r+0xa>
 800ec3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec3c <_vfiprintf_r>:
 800ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec40:	460d      	mov	r5, r1
 800ec42:	b09d      	sub	sp, #116	@ 0x74
 800ec44:	4614      	mov	r4, r2
 800ec46:	4698      	mov	r8, r3
 800ec48:	4606      	mov	r6, r0
 800ec4a:	b118      	cbz	r0, 800ec54 <_vfiprintf_r+0x18>
 800ec4c:	6a03      	ldr	r3, [r0, #32]
 800ec4e:	b90b      	cbnz	r3, 800ec54 <_vfiprintf_r+0x18>
 800ec50:	f7fe f906 	bl	800ce60 <__sinit>
 800ec54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec56:	07d9      	lsls	r1, r3, #31
 800ec58:	d405      	bmi.n	800ec66 <_vfiprintf_r+0x2a>
 800ec5a:	89ab      	ldrh	r3, [r5, #12]
 800ec5c:	059a      	lsls	r2, r3, #22
 800ec5e:	d402      	bmi.n	800ec66 <_vfiprintf_r+0x2a>
 800ec60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec62:	f7fe fa14 	bl	800d08e <__retarget_lock_acquire_recursive>
 800ec66:	89ab      	ldrh	r3, [r5, #12]
 800ec68:	071b      	lsls	r3, r3, #28
 800ec6a:	d501      	bpl.n	800ec70 <_vfiprintf_r+0x34>
 800ec6c:	692b      	ldr	r3, [r5, #16]
 800ec6e:	b99b      	cbnz	r3, 800ec98 <_vfiprintf_r+0x5c>
 800ec70:	4629      	mov	r1, r5
 800ec72:	4630      	mov	r0, r6
 800ec74:	f000 f938 	bl	800eee8 <__swsetup_r>
 800ec78:	b170      	cbz	r0, 800ec98 <_vfiprintf_r+0x5c>
 800ec7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ec7c:	07dc      	lsls	r4, r3, #31
 800ec7e:	d504      	bpl.n	800ec8a <_vfiprintf_r+0x4e>
 800ec80:	f04f 30ff 	mov.w	r0, #4294967295
 800ec84:	b01d      	add	sp, #116	@ 0x74
 800ec86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8a:	89ab      	ldrh	r3, [r5, #12]
 800ec8c:	0598      	lsls	r0, r3, #22
 800ec8e:	d4f7      	bmi.n	800ec80 <_vfiprintf_r+0x44>
 800ec90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ec92:	f7fe f9fd 	bl	800d090 <__retarget_lock_release_recursive>
 800ec96:	e7f3      	b.n	800ec80 <_vfiprintf_r+0x44>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec9c:	2320      	movs	r3, #32
 800ec9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eca2:	f8cd 800c 	str.w	r8, [sp, #12]
 800eca6:	2330      	movs	r3, #48	@ 0x30
 800eca8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ee58 <_vfiprintf_r+0x21c>
 800ecac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecb0:	f04f 0901 	mov.w	r9, #1
 800ecb4:	4623      	mov	r3, r4
 800ecb6:	469a      	mov	sl, r3
 800ecb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecbc:	b10a      	cbz	r2, 800ecc2 <_vfiprintf_r+0x86>
 800ecbe:	2a25      	cmp	r2, #37	@ 0x25
 800ecc0:	d1f9      	bne.n	800ecb6 <_vfiprintf_r+0x7a>
 800ecc2:	ebba 0b04 	subs.w	fp, sl, r4
 800ecc6:	d00b      	beq.n	800ece0 <_vfiprintf_r+0xa4>
 800ecc8:	465b      	mov	r3, fp
 800ecca:	4622      	mov	r2, r4
 800eccc:	4629      	mov	r1, r5
 800ecce:	4630      	mov	r0, r6
 800ecd0:	f7ff ffa2 	bl	800ec18 <__sfputs_r>
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	f000 80a7 	beq.w	800ee28 <_vfiprintf_r+0x1ec>
 800ecda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecdc:	445a      	add	r2, fp
 800ecde:	9209      	str	r2, [sp, #36]	@ 0x24
 800ece0:	f89a 3000 	ldrb.w	r3, [sl]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	f000 809f 	beq.w	800ee28 <_vfiprintf_r+0x1ec>
 800ecea:	2300      	movs	r3, #0
 800ecec:	f04f 32ff 	mov.w	r2, #4294967295
 800ecf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecf4:	f10a 0a01 	add.w	sl, sl, #1
 800ecf8:	9304      	str	r3, [sp, #16]
 800ecfa:	9307      	str	r3, [sp, #28]
 800ecfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed00:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed02:	4654      	mov	r4, sl
 800ed04:	2205      	movs	r2, #5
 800ed06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed0a:	4853      	ldr	r0, [pc, #332]	@ (800ee58 <_vfiprintf_r+0x21c>)
 800ed0c:	f7f1 fa68 	bl	80001e0 <memchr>
 800ed10:	9a04      	ldr	r2, [sp, #16]
 800ed12:	b9d8      	cbnz	r0, 800ed4c <_vfiprintf_r+0x110>
 800ed14:	06d1      	lsls	r1, r2, #27
 800ed16:	bf44      	itt	mi
 800ed18:	2320      	movmi	r3, #32
 800ed1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed1e:	0713      	lsls	r3, r2, #28
 800ed20:	bf44      	itt	mi
 800ed22:	232b      	movmi	r3, #43	@ 0x2b
 800ed24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed28:	f89a 3000 	ldrb.w	r3, [sl]
 800ed2c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed2e:	d015      	beq.n	800ed5c <_vfiprintf_r+0x120>
 800ed30:	9a07      	ldr	r2, [sp, #28]
 800ed32:	4654      	mov	r4, sl
 800ed34:	2000      	movs	r0, #0
 800ed36:	f04f 0c0a 	mov.w	ip, #10
 800ed3a:	4621      	mov	r1, r4
 800ed3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed40:	3b30      	subs	r3, #48	@ 0x30
 800ed42:	2b09      	cmp	r3, #9
 800ed44:	d94b      	bls.n	800edde <_vfiprintf_r+0x1a2>
 800ed46:	b1b0      	cbz	r0, 800ed76 <_vfiprintf_r+0x13a>
 800ed48:	9207      	str	r2, [sp, #28]
 800ed4a:	e014      	b.n	800ed76 <_vfiprintf_r+0x13a>
 800ed4c:	eba0 0308 	sub.w	r3, r0, r8
 800ed50:	fa09 f303 	lsl.w	r3, r9, r3
 800ed54:	4313      	orrs	r3, r2
 800ed56:	9304      	str	r3, [sp, #16]
 800ed58:	46a2      	mov	sl, r4
 800ed5a:	e7d2      	b.n	800ed02 <_vfiprintf_r+0xc6>
 800ed5c:	9b03      	ldr	r3, [sp, #12]
 800ed5e:	1d19      	adds	r1, r3, #4
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	9103      	str	r1, [sp, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	bfbb      	ittet	lt
 800ed68:	425b      	neglt	r3, r3
 800ed6a:	f042 0202 	orrlt.w	r2, r2, #2
 800ed6e:	9307      	strge	r3, [sp, #28]
 800ed70:	9307      	strlt	r3, [sp, #28]
 800ed72:	bfb8      	it	lt
 800ed74:	9204      	strlt	r2, [sp, #16]
 800ed76:	7823      	ldrb	r3, [r4, #0]
 800ed78:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed7a:	d10a      	bne.n	800ed92 <_vfiprintf_r+0x156>
 800ed7c:	7863      	ldrb	r3, [r4, #1]
 800ed7e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed80:	d132      	bne.n	800ede8 <_vfiprintf_r+0x1ac>
 800ed82:	9b03      	ldr	r3, [sp, #12]
 800ed84:	1d1a      	adds	r2, r3, #4
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	9203      	str	r2, [sp, #12]
 800ed8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed8e:	3402      	adds	r4, #2
 800ed90:	9305      	str	r3, [sp, #20]
 800ed92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ee68 <_vfiprintf_r+0x22c>
 800ed96:	7821      	ldrb	r1, [r4, #0]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	4650      	mov	r0, sl
 800ed9c:	f7f1 fa20 	bl	80001e0 <memchr>
 800eda0:	b138      	cbz	r0, 800edb2 <_vfiprintf_r+0x176>
 800eda2:	9b04      	ldr	r3, [sp, #16]
 800eda4:	eba0 000a 	sub.w	r0, r0, sl
 800eda8:	2240      	movs	r2, #64	@ 0x40
 800edaa:	4082      	lsls	r2, r0
 800edac:	4313      	orrs	r3, r2
 800edae:	3401      	adds	r4, #1
 800edb0:	9304      	str	r3, [sp, #16]
 800edb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb6:	4829      	ldr	r0, [pc, #164]	@ (800ee5c <_vfiprintf_r+0x220>)
 800edb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edbc:	2206      	movs	r2, #6
 800edbe:	f7f1 fa0f 	bl	80001e0 <memchr>
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d03f      	beq.n	800ee46 <_vfiprintf_r+0x20a>
 800edc6:	4b26      	ldr	r3, [pc, #152]	@ (800ee60 <_vfiprintf_r+0x224>)
 800edc8:	bb1b      	cbnz	r3, 800ee12 <_vfiprintf_r+0x1d6>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	3307      	adds	r3, #7
 800edce:	f023 0307 	bic.w	r3, r3, #7
 800edd2:	3308      	adds	r3, #8
 800edd4:	9303      	str	r3, [sp, #12]
 800edd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edd8:	443b      	add	r3, r7
 800edda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eddc:	e76a      	b.n	800ecb4 <_vfiprintf_r+0x78>
 800edde:	fb0c 3202 	mla	r2, ip, r2, r3
 800ede2:	460c      	mov	r4, r1
 800ede4:	2001      	movs	r0, #1
 800ede6:	e7a8      	b.n	800ed3a <_vfiprintf_r+0xfe>
 800ede8:	2300      	movs	r3, #0
 800edea:	3401      	adds	r4, #1
 800edec:	9305      	str	r3, [sp, #20]
 800edee:	4619      	mov	r1, r3
 800edf0:	f04f 0c0a 	mov.w	ip, #10
 800edf4:	4620      	mov	r0, r4
 800edf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edfa:	3a30      	subs	r2, #48	@ 0x30
 800edfc:	2a09      	cmp	r2, #9
 800edfe:	d903      	bls.n	800ee08 <_vfiprintf_r+0x1cc>
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d0c6      	beq.n	800ed92 <_vfiprintf_r+0x156>
 800ee04:	9105      	str	r1, [sp, #20]
 800ee06:	e7c4      	b.n	800ed92 <_vfiprintf_r+0x156>
 800ee08:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e7f0      	b.n	800edf4 <_vfiprintf_r+0x1b8>
 800ee12:	ab03      	add	r3, sp, #12
 800ee14:	9300      	str	r3, [sp, #0]
 800ee16:	462a      	mov	r2, r5
 800ee18:	4b12      	ldr	r3, [pc, #72]	@ (800ee64 <_vfiprintf_r+0x228>)
 800ee1a:	a904      	add	r1, sp, #16
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7fd fbdb 	bl	800c5d8 <_printf_float>
 800ee22:	4607      	mov	r7, r0
 800ee24:	1c78      	adds	r0, r7, #1
 800ee26:	d1d6      	bne.n	800edd6 <_vfiprintf_r+0x19a>
 800ee28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ee2a:	07d9      	lsls	r1, r3, #31
 800ee2c:	d405      	bmi.n	800ee3a <_vfiprintf_r+0x1fe>
 800ee2e:	89ab      	ldrh	r3, [r5, #12]
 800ee30:	059a      	lsls	r2, r3, #22
 800ee32:	d402      	bmi.n	800ee3a <_vfiprintf_r+0x1fe>
 800ee34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ee36:	f7fe f92b 	bl	800d090 <__retarget_lock_release_recursive>
 800ee3a:	89ab      	ldrh	r3, [r5, #12]
 800ee3c:	065b      	lsls	r3, r3, #25
 800ee3e:	f53f af1f 	bmi.w	800ec80 <_vfiprintf_r+0x44>
 800ee42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee44:	e71e      	b.n	800ec84 <_vfiprintf_r+0x48>
 800ee46:	ab03      	add	r3, sp, #12
 800ee48:	9300      	str	r3, [sp, #0]
 800ee4a:	462a      	mov	r2, r5
 800ee4c:	4b05      	ldr	r3, [pc, #20]	@ (800ee64 <_vfiprintf_r+0x228>)
 800ee4e:	a904      	add	r1, sp, #16
 800ee50:	4630      	mov	r0, r6
 800ee52:	f7fd fe59 	bl	800cb08 <_printf_i>
 800ee56:	e7e4      	b.n	800ee22 <_vfiprintf_r+0x1e6>
 800ee58:	0800f428 	.word	0x0800f428
 800ee5c:	0800f432 	.word	0x0800f432
 800ee60:	0800c5d9 	.word	0x0800c5d9
 800ee64:	0800ec19 	.word	0x0800ec19
 800ee68:	0800f42e 	.word	0x0800f42e

0800ee6c <__swbuf_r>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	460e      	mov	r6, r1
 800ee70:	4614      	mov	r4, r2
 800ee72:	4605      	mov	r5, r0
 800ee74:	b118      	cbz	r0, 800ee7e <__swbuf_r+0x12>
 800ee76:	6a03      	ldr	r3, [r0, #32]
 800ee78:	b90b      	cbnz	r3, 800ee7e <__swbuf_r+0x12>
 800ee7a:	f7fd fff1 	bl	800ce60 <__sinit>
 800ee7e:	69a3      	ldr	r3, [r4, #24]
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	89a3      	ldrh	r3, [r4, #12]
 800ee84:	071a      	lsls	r2, r3, #28
 800ee86:	d501      	bpl.n	800ee8c <__swbuf_r+0x20>
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	b943      	cbnz	r3, 800ee9e <__swbuf_r+0x32>
 800ee8c:	4621      	mov	r1, r4
 800ee8e:	4628      	mov	r0, r5
 800ee90:	f000 f82a 	bl	800eee8 <__swsetup_r>
 800ee94:	b118      	cbz	r0, 800ee9e <__swbuf_r+0x32>
 800ee96:	f04f 37ff 	mov.w	r7, #4294967295
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	6922      	ldr	r2, [r4, #16]
 800eea2:	1a98      	subs	r0, r3, r2
 800eea4:	6963      	ldr	r3, [r4, #20]
 800eea6:	b2f6      	uxtb	r6, r6
 800eea8:	4283      	cmp	r3, r0
 800eeaa:	4637      	mov	r7, r6
 800eeac:	dc05      	bgt.n	800eeba <__swbuf_r+0x4e>
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4628      	mov	r0, r5
 800eeb2:	f7ff fda7 	bl	800ea04 <_fflush_r>
 800eeb6:	2800      	cmp	r0, #0
 800eeb8:	d1ed      	bne.n	800ee96 <__swbuf_r+0x2a>
 800eeba:	68a3      	ldr	r3, [r4, #8]
 800eebc:	3b01      	subs	r3, #1
 800eebe:	60a3      	str	r3, [r4, #8]
 800eec0:	6823      	ldr	r3, [r4, #0]
 800eec2:	1c5a      	adds	r2, r3, #1
 800eec4:	6022      	str	r2, [r4, #0]
 800eec6:	701e      	strb	r6, [r3, #0]
 800eec8:	6962      	ldr	r2, [r4, #20]
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	429a      	cmp	r2, r3
 800eece:	d004      	beq.n	800eeda <__swbuf_r+0x6e>
 800eed0:	89a3      	ldrh	r3, [r4, #12]
 800eed2:	07db      	lsls	r3, r3, #31
 800eed4:	d5e1      	bpl.n	800ee9a <__swbuf_r+0x2e>
 800eed6:	2e0a      	cmp	r6, #10
 800eed8:	d1df      	bne.n	800ee9a <__swbuf_r+0x2e>
 800eeda:	4621      	mov	r1, r4
 800eedc:	4628      	mov	r0, r5
 800eede:	f7ff fd91 	bl	800ea04 <_fflush_r>
 800eee2:	2800      	cmp	r0, #0
 800eee4:	d0d9      	beq.n	800ee9a <__swbuf_r+0x2e>
 800eee6:	e7d6      	b.n	800ee96 <__swbuf_r+0x2a>

0800eee8 <__swsetup_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	4b29      	ldr	r3, [pc, #164]	@ (800ef90 <__swsetup_r+0xa8>)
 800eeec:	4605      	mov	r5, r0
 800eeee:	6818      	ldr	r0, [r3, #0]
 800eef0:	460c      	mov	r4, r1
 800eef2:	b118      	cbz	r0, 800eefc <__swsetup_r+0x14>
 800eef4:	6a03      	ldr	r3, [r0, #32]
 800eef6:	b90b      	cbnz	r3, 800eefc <__swsetup_r+0x14>
 800eef8:	f7fd ffb2 	bl	800ce60 <__sinit>
 800eefc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef00:	0719      	lsls	r1, r3, #28
 800ef02:	d422      	bmi.n	800ef4a <__swsetup_r+0x62>
 800ef04:	06da      	lsls	r2, r3, #27
 800ef06:	d407      	bmi.n	800ef18 <__swsetup_r+0x30>
 800ef08:	2209      	movs	r2, #9
 800ef0a:	602a      	str	r2, [r5, #0]
 800ef0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef10:	81a3      	strh	r3, [r4, #12]
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	e033      	b.n	800ef80 <__swsetup_r+0x98>
 800ef18:	0758      	lsls	r0, r3, #29
 800ef1a:	d512      	bpl.n	800ef42 <__swsetup_r+0x5a>
 800ef1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef1e:	b141      	cbz	r1, 800ef32 <__swsetup_r+0x4a>
 800ef20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef24:	4299      	cmp	r1, r3
 800ef26:	d002      	beq.n	800ef2e <__swsetup_r+0x46>
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f7fe ff0d 	bl	800dd48 <_free_r>
 800ef2e:	2300      	movs	r3, #0
 800ef30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6063      	str	r3, [r4, #4]
 800ef3e:	6923      	ldr	r3, [r4, #16]
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	89a3      	ldrh	r3, [r4, #12]
 800ef44:	f043 0308 	orr.w	r3, r3, #8
 800ef48:	81a3      	strh	r3, [r4, #12]
 800ef4a:	6923      	ldr	r3, [r4, #16]
 800ef4c:	b94b      	cbnz	r3, 800ef62 <__swsetup_r+0x7a>
 800ef4e:	89a3      	ldrh	r3, [r4, #12]
 800ef50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef58:	d003      	beq.n	800ef62 <__swsetup_r+0x7a>
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	f000 f883 	bl	800f068 <__smakebuf_r>
 800ef62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef66:	f013 0201 	ands.w	r2, r3, #1
 800ef6a:	d00a      	beq.n	800ef82 <__swsetup_r+0x9a>
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	60a2      	str	r2, [r4, #8]
 800ef70:	6962      	ldr	r2, [r4, #20]
 800ef72:	4252      	negs	r2, r2
 800ef74:	61a2      	str	r2, [r4, #24]
 800ef76:	6922      	ldr	r2, [r4, #16]
 800ef78:	b942      	cbnz	r2, 800ef8c <__swsetup_r+0xa4>
 800ef7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef7e:	d1c5      	bne.n	800ef0c <__swsetup_r+0x24>
 800ef80:	bd38      	pop	{r3, r4, r5, pc}
 800ef82:	0799      	lsls	r1, r3, #30
 800ef84:	bf58      	it	pl
 800ef86:	6962      	ldrpl	r2, [r4, #20]
 800ef88:	60a2      	str	r2, [r4, #8]
 800ef8a:	e7f4      	b.n	800ef76 <__swsetup_r+0x8e>
 800ef8c:	2000      	movs	r0, #0
 800ef8e:	e7f7      	b.n	800ef80 <__swsetup_r+0x98>
 800ef90:	20000330 	.word	0x20000330

0800ef94 <_raise_r>:
 800ef94:	291f      	cmp	r1, #31
 800ef96:	b538      	push	{r3, r4, r5, lr}
 800ef98:	4605      	mov	r5, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	d904      	bls.n	800efa8 <_raise_r+0x14>
 800ef9e:	2316      	movs	r3, #22
 800efa0:	6003      	str	r3, [r0, #0]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efaa:	b112      	cbz	r2, 800efb2 <_raise_r+0x1e>
 800efac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efb0:	b94b      	cbnz	r3, 800efc6 <_raise_r+0x32>
 800efb2:	4628      	mov	r0, r5
 800efb4:	f000 f830 	bl	800f018 <_getpid_r>
 800efb8:	4622      	mov	r2, r4
 800efba:	4601      	mov	r1, r0
 800efbc:	4628      	mov	r0, r5
 800efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efc2:	f000 b817 	b.w	800eff4 <_kill_r>
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d00a      	beq.n	800efe0 <_raise_r+0x4c>
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	d103      	bne.n	800efd6 <_raise_r+0x42>
 800efce:	2316      	movs	r3, #22
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	2001      	movs	r0, #1
 800efd4:	e7e7      	b.n	800efa6 <_raise_r+0x12>
 800efd6:	2100      	movs	r1, #0
 800efd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efdc:	4620      	mov	r0, r4
 800efde:	4798      	blx	r3
 800efe0:	2000      	movs	r0, #0
 800efe2:	e7e0      	b.n	800efa6 <_raise_r+0x12>

0800efe4 <raise>:
 800efe4:	4b02      	ldr	r3, [pc, #8]	@ (800eff0 <raise+0xc>)
 800efe6:	4601      	mov	r1, r0
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	f7ff bfd3 	b.w	800ef94 <_raise_r>
 800efee:	bf00      	nop
 800eff0:	20000330 	.word	0x20000330

0800eff4 <_kill_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4d07      	ldr	r5, [pc, #28]	@ (800f014 <_kill_r+0x20>)
 800eff8:	2300      	movs	r3, #0
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	4611      	mov	r1, r2
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	f7f4 f9ef 	bl	80033e4 <_kill>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	d102      	bne.n	800f010 <_kill_r+0x1c>
 800f00a:	682b      	ldr	r3, [r5, #0]
 800f00c:	b103      	cbz	r3, 800f010 <_kill_r+0x1c>
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	bd38      	pop	{r3, r4, r5, pc}
 800f012:	bf00      	nop
 800f014:	200027f4 	.word	0x200027f4

0800f018 <_getpid_r>:
 800f018:	f7f4 b9dc 	b.w	80033d4 <_getpid>

0800f01c <__swhatbuf_r>:
 800f01c:	b570      	push	{r4, r5, r6, lr}
 800f01e:	460c      	mov	r4, r1
 800f020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f024:	2900      	cmp	r1, #0
 800f026:	b096      	sub	sp, #88	@ 0x58
 800f028:	4615      	mov	r5, r2
 800f02a:	461e      	mov	r6, r3
 800f02c:	da0d      	bge.n	800f04a <__swhatbuf_r+0x2e>
 800f02e:	89a3      	ldrh	r3, [r4, #12]
 800f030:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f034:	f04f 0100 	mov.w	r1, #0
 800f038:	bf14      	ite	ne
 800f03a:	2340      	movne	r3, #64	@ 0x40
 800f03c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f040:	2000      	movs	r0, #0
 800f042:	6031      	str	r1, [r6, #0]
 800f044:	602b      	str	r3, [r5, #0]
 800f046:	b016      	add	sp, #88	@ 0x58
 800f048:	bd70      	pop	{r4, r5, r6, pc}
 800f04a:	466a      	mov	r2, sp
 800f04c:	f000 f848 	bl	800f0e0 <_fstat_r>
 800f050:	2800      	cmp	r0, #0
 800f052:	dbec      	blt.n	800f02e <__swhatbuf_r+0x12>
 800f054:	9901      	ldr	r1, [sp, #4]
 800f056:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f05a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f05e:	4259      	negs	r1, r3
 800f060:	4159      	adcs	r1, r3
 800f062:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f066:	e7eb      	b.n	800f040 <__swhatbuf_r+0x24>

0800f068 <__smakebuf_r>:
 800f068:	898b      	ldrh	r3, [r1, #12]
 800f06a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f06c:	079d      	lsls	r5, r3, #30
 800f06e:	4606      	mov	r6, r0
 800f070:	460c      	mov	r4, r1
 800f072:	d507      	bpl.n	800f084 <__smakebuf_r+0x1c>
 800f074:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	6123      	str	r3, [r4, #16]
 800f07c:	2301      	movs	r3, #1
 800f07e:	6163      	str	r3, [r4, #20]
 800f080:	b003      	add	sp, #12
 800f082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f084:	ab01      	add	r3, sp, #4
 800f086:	466a      	mov	r2, sp
 800f088:	f7ff ffc8 	bl	800f01c <__swhatbuf_r>
 800f08c:	9f00      	ldr	r7, [sp, #0]
 800f08e:	4605      	mov	r5, r0
 800f090:	4639      	mov	r1, r7
 800f092:	4630      	mov	r0, r6
 800f094:	f7fe fecc 	bl	800de30 <_malloc_r>
 800f098:	b948      	cbnz	r0, 800f0ae <__smakebuf_r+0x46>
 800f09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f09e:	059a      	lsls	r2, r3, #22
 800f0a0:	d4ee      	bmi.n	800f080 <__smakebuf_r+0x18>
 800f0a2:	f023 0303 	bic.w	r3, r3, #3
 800f0a6:	f043 0302 	orr.w	r3, r3, #2
 800f0aa:	81a3      	strh	r3, [r4, #12]
 800f0ac:	e7e2      	b.n	800f074 <__smakebuf_r+0xc>
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	6020      	str	r0, [r4, #0]
 800f0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0b6:	81a3      	strh	r3, [r4, #12]
 800f0b8:	9b01      	ldr	r3, [sp, #4]
 800f0ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f0be:	b15b      	cbz	r3, 800f0d8 <__smakebuf_r+0x70>
 800f0c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	f000 f81d 	bl	800f104 <_isatty_r>
 800f0ca:	b128      	cbz	r0, 800f0d8 <__smakebuf_r+0x70>
 800f0cc:	89a3      	ldrh	r3, [r4, #12]
 800f0ce:	f023 0303 	bic.w	r3, r3, #3
 800f0d2:	f043 0301 	orr.w	r3, r3, #1
 800f0d6:	81a3      	strh	r3, [r4, #12]
 800f0d8:	89a3      	ldrh	r3, [r4, #12]
 800f0da:	431d      	orrs	r5, r3
 800f0dc:	81a5      	strh	r5, [r4, #12]
 800f0de:	e7cf      	b.n	800f080 <__smakebuf_r+0x18>

0800f0e0 <_fstat_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d07      	ldr	r5, [pc, #28]	@ (800f100 <_fstat_r+0x20>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f7f4 f9d9 	bl	80034a4 <_fstat>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d102      	bne.n	800f0fc <_fstat_r+0x1c>
 800f0f6:	682b      	ldr	r3, [r5, #0]
 800f0f8:	b103      	cbz	r3, 800f0fc <_fstat_r+0x1c>
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	bf00      	nop
 800f100:	200027f4 	.word	0x200027f4

0800f104 <_isatty_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	4d06      	ldr	r5, [pc, #24]	@ (800f120 <_isatty_r+0x1c>)
 800f108:	2300      	movs	r3, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	602b      	str	r3, [r5, #0]
 800f110:	f7f4 f9d8 	bl	80034c4 <_isatty>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_isatty_r+0x1a>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_isatty_r+0x1a>
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	200027f4 	.word	0x200027f4

0800f124 <sqrtf>:
 800f124:	b508      	push	{r3, lr}
 800f126:	ed2d 8b02 	vpush	{d8}
 800f12a:	eeb0 8a40 	vmov.f32	s16, s0
 800f12e:	f000 f817 	bl	800f160 <__ieee754_sqrtf>
 800f132:	eeb4 8a48 	vcmp.f32	s16, s16
 800f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13a:	d60c      	bvs.n	800f156 <sqrtf+0x32>
 800f13c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f15c <sqrtf+0x38>
 800f140:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f148:	d505      	bpl.n	800f156 <sqrtf+0x32>
 800f14a:	f7fd ff75 	bl	800d038 <__errno>
 800f14e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f152:	2321      	movs	r3, #33	@ 0x21
 800f154:	6003      	str	r3, [r0, #0]
 800f156:	ecbd 8b02 	vpop	{d8}
 800f15a:	bd08      	pop	{r3, pc}
 800f15c:	00000000 	.word	0x00000000

0800f160 <__ieee754_sqrtf>:
 800f160:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f164:	4770      	bx	lr
	...

0800f168 <_init>:
 800f168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f16a:	bf00      	nop
 800f16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f16e:	bc08      	pop	{r3}
 800f170:	469e      	mov	lr, r3
 800f172:	4770      	bx	lr

0800f174 <_fini>:
 800f174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f176:	bf00      	nop
 800f178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f17a:	bc08      	pop	{r3}
 800f17c:	469e      	mov	lr, r3
 800f17e:	4770      	bx	lr
